<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-12-01T17:50:51+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">messyR</title><subtitle>...atypical how to&apos;s
</subtitle><author><name>J Hardy</name><email>jrh-dev@protonmail.com</email></author><entry><title type="html">R Basics - Loops</title><link href="http://0.0.0.0:4000/2022/12/01/r-basics-loops.html" rel="alternate" type="text/html" title="R Basics - Loops" /><published>2022-12-01T00:00:00+00:00</published><updated>2022-12-01T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2022/12/01/r-basics-loops</id><content type="html" xml:base="http://0.0.0.0:4000/2022/12/01/r-basics-loops.html"><![CDATA[<p>Loops are a fundamental element of computer programming. They facilitate iteration by running a piece of code repeatedly and provide a flexible approach to solving many problems that you may encounter.</p>

<p>Loops have gained something of a bad reputation amongst the R community, largely owing to the fact that poor implementation of loops in R can result in code that is slow and inefficient. However, with proper use loops can be a powerful and effective tool for the R programmer.</p>

<h2 id="for-loops">for loops</h2>

<p>Lets start with a simple example, a loop to print “a”, “b” and “c” to the console.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span></code></pre></figure>

<p>To understand what’s happening with our loop we can break it down into the component parts.</p>

<h3 id="the-header">The header</h3>

<p><code class="language-plaintext highlighter-rouge">for (x in c("a", "b", "c"))</code></p>

<p>The header of our for loop is used to define our loop variable, what is going to change during each iteration. During each iteration <code class="language-plaintext highlighter-rouge">x</code> will take on a different value from <code class="language-plaintext highlighter-rouge">c("a", "b", "c")</code>. In effect, executing the for loop assigns a temporary value to <code class="language-plaintext highlighter-rouge">x</code> for each iteration.</p>

<p><strong>1st iteration</strong>
<code class="language-plaintext highlighter-rouge">x = "a"</code></p>

<p><strong>2nd iteration</strong>
<code class="language-plaintext highlighter-rouge">x = "b"</code></p>

<p><strong>3rd iteration</strong>
<code class="language-plaintext highlighter-rouge">x = "c"</code></p>

<h3 id="the-body">The body</h3>

<p><code class="language-plaintext highlighter-rouge">print(x)</code></p>

<p>The body of our for loop is used to define the action or actions to be performed during each iteration. The body will always use the current value of <code class="language-plaintext highlighter-rouge">x</code>, which changes with each iteration. Therefore, our for loop actually produces 3 different outputs.</p>

<p><strong>1st iteration</strong>
<code class="language-plaintext highlighter-rouge">[1] "a"</code></p>

<p><strong>2nd iteration</strong>
<code class="language-plaintext highlighter-rouge">[1] "b"</code></p>

<p><strong>3rd iteration</strong>
<code class="language-plaintext highlighter-rouge">[1] "c"</code></p>

<h3 id="constructing-the-header">Constructing the header</h3>

<p>The syntax used in the header of a for loop is a little different from typical R syntax in terms of the way in which it is structured and this can cause confusion. The simplest way to think about writing the loop is to consider the left hand side (LHS) and right hand side (RHS) of <code class="language-plaintext highlighter-rouge">in</code>. The value that you place on the LHS of <code class="language-plaintext highlighter-rouge">in</code> will change with each iteration to the next element of the vector passed to the RHS of <code class="language-plaintext highlighter-rouge">in</code>.</p>

<p>There are no rules as to what the LHS value should be named. All the below examples would produce the same result.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">letter</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">xyzw</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">xyzw</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span></code></pre></figure>

<p>The RHS can realistically be any R object that can be iterated over. The following code examples produce the same output.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">

</span><span class="n">a_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">)</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">a_vector</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span></code></pre></figure>

<h2 id="constructing-the-body">Constructing the body</h2>

<p>The body will contain more traditional R code, but should (almost always) be wrapped in curly braces (<code class="language-plaintext highlighter-rouge">{ }</code>). If we try to write a simple loop without enclosing the body with <code class="language-plaintext highlighter-rouge">{ }</code>, things may not work as intended. Let’s look at a loop with 2 print statements written with and without the curly braces.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">//</span><span class="w"> </span><span class="n">with</span><span class="w"> </span><span class="n">enclosed</span><span class="w"> </span><span class="n">body</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">

</span><span class="o">//</span><span class="w"> </span><span class="n">without</span><span class="w"> </span><span class="n">enclosed</span><span class="w"> </span><span class="n">body</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">))</span><span class="w"> 
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="cd">#' [1] "a"</span><span class="w">
</span><span class="cd">#' [1] "b"</span><span class="w">
</span><span class="cd">#' [1] "c"</span><span class="w">
</span><span class="cd">#' [1] "c"</span></code></pre></figure>

<p>In the example with the enclosed body R has executed all of the code contained within the curly braces for each operation, thus our letters have been printed twice. In the example without an enclosed body, R has only included the next line following the header in the loop iterations, our second print statement has therefore only ran once, after the loop has completed. The extra “c” that was printed came from the final value assigned to <code class="language-plaintext highlighter-rouge">x</code>.</p>

<p class="info">
<strong><i>Information:</i></strong> It is important to note that unlike function calls, loops do not execute within an enclosed environment. This means that any temporary assignments made in the body will exist in your workspace once the loop completes. We can see this by running <code>print(x)</code> in isolation.
<br /><br />
<code>

print(x)
#' [1] "c"

</code>
<br /><br />
<code>x</code> now exists in our global environment and its value is as per the last element of the vector we iterated over in our loop (<code>c("a", "b", "c")</code>). 
</p>

<h2 id="storing-an-output">Storing an output</h2>

<p>Often we will want to use a loop to apply the same manipulation to multiple elements of a vector. Let’s start with an example of a loop that adds 1 to another number and prints the result to the console.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">numbers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">numbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">print</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">
</span><span class="cd">#' [1] 3</span><span class="w">
</span><span class="cd">#' [1] 4</span><span class="w">
</span><span class="cd">#' [1] 5</span><span class="w">
</span><span class="cd">#' [1] 6</span></code></pre></figure>

<p>If we want to store the outputs as a vector rather than print them to the console, however, we can’t create a new object within the loop itself to capture all of the iterations. If we do, the output might not be what you initially expect.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">numbers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">numbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">output</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 6</span></code></pre></figure>

<p>In the above example each iteration overwrites the previous value of <code class="language-plaintext highlighter-rouge">output</code>, so we only capture the value from the final loop iteration. We actually need to create the <code class="language-plaintext highlighter-rouge">output</code> vector before we execute the loop. Let’s create an empty vector of the correct type named <code class="language-plaintext highlighter-rouge">output</code> with the <code class="language-plaintext highlighter-rouge">vector()</code> function. We can then use <code class="language-plaintext highlighter-rouge">c()</code> inside the body to append the output of each iteration to <code class="language-plaintext highlighter-rouge">output</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">numbers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="n">output</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"numeric"</span><span class="p">)</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">numbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">output</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">))</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 2 3 4 5 6</span></code></pre></figure>

<p>It worked! We managed to store all of our outputs in the <code class="language-plaintext highlighter-rouge">output</code> vector. However, just because we can do something doesn’t mean that we should. Its important to understand that this method can be used and it is typically the solution most people will come up with first, but in practice <strong>NEVER DO THIS</strong>.</p>

<p>Instead lets look at pre-allocation.</p>

<h2 id="pre-allocation">Pre-allocation</h2>

<p>Whilst the example above achieves our desired outcome it is inefficient and should be avoided. When used with toy data to provide a simple example the approach won’t produce any noticeable performance issues, however, if we scaled this to a larger number of iterations or increased the complexity we would have slow and memory hungry code. This issue is a key driver of negativity within the R community around the use of loops.</p>

<p>To understand why this approach doesn’t work well, we need to look at R’s copy on modify behaviours. Every R object exists in memory (the computers RAM specifically), the object has an address so that R knows where to find it, and it has an amount of space allocated to it. The space an object is given is always precisely the amount it requires in its current form.</p>

<p>When we add more elements to a vector using <code class="language-plaintext highlighter-rouge">c()</code> the new object requires more space than has been assigned to the original one; <code class="language-plaintext highlighter-rouge">c(1,2,3,4)</code> won’t fit in the same space as <code class="language-plaintext highlighter-rouge">c(1,2,3,4,5)</code>. R therefore has to move the object to a new space each time that the vector increases in length and moving is time consuming as it involves making a copy of the original object. There is also a compounding effect in that the bigger the object, the more time it takes to move, so each iteration takes longer.</p>

<p>Thankfully, there is a simple solution to the problem in the form of pre-allocation.</p>

<p>Pre-allocation allows us to create an object to store our output up front, ensuring that it has enough memory assigned to it from the beginning, and then populating it. Whilst it may sound quite technical the implementation is rather simple.</p>

<p>Firstly, we need to identify the size that we require <code class="language-plaintext highlighter-rouge">output</code> to be. We know that our loop will produce one value during each iteration, and the number of iterations will be equal to the length of <code class="language-plaintext highlighter-rouge">numbers</code>. Let’s start by capturing the length of <code class="language-plaintext highlighter-rouge">numbers</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">numbers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="n">len_numbers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">len_numbers</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 5</span></code></pre></figure>

<p>We can now create our vector, <code class="language-plaintext highlighter-rouge">output</code>, ensuring that it is sufficient in size to capture all of out loop outputs. We need to ensure that our vector is of the correct type using the <code class="language-plaintext highlighter-rouge">mode</code> argument of the <code class="language-plaintext highlighter-rouge">vector()</code> function. In this case we are working with numeric values so we specify <code class="language-plaintext highlighter-rouge">mode = "numeric"</code>. We can pass the <code class="language-plaintext highlighter-rouge">len_numbers</code> object that we created earlier to the <code class="language-plaintext highlighter-rouge">length</code> argument.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">output</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"numeric"</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len_numbers</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 0 0 0 0 0</span></code></pre></figure>

<p>We now need to rewrite our loop head a little to make use of pre-allocation. Our original <code class="language-plaintext highlighter-rouge">for (n in numbers)</code> allows us to work on the elements of <code class="language-plaintext highlighter-rouge">numbers</code> directly, however, we are now going to want to access the elements of numbers with the index system which will allow us to assign the output of each iteration to our <code class="language-plaintext highlighter-rouge">output</code> vector. We can use the <code class="language-plaintext highlighter-rouge">seq_len()</code> function for this.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_len</span><span class="p">(</span><span class="n">len_numbers</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    
    </span><span class="n">output</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">numbers</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 2 3 4 5 6</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">seq_len(len_numbers)</code> returns a vector of the numbers 1 to <code class="language-plaintext highlighter-rouge">len_numbers</code> (5).</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">seq_len</span><span class="p">(</span><span class="n">len_numbers</span><span class="p">)</span><span class="w">
</span><span class="err">'</span><span class="c1"># [1] 1 2 3 4 5</span></code></pre></figure>

<p>So <code class="language-plaintext highlighter-rouge">n</code>s value during the 1st iteration of the loop will be 1, then 2 during the second iteration and so on. We use the value of <code class="language-plaintext highlighter-rouge">n</code> along with R’s indexing system to access the individual elements of <code class="language-plaintext highlighter-rouge">numbers</code> during each iteration and assign the output to the corresponding element of <code class="language-plaintext highlighter-rouge">output</code>.</p>

<p>For example;</p>

<p>In our 1st iteration;</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">n</code> equals 1</p>
  </li>
  <li>
    <p>element 1 of <code class="language-plaintext highlighter-rouge">numbers</code> (<code class="language-plaintext highlighter-rouge">numbers[1]</code>) has 1 added to it (1 + 1 = 2)</p>
  </li>
  <li>
    <p>the value is assigned to element 1 of <code class="language-plaintext highlighter-rouge">output</code> (<code class="language-plaintext highlighter-rouge">output[1]</code>)</p>
  </li>
</ol>

<p>In our 2nd iteration;</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">n</code> equals 2</p>
  </li>
  <li>
    <p>element 2 of <code class="language-plaintext highlighter-rouge">numbers</code> (<code class="language-plaintext highlighter-rouge">numbers[2]</code>) has 2 added to it (2 + 1 = 3)</p>
  </li>
  <li>
    <p>the value is assigned to element 2 of <code class="language-plaintext highlighter-rouge">output</code> (output[2])</p>
  </li>
</ol>

<h3 id="benchmarking-pre-allocation">Benchmarking pre-allocation</h3>

<p>To demonstrate the difference between growing a vector and utilising pre-allocation we can use a benchmarking tool. I recommend the <code class="language-plaintext highlighter-rouge">microbenchmark</code> package.</p>

<p>Lets compare 2 approaches to adding 1 to a vector of length 10,000, one using pre-allocation, and one which grows the output with every iteration.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">microbenchmark</span><span class="o">::</span><span class="n">microbenchmark</span><span class="p">(</span><span class="w">

    </span><span class="n">no_pre_alloc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">"numeric"</span><span class="p">)</span><span class="w">
        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10000</span><span class="p">)</span><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">output</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="n">pre_alloc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">"numeric"</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">)</span><span class="w">
        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10000</span><span class="p">)</span><span class="w"> </span><span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">
    </span><span class="p">},</span><span class="w">
    
    </span><span class="n">times</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">Unit</span><span class="o">:</span><span class="w"> </span><span class="n">milliseconds</span><span class="w">
         </span><span class="n">expr</span><span class="w">         </span><span class="n">mean</span><span class="w">
 </span><span class="n">no_pre_alloc</span><span class="w">   </span><span class="m">137.423091</span><span class="w">
    </span><span class="n">pre_alloc</span><span class="w">     </span><span class="m">3.563711</span></code></pre></figure>

<p>The pre-allocation method is 38 times quicker for this example, and that ratio increases further the larger the data involved.</p>

<h2 id="while-loops">while loops</h2>

<p>Where a for loop typically performs an iteration for each element of a predetermined input, a while loop keeps executing until a condition is met.</p>

<p>Let’s write a loop that prints numbers, starting at 1, increases the number by 1 in each iteration, and stops at 10.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">it</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w">

</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">it</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span><span class="w">

    </span><span class="n">it</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">it</span><span class="w">  </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] 1</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">
</span><span class="cd">#' [1] 3</span><span class="w">
</span><span class="cd">#' [1] 4</span><span class="w">
</span><span class="cd">#' [1] 5</span><span class="w">
</span><span class="cd">#' [1] 6</span><span class="w">
</span><span class="cd">#' [1] 7</span><span class="w">
</span><span class="cd">#' [1] 8</span><span class="w">
</span><span class="cd">#' [1] 9</span><span class="w">
</span><span class="cd">#' [1] 10</span></code></pre></figure>

<p>Our loop first prints the current value of <code class="language-plaintext highlighter-rouge">it</code> to the console, it then adds 1 to <code class="language-plaintext highlighter-rouge">it</code> and reassigns the new value. The test <code class="language-plaintext highlighter-rouge">it &lt;= 10</code> is performed before the code block runs on each iteration.  Once the while condition evaluates to <code class="language-plaintext highlighter-rouge">TRUE</code>, when <code class="language-plaintext highlighter-rouge">it</code> is greater than or equal to 10, the loop ends.</p>

<h2 id="break">break</h2>

<p>We can use the <code class="language-plaintext highlighter-rouge">break</code> key word inside a loop to cause it to stop executing if a condition is met. Lets write a for loop to find the factors of 42, but (rather inefficiently) we are going to check whether numbers 1 through to 100 are factors of 42. We can include an <code class="language-plaintext highlighter-rouge">if</code> statement to ensure only factors of 42 are printed to the console.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">100</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="m">42</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="n">ii</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">print</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] 1</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">
</span><span class="cd">#' [1] 3</span><span class="w">
</span><span class="cd">#' [1] 6</span><span class="w">
</span><span class="cd">#' [1] 7</span><span class="w">
</span><span class="cd">#' [1] 14</span><span class="w">
</span><span class="cd">#' [1] 21</span><span class="w">
</span><span class="cd">#' [1] 42</span></code></pre></figure>

<p>It worked! But our loop executed 100 times. We can check this by looking at the value of <code class="language-plaintext highlighter-rouge">ii</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">ii</span><span class="p">)</span><span class="w">
</span><span class="cd">#' 100</span></code></pre></figure>

<p>We know we won’t find any factors once we pass the value of 42 itself, so lets add a break condition. We will use an <code class="language-plaintext highlighter-rouge">if</code> statement to check whether <code class="language-plaintext highlighter-rouge">ii</code> is equal to 42 during each iteration and if it is we will break the loop. To use <code class="language-plaintext highlighter-rouge">break</code> we simply include the key word, in this example, inside the body of the <code class="language-plaintext highlighter-rouge">if</code> statement.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">100</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="m">42</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="n">ii</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">print</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">42</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="k">break</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] 1</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">
</span><span class="cd">#' [1] 3</span><span class="w">
</span><span class="cd">#' [1] 6</span><span class="w">
</span><span class="cd">#' [1] 7</span><span class="w">
</span><span class="cd">#' [1] 14</span><span class="w">
</span><span class="cd">#' [1] 21</span><span class="w">
</span><span class="cd">#' [1] 42</span></code></pre></figure>

<p>The output is unchanged, but our loop ‘broke’ once <code class="language-plaintext highlighter-rouge">ii</code> was equal to 42 and no more iterations were performed. Again, we can check this by looking at the value of <code class="language-plaintext highlighter-rouge">ii</code> once the the loop has completed.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">ii</span><span class="p">)</span><span class="w">
</span><span class="cd">#' 42</span></code></pre></figure>

<h2 id="next">next</h2>

<p>The <code class="language-plaintext highlighter-rouge">next</code> key word causes the loop to skip the remainder of a single iteration, but unlike <code class="language-plaintext highlighter-rouge">break</code> it continues to perform the rest of the remaining iterations. To demonstrate the functionality lets print the numbers 1 to 10, but skip any numbers that are multiples of 3.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">ii</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="k">next</span><span class="w">
    </span><span class="p">}</span><span class="w">

    </span><span class="n">print</span><span class="p">(</span><span class="n">ii</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] 1</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">
</span><span class="cd">#' [1] 4</span><span class="w">
</span><span class="cd">#' [1] 5</span><span class="w">
</span><span class="cd">#' [1] 7</span><span class="w">
</span><span class="cd">#' [1] 8</span><span class="w">
</span><span class="cd">#' [1] 10</span></code></pre></figure>

<p>Whenever <code class="language-plaintext highlighter-rouge">ii</code> is divisible by 3 the condition within the <code class="language-plaintext highlighter-rouge">if</code> statement is triggered and the <code class="language-plaintext highlighter-rouge">next</code> command causes the current iteration to end and the next one to begin. When <code class="language-plaintext highlighter-rouge">next</code> is triggered the <code class="language-plaintext highlighter-rouge">print()</code> function is never executed within that iteration.</p>

<h2 id="using-loops---examples">Using loops - examples</h2>

<h3 id="in-the-absence-of-vectorisation">In the absence of vectorisation</h3>

<p>The examples above demonstrate how loops function, but don’t represent very efficient real world uses. In R many functions are ‘vectorised’ which means that operations are performed in parallel. Loops offer a solution for when vectorisation isn’t available. Lets explore this with some simple vectors, <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, and <code class="language-plaintext highlighter-rouge">z</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">6</span><span class="o">:</span><span class="m">10</span><span class="w">

</span><span class="n">z</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">11</span></code></pre></figure>

<p>Vectorisation is the reason that <code class="language-plaintext highlighter-rouge">x + y</code> gives us <code class="language-plaintext highlighter-rouge">7  9 11 13 15</code>.</p>

<p>In essence <code class="language-plaintext highlighter-rouge">x + y</code> is actually returning;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">x</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">x</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">x</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="w">
</span><span class="n">x</span><span class="p">[</span><span class="m">4</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">4</span><span class="p">]</span><span class="w">
</span><span class="n">x</span><span class="p">[</span><span class="m">5</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">5</span><span class="p">]</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">z + y</code> is a little different, the value of <code class="language-plaintext highlighter-rouge">z</code> is recycled and used against each element of <code class="language-plaintext highlighter-rouge">y</code>, so we actually get the return of;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">z</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">z</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">z</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="w">
</span><span class="n">z</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">4</span><span class="p">]</span><span class="w">
</span><span class="n">z</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">[</span><span class="m">5</span><span class="p">]</span></code></pre></figure>

<p>Vectorisation is also the reason why vectorised functions like <code class="language-plaintext highlighter-rouge">sqrt()</code> act on each element of a vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sqrt</span><span class="p">(</span><span class="m">10</span><span class="o">:</span><span class="m">15</span><span class="p">)</span><span class="w">
</span><span class="cd">#' 3.162278 3.316625 3.464102 3.605551 3.741657 3.872983</span></code></pre></figure>

<p>However, when a function isn’t vectorised we have to proceed a little differently. The digest package provides the function <code class="language-plaintext highlighter-rouge">digest()</code> which can be used to generate hash digests of R objects. Given its intended usage it is not vectorised. Lets run <code class="language-plaintext highlighter-rouge">digest()</code> over a vector of names.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">digest</span><span class="o">::</span><span class="n">digest</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Frances"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Polly"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Walt"</span><span class="p">))</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="s2">"463e094dab0323c06acf39d4c0a9d62c"</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">digest()</code> has taken the entire vector and returned a hash for it (as intended). If we want to get a hash for each element of the vector then we will have to try something else, like a loop.</p>

<p>Using a simple loop we can hash each element of the vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">name</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Frances"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Polly"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Walt"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">digest</span><span class="o">::</span><span class="n">digest</span><span class="p">(</span><span class="n">name</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="cd">#' [1] "59a25be57d59ee4534e4d3d32baebca7"</span><span class="w">
</span><span class="cd">#' [1] "dd82d09e51606fe5006f38acdb19e9cb"</span><span class="w">
</span><span class="cd">#' [1] "407f522c0d10c7f1692fd14aaa2d951a"</span><span class="w">
</span><span class="cd">#' [1] "7597bee67ba5e2cdc44896451977e786"</span><span class="w">
</span><span class="cd">#' [1] "1caacbe3b8acd3454b3c6a9ae79aa1f6"</span></code></pre></figure>

<h3 id="to-perform-the-same-operation-on-multiple-columns">To perform the same operation on multiple columns</h3>

<p>We can use loops to perform the same operation multiple times on a different input. Consider the following data frame.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">col_a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span><span class="w">
    </span><span class="n">col_b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">6</span><span class="o">:</span><span class="m">10</span><span class="p">,</span><span class="w">
    </span><span class="n">col_c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">11</span><span class="o">:</span><span class="m">15</span><span class="p">,</span><span class="w">
    </span><span class="n">col_d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="o">:</span><span class="m">20</span><span class="p">,</span><span class="w">
    </span><span class="n">col_e</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="o">:</span><span class="m">25</span><span class="p">,</span><span class="w">
    </span><span class="n">col_f</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">26</span><span class="o">:</span><span class="m">30</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   col_a col_b col_c col_d col_e col_f</span><span class="w">
</span><span class="cd">#' 1     1     6    11    16    21    26</span><span class="w">
</span><span class="cd">#' 2     2     7    12    17    22    27</span><span class="w">
</span><span class="cd">#' 3     3     8    13    18    23    28</span><span class="w">
</span><span class="cd">#' 4     4     9    14    19    24    29</span><span class="w">
</span><span class="cd">#' 5     5    10    15    20    25    30</span><span class="w">

</span><span class="c1"># a quick way to check the types of a data frame's colums</span><span class="w">
</span><span class="n">sapply</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">typeof</span><span class="p">)</span><span class="w"> 
</span><span class="cd">#'     col_a     col_b     col_c     col_d     col_e     col_f </span><span class="w">
</span><span class="cd">#' "integer" "integer" "integer" "integer" "integer" "integer" </span></code></pre></figure>

<p>If we want to specify the type of <code class="language-plaintext highlighter-rouge">col_a</code>, <code class="language-plaintext highlighter-rouge">col_c</code>, and <code class="language-plaintext highlighter-rouge">col_e</code> as <code class="language-plaintext highlighter-rouge">double</code> we could do something like this;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">col_a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">col_a</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">col_c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">col_c</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">col_e</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">col_e</span><span class="p">)</span></code></pre></figure>

<p>Or in the tidyverse;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
    </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w">
       </span><span class="n">col_a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">col_a</span><span class="p">),</span><span class="w">
       </span><span class="n">col_c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">col_c</span><span class="p">),</span><span class="w">
       </span><span class="n">col_e</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">col_e</span><span class="p">)</span><span class="w"> 
    </span><span class="p">)</span></code></pre></figure>

<p>However, with 3 columns to transform the code is already cumbersome, in a larger data set we could easily find the approach becoming difficult to maintain. The tidyverse does offer a solution to reduce the amount of code required here but it involves learning additional functions and adds complexity.</p>

<p>Loops provide an alternative approach here that is well suited to the task at hand, compact, and simple to understand.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">col</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"col_a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"col_c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"col_e"</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">  
    </span><span class="n">df</span><span class="p">[,</span><span class="w"> </span><span class="n">col</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.double</span><span class="p">(</span><span class="n">df</span><span class="p">[,</span><span class="w"> </span><span class="n">col</span><span class="p">]</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">sapply</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">typeof</span><span class="p">)</span><span class="w"> </span><span class="c1"># check types</span><span class="w">
</span><span class="cd">#'     col_a     col_b     col_c     col_d     col_e     col_f </span><span class="w">
</span><span class="cd">#'  "double" "integer"  "double" "integer"  "double" "integer" </span></code></pre></figure>

<h2 id="next-steps">Next steps</h2>

<p>Loops provide a powerful and flexible way to perform iteration. Correct usage can help to reduce the amount of code you need to write to achieve a desired outcome. Try the tasks below to put your knowledge into practice.</p>

<ol>
  <li>
    <p>Write a for loop to calculate the mean value of all columns in the built in <code class="language-plaintext highlighter-rouge">mtcars</code> dataset. Store the means in a vector named <code class="language-plaintext highlighter-rouge">mtcars_means</code>. What is the sum of <code class="language-plaintext highlighter-rouge">mtcars_means</code>?</p>
  </li>
  <li>
    <p>Create 2 objects, <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>, and assign the value of <code class="language-plaintext highlighter-rouge">1</code> to each. Write a while loop that;</p>

    <ul>
      <li>doubles the value of <code class="language-plaintext highlighter-rouge">x</code> in each iteration.</li>
      <li>adds 1 to the value of <code class="language-plaintext highlighter-rouge">y</code> in each iteration.</li>
      <li>ends when <code class="language-plaintext highlighter-rouge">y</code> is equal to 20</li>
    </ul>

    <p>What is the value of <code class="language-plaintext highlighter-rouge">x</code> when the loop ends?</p>
  </li>
  <li>
    <p>Write a loop to print all the numbers between 1 and 100 (inclusive) which are divisible by 33. Try to include the <code class="language-plaintext highlighter-rouge">next</code> keyword. Which numbers printed to the console?</p>
  </li>
</ol>

<details>
  <summary>Answers</summary>
  
  1. 435.6938 <br />

  2. 524,288 <br />

  3. 33, 66, and 99 <br />
    
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[Loops are a fundamental element of computer programming. They facilitate iteration by running a piece of code repeatedly and provide a flexible approach to solving many problems that you may encounter. Loops have gained something of a bad reputation amongst the R community, largely owing to the fact that poor implementation of loops in R can result in code that is slow and inefficient. However, with proper use loops can be a powerful and effective tool for the R programmer. for loops Lets start with a simple example, a loop to print “a”, “b” and “c” to the console. for (x in c("a", "b", "c")) { print(x) } #' [1] "a" #' [1] "b" #' [1] "c" To understand what’s happening with our loop we can break it down into the component parts. The header for (x in c("a", "b", "c")) The header of our for loop is used to define our loop variable, what is going to change during each iteration. During each iteration x will take on a different value from c("a", "b", "c"). In effect, executing the for loop assigns a temporary value to x for each iteration. 1st iteration x = "a" 2nd iteration x = "b" 3rd iteration x = "c" The body print(x) The body of our for loop is used to define the action or actions to be performed during each iteration. The body will always use the current value of x, which changes with each iteration. Therefore, our for loop actually produces 3 different outputs. 1st iteration [1] "a" 2nd iteration [1] "b" 3rd iteration [1] "c" Constructing the header The syntax used in the header of a for loop is a little different from typical R syntax in terms of the way in which it is structured and this can cause confusion. The simplest way to think about writing the loop is to consider the left hand side (LHS) and right hand side (RHS) of in. The value that you place on the LHS of in will change with each iteration to the next element of the vector passed to the RHS of in. There are no rules as to what the LHS value should be named. All the below examples would produce the same result. for (x in c("a", "b", "c")) { print(x) } #' [1] "a" #' [1] "b" #' [1] "c" for (letter in c("a", "b", "c")) { print(letter) } #' [1] "a" #' [1] "b" #' [1] "c" for (xyzw in c("a", "b", "c")) { print(xyzw) } #' [1] "a" #' [1] "b" #' [1] "c" The RHS can realistically be any R object that can be iterated over. The following code examples produce the same output. for (x in c("a", "b", "c")) { print(x) } #' [1] "a" #' [1] "b" #' [1] "c" a_vector &lt;- c("a", "b", "c") for (x in a_vector) { print(x) } #' [1] "a" #' [1] "b" #' [1] "c" Constructing the body The body will contain more traditional R code, but should (almost always) be wrapped in curly braces ({ }). If we try to write a simple loop without enclosing the body with { }, things may not work as intended. Let’s look at a loop with 2 print statements written with and without the curly braces. // with enclosed body for (x in c("a", "b", "c")) { print(x) print(x) } #' [1] "a" #' [1] "a" #' [1] "b" #' [1] "b" #' [1] "c" #' [1] "c" // without enclosed body for (x in c("a", "b", "c")) print(x) print(x) #' [1] "a" #' [1] "b" #' [1] "c" #' [1] "c" In the example with the enclosed body R has executed all of the code contained within the curly braces for each operation, thus our letters have been printed twice. In the example without an enclosed body, R has only included the next line following the header in the loop iterations, our second print statement has therefore only ran once, after the loop has completed. The extra “c” that was printed came from the final value assigned to x. Information: It is important to note that unlike function calls, loops do not execute within an enclosed environment. This means that any temporary assignments made in the body will exist in your workspace once the loop completes. We can see this by running print(x) in isolation. print(x) #' [1] "c" x now exists in our global environment and its value is as per the last element of the vector we iterated over in our loop (c("a", "b", "c")). Storing an output Often we will want to use a loop to apply the same manipulation to multiple elements of a vector. Let’s start with an example of a loop that adds 1 to another number and prints the result to the console. numbers &lt;- 1:5 for (n in numbers) { print(n + 1) } #' [1] 2 #' [1] 3 #' [1] 4 #' [1] 5 #' [1] 6 If we want to store the outputs as a vector rather than print them to the console, however, we can’t create a new object within the loop itself to capture all of the iterations. If we do, the output might not be what you initially expect. numbers &lt;- 1:5 for (n in numbers) { output &lt;- (n + 1) } print(output) #' [1] 6 In the above example each iteration overwrites the previous value of output, so we only capture the value from the final loop iteration. We actually need to create the output vector before we execute the loop. Let’s create an empty vector of the correct type named output with the vector() function. We can then use c() inside the body to append the output of each iteration to output. numbers &lt;- 1:5 output &lt;- vector(mode = "numeric") for (n in numbers) { output &lt;- c(output, (n + 1)) } print(output) #' [1] 2 3 4 5 6 It worked! We managed to store all of our outputs in the output vector. However, just because we can do something doesn’t mean that we should. Its important to understand that this method can be used and it is typically the solution most people will come up with first, but in practice NEVER DO THIS. Instead lets look at pre-allocation. Pre-allocation Whilst the example above achieves our desired outcome it is inefficient and should be avoided. When used with toy data to provide a simple example the approach won’t produce any noticeable performance issues, however, if we scaled this to a larger number of iterations or increased the complexity we would have slow and memory hungry code. This issue is a key driver of negativity within the R community around the use of loops. To understand why this approach doesn’t work well, we need to look at R’s copy on modify behaviours. Every R object exists in memory (the computers RAM specifically), the object has an address so that R knows where to find it, and it has an amount of space allocated to it. The space an object is given is always precisely the amount it requires in its current form. When we add more elements to a vector using c() the new object requires more space than has been assigned to the original one; c(1,2,3,4) won’t fit in the same space as c(1,2,3,4,5). R therefore has to move the object to a new space each time that the vector increases in length and moving is time consuming as it involves making a copy of the original object. There is also a compounding effect in that the bigger the object, the more time it takes to move, so each iteration takes longer. Thankfully, there is a simple solution to the problem in the form of pre-allocation. Pre-allocation allows us to create an object to store our output up front, ensuring that it has enough memory assigned to it from the beginning, and then populating it. Whilst it may sound quite technical the implementation is rather simple. Firstly, we need to identify the size that we require output to be. We know that our loop will produce one value during each iteration, and the number of iterations will be equal to the length of numbers. Let’s start by capturing the length of numbers. numbers &lt;- 1:5 len_numbers &lt;- length(numbers) print(len_numbers) #' [1] 5 We can now create our vector, output, ensuring that it is sufficient in size to capture all of out loop outputs. We need to ensure that our vector is of the correct type using the mode argument of the vector() function. In this case we are working with numeric values so we specify mode = "numeric". We can pass the len_numbers object that we created earlier to the length argument. output &lt;- vector(mode = "numeric", length = len_numbers) print(output) #' [1] 0 0 0 0 0 We now need to rewrite our loop head a little to make use of pre-allocation. Our original for (n in numbers) allows us to work on the elements of numbers directly, however, we are now going to want to access the elements of numbers with the index system which will allow us to assign the output of each iteration to our output vector. We can use the seq_len() function for this. for (n in seq_len(len_numbers)) { output[n] &lt;- numbers[n] + 1 } print(output) #' [1] 2 3 4 5 6 seq_len(len_numbers) returns a vector of the numbers 1 to len_numbers (5). seq_len(len_numbers) '# [1] 1 2 3 4 5 So ns value during the 1st iteration of the loop will be 1, then 2 during the second iteration and so on. We use the value of n along with R’s indexing system to access the individual elements of numbers during each iteration and assign the output to the corresponding element of output. For example; In our 1st iteration; n equals 1 element 1 of numbers (numbers[1]) has 1 added to it (1 + 1 = 2) the value is assigned to element 1 of output (output[1]) In our 2nd iteration; n equals 2 element 2 of numbers (numbers[2]) has 2 added to it (2 + 1 = 3) the value is assigned to element 2 of output (output[2]) Benchmarking pre-allocation To demonstrate the difference between growing a vector and utilising pre-allocation we can use a benchmarking tool. I recommend the microbenchmark package. Lets compare 2 approaches to adding 1 to a vector of length 10,000, one using pre-allocation, and one which grows the output with every iteration. microbenchmark::microbenchmark( no_pre_alloc = { output = vector(mode="numeric") for (i in 1:10000) output &lt;- c(output, i + 1) }, pre_alloc = { output = vector(mode="numeric", length = 1000) for (i in 1:10000) output[i] &lt;- i + 1 }, times = 10 ) Unit: milliseconds expr mean no_pre_alloc 137.423091 pre_alloc 3.563711 The pre-allocation method is 38 times quicker for this example, and that ratio increases further the larger the data involved. while loops Where a for loop typically performs an iteration for each element of a predetermined input, a while loop keeps executing until a condition is met. Let’s write a loop that prints numbers, starting at 1, increases the number by 1 in each iteration, and stops at 10. it = 1 while (it &lt;= 10) { print(it) it &lt;- it + 1 } #' [1] 1 #' [1] 2 #' [1] 3 #' [1] 4 #' [1] 5 #' [1] 6 #' [1] 7 #' [1] 8 #' [1] 9 #' [1] 10 Our loop first prints the current value of it to the console, it then adds 1 to it and reassigns the new value. The test it &lt;= 10 is performed before the code block runs on each iteration. Once the while condition evaluates to TRUE, when it is greater than or equal to 10, the loop ends. break We can use the break key word inside a loop to cause it to stop executing if a condition is met. Lets write a for loop to find the factors of 42, but (rather inefficiently) we are going to check whether numbers 1 through to 100 are factors of 42. We can include an if statement to ensure only factors of 42 are printed to the console. for (ii in 1:100) { if (42 %% ii == 0) { print (ii) } } #' [1] 1 #' [1] 2 #' [1] 3 #' [1] 6 #' [1] 7 #' [1] 14 #' [1] 21 #' [1] 42 It worked! But our loop executed 100 times. We can check this by looking at the value of ii. print(ii) #' 100 We know we won’t find any factors once we pass the value of 42 itself, so lets add a break condition. We will use an if statement to check whether ii is equal to 42 during each iteration and if it is we will break the loop. To use break we simply include the key word, in this example, inside the body of the if statement. for (ii in 1:100) { if (42 %% ii == 0) { print (ii) } if (ii == 42) { break } } #' [1] 1 #' [1] 2 #' [1] 3 #' [1] 6 #' [1] 7 #' [1] 14 #' [1] 21 #' [1] 42 The output is unchanged, but our loop ‘broke’ once ii was equal to 42 and no more iterations were performed. Again, we can check this by looking at the value of ii once the the loop has completed. print(ii) #' 42 next The next key word causes the loop to skip the remainder of a single iteration, but unlike break it continues to perform the rest of the remaining iterations. To demonstrate the functionality lets print the numbers 1 to 10, but skip any numbers that are multiples of 3. for (ii in 1:10) { if (ii %% 3 == 0) { next } print(ii) } #' [1] 1 #' [1] 2 #' [1] 4 #' [1] 5 #' [1] 7 #' [1] 8 #' [1] 10 Whenever ii is divisible by 3 the condition within the if statement is triggered and the next command causes the current iteration to end and the next one to begin. When next is triggered the print() function is never executed within that iteration. Using loops - examples In the absence of vectorisation The examples above demonstrate how loops function, but don’t represent very efficient real world uses. In R many functions are ‘vectorised’ which means that operations are performed in parallel. Loops offer a solution for when vectorisation isn’t available. Lets explore this with some simple vectors, x, y, and z. x &lt;- 1:5 y &lt;- 6:10 z &lt;- 11 Vectorisation is the reason that x + y gives us 7 9 11 13 15. In essence x + y is actually returning; x[1] + y[1] x[2] + y[2] x[3] + y[3] x[4] + y[4] x[5] + y[5] z + y is a little different, the value of z is recycled and used against each element of y, so we actually get the return of; z[1] + y[1] z[1] + y[2] z[1] + y[3] z[1] + y[4] z[1] + y[5] Vectorisation is also the reason why vectorised functions like sqrt() act on each element of a vector. sqrt(10:15) #' 3.162278 3.316625 3.464102 3.605551 3.741657 3.872983 However, when a function isn’t vectorised we have to proceed a little differently. The digest package provides the function digest() which can be used to generate hash digests of R objects. Given its intended usage it is not vectorised. Lets run digest() over a vector of names. digest::digest(c("Alan", "Harry", "Frances", "Polly", "Walt")) [1] "463e094dab0323c06acf39d4c0a9d62c" digest() has taken the entire vector and returned a hash for it (as intended). If we want to get a hash for each element of the vector then we will have to try something else, like a loop. Using a simple loop we can hash each element of the vector. for(name in c("Alan", "Harry", "Frances", "Polly", "Walt")) { print(digest::digest(name)) } #' [1] "59a25be57d59ee4534e4d3d32baebca7" #' [1] "dd82d09e51606fe5006f38acdb19e9cb" #' [1] "407f522c0d10c7f1692fd14aaa2d951a" #' [1] "7597bee67ba5e2cdc44896451977e786" #' [1] "1caacbe3b8acd3454b3c6a9ae79aa1f6" To perform the same operation on multiple columns We can use loops to perform the same operation multiple times on a different input. Consider the following data frame. df &lt;- data.frame( col_a = 1:5, col_b = 6:10, col_c = 11:15, col_d = 16:20, col_e = 21:25, col_f = 26:30 ) print(df) #' col_a col_b col_c col_d col_e col_f #' 1 1 6 11 16 21 26 #' 2 2 7 12 17 22 27 #' 3 3 8 13 18 23 28 #' 4 4 9 14 19 24 29 #' 5 5 10 15 20 25 30 # a quick way to check the types of a data frame's colums sapply(df, typeof) #' col_a col_b col_c col_d col_e col_f #' "integer" "integer" "integer" "integer" "integer" "integer" If we want to specify the type of col_a, col_c, and col_e as double we could do something like this; df$col_a &lt;- as.double(df$col_a) df$col_c &lt;- as.double(df$col_c) df$col_e &lt;- as.double(df$col_e) Or in the tidyverse; df &lt;- df %&gt;% dplyr::mutate( col_a &lt;- as.double(col_a), col_c &lt;- as.double(col_c), col_e &lt;- as.double(col_e) ) However, with 3 columns to transform the code is already cumbersome, in a larger data set we could easily find the approach becoming difficult to maintain. The tidyverse does offer a solution to reduce the amount of code required here but it involves learning additional functions and adds complexity. Loops provide an alternative approach here that is well suited to the task at hand, compact, and simple to understand. for (col in c("col_a", "col_c", "col_e")) { df[, col] &lt;- as.double(df[, col] ) } sapply(df, typeof) # check types #' col_a col_b col_c col_d col_e col_f #' "double" "integer" "double" "integer" "double" "integer" Next steps Loops provide a powerful and flexible way to perform iteration. Correct usage can help to reduce the amount of code you need to write to achieve a desired outcome. Try the tasks below to put your knowledge into practice. Write a for loop to calculate the mean value of all columns in the built in mtcars dataset. Store the means in a vector named mtcars_means. What is the sum of mtcars_means? Create 2 objects, x and y, and assign the value of 1 to each. Write a while loop that; doubles the value of x in each iteration. adds 1 to the value of y in each iteration. ends when y is equal to 20 What is the value of x when the loop ends? Write a loop to print all the numbers between 1 and 100 (inclusive) which are divisible by 33. Try to include the next keyword. Which numbers printed to the console? Answers 1. 435.6938 2. 524,288 3. 33, 66, and 99]]></summary></entry><entry><title type="html">R Basics - Factors</title><link href="http://0.0.0.0:4000/2022/11/22/r-basics-factors.html" rel="alternate" type="text/html" title="R Basics - Factors" /><published>2022-11-22T00:00:00+00:00</published><updated>2022-11-22T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2022/11/22/r-basics-factors</id><content type="html" xml:base="http://0.0.0.0:4000/2022/11/22/r-basics-factors.html"><![CDATA[<p>In statistics we often talk about categorical variables. These are variables with a typically limited and potentially fixed number of possible values. An observation of a categorical variable is based on a qualitative property.</p>

<p>Some common examples of categorical variables are:</p>

<ul>
  <li>Eye colour (“blue”, “brown”, “green”, etc).</li>
  <li>Rating a service (“good”, “ok”, “bad”).</li>
  <li>Blood group (“A”, “AB”, “O”, etc).</li>
  <li>A numeric value, but where options are limited, for example the result of a dice being rolled (1 to 6).</li>
</ul>

<p>R was primarily designed with statistical applications in mind and the existence of the factor class is a direct result of this. R factors are intended for use with categorical variables.</p>

<h2 id="using-factors-in-r">Using factors in R</h2>

<h3 id="creating-factors">Creating factors</h3>

<p>The primary function we will need to work with factors in R is <strong><code class="language-plaintext highlighter-rouge">factor()</code></strong>.</p>

<p>Let’s say we asked 5 customers to rate their experience of a service and stored their answers in a character vector named <code class="language-plaintext highlighter-rouge">satisfaction</code>. The customers could choose one of 5 values to rate their experience;</p>

<ul>
  <li>very good</li>
  <li>good</li>
  <li>ok</li>
  <li>bad</li>
  <li>very bad</li>
</ul>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">satisfaction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"very_good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ok"</span><span class="p">)</span></code></pre></figure>

<p>We can convert <code class="language-plaintext highlighter-rouge">satisfaction</code> to a factor with the <code class="language-plaintext highlighter-rouge">factor()</code> function. To test whether a vector is a factor we use <code class="language-plaintext highlighter-rouge">is.factor()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">satisfaction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">

</span><span class="n">is.factor</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] TRUE</span></code></pre></figure>

<p>Of course, we don’t need to create the character vector first and then convert to a factor, we can also create it directly.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">satisfaction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"very_good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ok"</span><span class="p">))</span></code></pre></figure>

<p class="info">
<strong><i>Information:</i></strong> If we use <code>typeof()</code> to check the type of our vector, we can see that it is an integer (surprise!).
<br /><br />
<code>
typeof(satisfaction)
#' [1] "integer"
</code>
<br /><br />
Whilst factors may appear to be strings based upon the elements that they contain, they also have a numerical representation, which is why `typeof(satisfaction)` returns `integer`. This is important as it can also lead to errors occurring if you haven't realised that factors are being used. This was a common cause of frustration for R users which was addressed by the R Core team and as of R version 4.0.0 many functions which used to set strings as factors by default ceased to do so, including the `data.frame()` function.
<br /><br />
Those using a version of R prior to the 4.0.0 release should take care to pass the `stringsAsFactors = FALSE` argument inside relevant functions if factors are not desired. Alternatively, the behaviour can be turned off globally during a session by running `options(stringsAsFactors = FALSE)`.
</p>

<h3 id="levels">Levels</h3>

<p>If we use the <code class="language-plaintext highlighter-rouge">print()</code> function, both the elements of our vector and the levels that have been automatically detected are printed to the console. We can also use the <code class="language-plaintext highlighter-rouge">levels()</code> function to return the levels specifically. Levels are the unique elements that the factor contains, or might contain.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] good      bad       very_good ok        ok    </span><span class="w">
</span><span class="cd">#'</span><span class="w">
</span><span class="cd">#' Levels: bad good ok very_good</span><span class="w">

</span><span class="n">levels</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">

</span><span class="cd">#' [1] "bad"       "good"      "ok"        "very_good"</span></code></pre></figure>

<p>For simpler categorical variables the levels which have been detected by default may be sufficient. However, as we haven’t specified an order for our factor, if we try to sort it the result won’t be very meaningful.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sort</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] bad       good      ok        ok        very_good</span><span class="w">
</span><span class="cd">#' Levels: bad good ok very_good</span></code></pre></figure>

<p>R is not able to identify an order for our variable automatically, so <code class="language-plaintext highlighter-rouge">sort()</code> has simply returned the elements of satisfaction on alphabetical order and functions like <code class="language-plaintext highlighter-rouge">min()</code> and <code class="language-plaintext highlighter-rouge">max()</code> will return errors if we try them.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">min</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' Error in Summary.factor(c(2L, 1L, 4L, 3L, 3L), na.rm = FALSE) : </span><span class="w">
</span><span class="cd">#'   ‘min’ not meaningful for factors</span><span class="w">

</span><span class="nf">max</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' Error in Summary.factor(c(2L, 1L, 4L, 3L, 3L), na.rm = FALSE) : </span><span class="w">
</span><span class="cd">#'   ‘max’ not meaningful for factors</span></code></pre></figure>

<p>This behaviour is likely preferable when dealing with a categorical variable with no implied order, for example hair colour, but for our customer satisfaction ratings we want our ratings to be ordered from worse to best. Lets specify an order of;</p>

<p><code class="language-plaintext highlighter-rouge">very_bad &lt; bad &lt; ok &lt; good &lt; very_good</code></p>

<p>We can use the <code class="language-plaintext highlighter-rouge">factor()</code> function and specify our preferred order by passing a vector to the <code class="language-plaintext highlighter-rouge">levels</code> argument and setting the <code class="language-plaintext highlighter-rouge">ordered</code> argument to <code class="language-plaintext highlighter-rouge">TRUE</code>. You will notice that we are able to specify <code class="language-plaintext highlighter-rouge">levels</code> that don’t actually exist in our data, ‘very_bad’ for example. None of our 5 respondents actually rated the service as being ‘very bad’, but it was a valid option and therefore can be included as a level.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">satisfaction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"very_bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"very_good"</span><span class="p">),</span><span class="w"> </span><span class="n">ordered</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] good      bad       very_good ok        ok       </span><span class="w">
</span><span class="cd">#' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good</span></code></pre></figure>

<p>We can now sort <code class="language-plaintext highlighter-rouge">satisfaction</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sort</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] bad       ok        ok        good      very_good</span><span class="w">
</span><span class="cd">#' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good</span></code></pre></figure>

<p>We can also use functions like <code class="language-plaintext highlighter-rouge">min()</code> and <code class="language-plaintext highlighter-rouge">max()</code> with our vector too.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">min</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] bad</span><span class="w">
</span><span class="cd">#' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good</span><span class="w">

</span><span class="nf">max</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] very_good</span><span class="w">
</span><span class="cd">#' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good</span></code></pre></figure>

<h3 id="reverse-a-factor">Reverse a factor</h3>

<p>The <code class="language-plaintext highlighter-rouge">forcats</code> package contains the function <code class="language-plaintext highlighter-rouge">fct_rev()</code> which deserves an honourable mention here, it allows us to quickly reverse the order of our factor.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">forcats</span><span class="o">::</span><span class="n">fct_rev</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="n">good</span><span class="w">      </span><span class="n">bad</span><span class="w">       </span><span class="n">very_good</span><span class="w"> </span><span class="n">ok</span><span class="w">        </span><span class="n">ok</span><span class="w">       
</span><span class="n">Levels</span><span class="o">:</span><span class="w"> </span><span class="n">very_good</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">good</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">ok</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">bad</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">very_bad</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">fct_reverse</code> can be particularly useful when using factors to order the axes of plots.</p>

<h2 id="conversions">Conversions</h2>

<p>Converting our factor, <code class="language-plaintext highlighter-rouge">satisfaction</code>, to a character vector is straight forward using the <code class="language-plaintext highlighter-rouge">as.character()</code> function. Note that converting a factor removes the levels.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">as.character</span><span class="p">(</span><span class="n">satisfaction</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "good"      "bad"       "very_good" "ok"        "ok"  </span></code></pre></figure>

<p>Sometimes you may have a factor where the elements represent something numeric by nature, but that could still be considered a categorical variable, for example rolls of a dice. Let’s create a factor with 5 observations of dice rolls.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rolls</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">),</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">))</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">rolls</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1 6 2 3 4</span><span class="w">
</span><span class="cd">#' Levels: 1 2 3 4 5 6</span></code></pre></figure>

<p>We can convert <code class="language-plaintext highlighter-rouge">rolls</code> to a numeric vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">as.numeric</span><span class="p">(</span><span class="n">rolls</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1 6 2 3 4</span></code></pre></figure>

<p>However, care must be taken when using <code class="language-plaintext highlighter-rouge">as.numeric()</code> with a factor. In the example above, the result appears correct, but this is only because our levels matched up to our vector elements. Let’s try the same thing, but without specifying the levels explicitly.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rolls</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">))</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">rolls</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1 6 2 3 4</span><span class="w">
</span><span class="cd">#' Levels: 1 2 3 4 6</span><span class="w">

</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">rolls</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1 5 2 3 4</span></code></pre></figure>

<p>Rather than returning the elements of <code class="language-plaintext highlighter-rouge">rolls</code>, converted to numeric type, we have instead received the index position of each element’s level. This is a simple issue to resolve, one can simply convert to a character then numeric <code class="language-plaintext highlighter-rouge">as.numeric(as.character(rolls))</code>, but represents another reason why caution should be taken when working with factors.</p>

<h2 id="next-steps">Next steps</h2>

<p>Factors are a unique and useful structure which are highly effective when working with categorical variables. However, there are some more complicated aspects to their usage. Try converting some simple vectors to factors and ordering them, before transforming to another type.</p>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[In statistics we often talk about categorical variables. These are variables with a typically limited and potentially fixed number of possible values. An observation of a categorical variable is based on a qualitative property. Some common examples of categorical variables are: Eye colour (“blue”, “brown”, “green”, etc). Rating a service (“good”, “ok”, “bad”). Blood group (“A”, “AB”, “O”, etc). A numeric value, but where options are limited, for example the result of a dice being rolled (1 to 6). R was primarily designed with statistical applications in mind and the existence of the factor class is a direct result of this. R factors are intended for use with categorical variables. Using factors in R Creating factors The primary function we will need to work with factors in R is factor(). Let’s say we asked 5 customers to rate their experience of a service and stored their answers in a character vector named satisfaction. The customers could choose one of 5 values to rate their experience; very good good ok bad very bad satisfaction &lt;- c("good", "bad", "very_good", "ok", "ok") We can convert satisfaction to a factor with the factor() function. To test whether a vector is a factor we use is.factor(). satisfaction &lt;- factor(satisfaction) is.factor(satisfaction) #' [1] TRUE Of course, we don’t need to create the character vector first and then convert to a factor, we can also create it directly. satisfaction &lt;- factor(c("good", "bad", "very_good", "ok", "ok")) Information: If we use typeof() to check the type of our vector, we can see that it is an integer (surprise!). typeof(satisfaction) #' [1] "integer" Whilst factors may appear to be strings based upon the elements that they contain, they also have a numerical representation, which is why `typeof(satisfaction)` returns `integer`. This is important as it can also lead to errors occurring if you haven't realised that factors are being used. This was a common cause of frustration for R users which was addressed by the R Core team and as of R version 4.0.0 many functions which used to set strings as factors by default ceased to do so, including the `data.frame()` function. Those using a version of R prior to the 4.0.0 release should take care to pass the `stringsAsFactors = FALSE` argument inside relevant functions if factors are not desired. Alternatively, the behaviour can be turned off globally during a session by running `options(stringsAsFactors = FALSE)`. Levels If we use the print() function, both the elements of our vector and the levels that have been automatically detected are printed to the console. We can also use the levels() function to return the levels specifically. Levels are the unique elements that the factor contains, or might contain. print(satisfaction) #' [1] good bad very_good ok ok #' #' Levels: bad good ok very_good levels(satisfaction) #' [1] "bad" "good" "ok" "very_good" For simpler categorical variables the levels which have been detected by default may be sufficient. However, as we haven’t specified an order for our factor, if we try to sort it the result won’t be very meaningful. sort(satisfaction) #' [1] bad good ok ok very_good #' Levels: bad good ok very_good R is not able to identify an order for our variable automatically, so sort() has simply returned the elements of satisfaction on alphabetical order and functions like min() and max() will return errors if we try them. min(satisfaction) #' Error in Summary.factor(c(2L, 1L, 4L, 3L, 3L), na.rm = FALSE) : #' ‘min’ not meaningful for factors max(satisfaction) #' Error in Summary.factor(c(2L, 1L, 4L, 3L, 3L), na.rm = FALSE) : #' ‘max’ not meaningful for factors This behaviour is likely preferable when dealing with a categorical variable with no implied order, for example hair colour, but for our customer satisfaction ratings we want our ratings to be ordered from worse to best. Lets specify an order of; very_bad &lt; bad &lt; ok &lt; good &lt; very_good We can use the factor() function and specify our preferred order by passing a vector to the levels argument and setting the ordered argument to TRUE. You will notice that we are able to specify levels that don’t actually exist in our data, ‘very_bad’ for example. None of our 5 respondents actually rated the service as being ‘very bad’, but it was a valid option and therefore can be included as a level. satisfaction &lt;- factor(satisfaction, levels = c("very_bad", "bad", "ok", "good", "very_good"), ordered = TRUE) print(satisfaction) #' [1] good bad very_good ok ok #' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good We can now sort satisfaction. sort(satisfaction) #' [1] bad ok ok good very_good #' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good We can also use functions like min() and max() with our vector too. min(satisfaction) #' [1] bad #' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good max(satisfaction) #' [1] very_good #' Levels: very_bad &lt; bad &lt; ok &lt; good &lt; very_good Reverse a factor The forcats package contains the function fct_rev() which deserves an honourable mention here, it allows us to quickly reverse the order of our factor. forcats::fct_rev(satisfaction) [1] good bad very_good ok ok Levels: very_good &lt; good &lt; ok &lt; bad &lt; very_bad fct_reverse can be particularly useful when using factors to order the axes of plots. Conversions Converting our factor, satisfaction, to a character vector is straight forward using the as.character() function. Note that converting a factor removes the levels. as.character(satisfaction) #' [1] "good" "bad" "very_good" "ok" "ok" Sometimes you may have a factor where the elements represent something numeric by nature, but that could still be considered a categorical variable, for example rolls of a dice. Let’s create a factor with 5 observations of dice rolls. rolls &lt;- factor(c(1,6,2,3,4), levels = c(1,2,3,4,5,6)) print(rolls) #' [1] 1 6 2 3 4 #' Levels: 1 2 3 4 5 6 We can convert rolls to a numeric vector. as.numeric(rolls) #' [1] 1 6 2 3 4 However, care must be taken when using as.numeric() with a factor. In the example above, the result appears correct, but this is only because our levels matched up to our vector elements. Let’s try the same thing, but without specifying the levels explicitly. rolls &lt;- factor(c(1,6,2,3,4)) print(rolls) #' [1] 1 6 2 3 4 #' Levels: 1 2 3 4 6 as.numeric(rolls) #' [1] 1 5 2 3 4 Rather than returning the elements of rolls, converted to numeric type, we have instead received the index position of each element’s level. This is a simple issue to resolve, one can simply convert to a character then numeric as.numeric(as.character(rolls)), but represents another reason why caution should be taken when working with factors. Next steps Factors are a unique and useful structure which are highly effective when working with categorical variables. However, there are some more complicated aspects to their usage. Try converting some simple vectors to factors and ordering them, before transforming to another type.]]></summary></entry><entry><title type="html">R Basics - Grouping</title><link href="http://0.0.0.0:4000/2022/11/17/r-basics-grouping.html" rel="alternate" type="text/html" title="R Basics - Grouping" /><published>2022-11-17T00:00:00+00:00</published><updated>2022-11-17T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2022/11/17/r-basics-grouping</id><content type="html" xml:base="http://0.0.0.0:4000/2022/11/17/r-basics-grouping.html"><![CDATA[<p>Data often contains information pertaining to a multitude of groups. Producing summary or aggregated statistics for these groups is a common task. Being able to efficiently perform grouping operations is a powerful tool.</p>

<p>There are many ways to produce summary statistics and aggregations using R, however, the one of most intuitive ways to achieve this is to use the <code class="language-plaintext highlighter-rouge">tidyverse</code> package <code class="language-plaintext highlighter-rouge">dplyr</code>. The <code class="language-plaintext highlighter-rouge">dplyr</code> package offers functions for aggregating and summarising data which are simple to use and that avoid some of the pitfalls found in alternative approaches.</p>

<p>We can use the built in <code class="language-plaintext highlighter-rouge">iris</code> dataset to explore grouping in R. For a quick reminder of the contents of <code class="language-plaintext highlighter-rouge">iris</code>, lets use the <code class="language-plaintext highlighter-rouge">head()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><span class="w">
</span><span class="cd">#' 1          5.1         3.5          1.4         0.2  setosa</span><span class="w">
</span><span class="cd">#' 2          4.9         3.0          1.4         0.2  setosa</span><span class="w">
</span><span class="cd">#' 3          4.7         3.2          1.3         0.2  setosa</span><span class="w">
</span><span class="cd">#' 4          4.6         3.1          1.5         0.2  setosa</span><span class="w">
</span><span class="cd">#' 5          5.0         3.6          1.4         0.2  setosa</span><span class="w">
</span><span class="cd">#' 6          5.4         3.9          1.7         0.4  setosa</span></code></pre></figure>

<p>We can create a copy of <code class="language-plaintext highlighter-rouge">iris</code> to work with named <code class="language-plaintext highlighter-rouge">df</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">iris</span></code></pre></figure>

<h2 id="grouping-data">Grouping data</h2>

<p>Using the <code class="language-plaintext highlighter-rouge">dplyr</code> package to generate groups to allow for the production of summary statistics and aggregations involves two functions; <code class="language-plaintext highlighter-rouge">group_by()</code> and <code class="language-plaintext highlighter-rouge">ungroup()</code>.</p>

<p><code class="language-plaintext highlighter-rouge">group_by()</code> is used to create groups, and <code class="language-plaintext highlighter-rouge">ungroup()</code> to remove them.</p>

<h3 id="group_by---single-grouping-column">group_by() - single grouping column</h3>

<p>The <code class="language-plaintext highlighter-rouge">group_by()</code> function accepts various arguments, you can check these out by running <code class="language-plaintext highlighter-rouge">?group_by</code>. In its most basic usage though, we only need to specify our data (<code class="language-plaintext highlighter-rouge">df</code>) and the column or columns that we want the data to be grouped by.</p>

<p>Let’s start by grouping <code class="language-plaintext highlighter-rouge">df</code> using the <code class="language-plaintext highlighter-rouge">Species</code> column.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">group_by</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Species</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#' # A tibble: 150 × 5</span><span class="w">
</span><span class="cd">#' # Groups:   Species [3]</span><span class="w">
</span><span class="cd">#'    Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><span class="w">
</span><span class="cd">#'           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  </span><span class="w">
</span><span class="cd">#'  1          5.1         3.5          1.4         0.2 setosa </span><span class="w">
</span><span class="cd">#'  2          4.9         3            1.4         0.2 setosa </span><span class="w">
</span><span class="cd">#'  3          4.7         3.2          1.3         0.2 setosa </span><span class="w">
</span><span class="cd">#'  4          4.6         3.1          1.5         0.2 setosa </span><span class="w">
</span><span class="cd">#'  5          5           3.6          1.4         0.2 setosa </span><span class="w">
</span><span class="cd">#'  6          5.4         3.9          1.7         0.4 setosa </span><span class="w">
</span><span class="cd">#'  7          4.6         3.4          1.4         0.3 setosa </span><span class="w">
</span><span class="cd">#'  8          5           3.4          1.5         0.2 setosa </span><span class="w">
</span><span class="cd">#'  9          4.4         2.9          1.4         0.2 setosa </span><span class="w">
</span><span class="cd">#' 10          4.9         3.1          1.5         0.1 setosa </span><span class="w">
</span><span class="cd">#' # … with 140 more rows</span><span class="w">
</span><span class="cd">#' # ℹ Use `print(n = ...)` to see more rows</span></code></pre></figure>

<p>Note that whilst using <code class="language-plaintext highlighter-rouge">group_by()</code> has converted our data into a tibble (a <code class="language-plaintext highlighter-rouge">tidyverse</code> implementation of the <code class="language-plaintext highlighter-rouge">data.frame</code>), no changes have been made to the data itself. The output of <code class="language-plaintext highlighter-rouge">print(df)</code> does show that we have 3 groups based on <code class="language-plaintext highlighter-rouge">Species</code>; <code class="language-plaintext highlighter-rouge"># Groups:   Species [3]</code>.</p>

<p>To see the effects of <code class="language-plaintext highlighter-rouge">group_by()</code> we can check the attributes of our data.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">attributes</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#' $class</span><span class="w">
</span><span class="cd">#' [1] "grouped_df" "tbl_df"     "tbl"        "data.frame"</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $row.names</span><span class="w">
</span><span class="cd">#'   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18</span><span class="w">
</span><span class="cd">#'  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36</span><span class="w">
</span><span class="cd">#'  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54</span><span class="w">
</span><span class="cd">#'  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72</span><span class="w">
</span><span class="cd">#'  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90</span><span class="w">
</span><span class="cd">#'  [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108</span><span class="w">
</span><span class="cd">#' [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126</span><span class="w">
</span><span class="cd">#' [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144</span><span class="w">
</span><span class="cd">#' [145] 145 146 147 148 149 150</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $names</span><span class="w">
</span><span class="cd">#' [1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"  "Species"     </span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $groups</span><span class="w">
</span><span class="cd">#' # A tibble: 3 × 2</span><span class="w">
</span><span class="cd">#'   Species          .rows</span><span class="w">
</span><span class="cd">#'   &lt;fct&gt;      &lt;list&lt;int&gt;&gt;</span><span class="w">
</span><span class="cd">#' 1 setosa            [50]</span><span class="w">
</span><span class="cd">#' 2 versicolor        [50]</span><span class="w">
</span><span class="cd">#' 3 virginica         [50]</span></code></pre></figure>

<p>You can see that the <code class="language-plaintext highlighter-rouge">$groups</code> attribute has been added to record our groupings and an additional element has been added to the <code class="language-plaintext highlighter-rouge">$class</code> attribute, <code class="language-plaintext highlighter-rouge">grouped_df</code>.</p>

<p class="warning"><strong><em>CAUTION:</em></strong> Whilst our data remains grouped we need to take care when using functions that behave differently when passed a <code class="language-plaintext highlighter-rouge">grouped_df</code>. Typically this will be functions from <code class="language-plaintext highlighter-rouge">tidyverse</code> packages, though there is nothing to prevent authors of other packages utilising the <code class="language-plaintext highlighter-rouge">grouped_df</code> class. If we don’t want our output to be effected by the groupings then the grouping will need to be removed explicitly using <code class="language-plaintext highlighter-rouge">ungroup()</code>.</p>

<h3 id="summarise">summarise()</h3>

<p><code class="language-plaintext highlighter-rouge">summarise()</code>, from the <code class="language-plaintext highlighter-rouge">dplyr</code> package, creates a new data frame which will contain a row for each combination of grouping variables that exists in the data, or if there are no grouping variables, a single row summarising all of the observations in the input. The resulting data frame contains a column for each grouping variable and additional columns for each of the summary statistics that have been specified.</p>

<p>We can use <code class="language-plaintext highlighter-rouge">summarise()</code> to work out the mean petal length (<code class="language-plaintext highlighter-rouge">Petal.Length</code>) for each <code class="language-plaintext highlighter-rouge">Species</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Mean.Petal.Length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">Petal.Length</span><span class="p">))</span><span class="w">
</span><span class="cd">#' # A tibble: 3 × 2</span><span class="w">
</span><span class="cd">#'   Species    Mean.Petal.Length</span><span class="w">
</span><span class="cd">#'   &lt;fct&gt;                  &lt;dbl&gt;</span><span class="w">
</span><span class="cd">#' 1 setosa                  1.46</span><span class="w">
</span><span class="cd">#' 2 versicolor              4.26</span><span class="w">
</span><span class="cd">#' 3 virginica               5.55</span></code></pre></figure>

<p>We are not limited to adding one summary statistic at a time, if we want the mean and median values for <code class="language-plaintext highlighter-rouge">Petal.Length</code>, we can add both in the same function call.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="w">
    </span><span class="n">df</span><span class="p">,</span><span class="w">
    </span><span class="n">Mean.Petal.Length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">Petal.Length</span><span class="p">),</span><span class="w">
    </span><span class="n">Median.Petal.Length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">median</span><span class="p">(</span><span class="n">Petal.Length</span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">
</span><span class="cd">#' # A tibble: 3 × 3</span><span class="w">
</span><span class="cd">#'   Species    Mean.Petal.Length Median.Petal.Length</span><span class="w">
</span><span class="cd">#'   &lt;fct&gt;                  &lt;dbl&gt;               &lt;dbl&gt;</span><span class="w">
</span><span class="cd">#' 1 setosa                  1.46                1.5 </span><span class="w">
</span><span class="cd">#' 2 versicolor              4.26                4.35</span><span class="w">
</span><span class="cd">#' 3 virginica               5.55                5.55</span></code></pre></figure>

<h3 id="n">n()</h3>

<p>It is often useful to have a count of the number of observations within a group. The <code class="language-plaintext highlighter-rouge">dplyr</code> function <code class="language-plaintext highlighter-rouge">n()</code> allows us to do this.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">observations</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">n</span><span class="p">())</span><span class="w">
</span><span class="cd">#' # A tibble: 3 × 2</span><span class="w">
</span><span class="cd">#'   Species    observations</span><span class="w">
</span><span class="cd">#'   &lt;fct&gt;             &lt;int&gt;</span><span class="w">
</span><span class="cd">#' 1 setosa               50</span><span class="w">
</span><span class="cd">#' 2 versicolor           50</span><span class="w">
</span><span class="cd">#' 3 virginica            50</span></code></pre></figure>

<h3 id="ungroup">ungroup()</h3>

<p>Once we have finished working with the groupings that we created we need to remove them. Not removing the groupings can cause issues further down the line if you forget that they are present. To remove the current groupings we need to use the <code class="language-plaintext highlighter-rouge">dplyr</code> function <code class="language-plaintext highlighter-rouge">ungroup()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">ungroup</span><span class="p">(</span><span class="n">df</span><span class="p">)</span></code></pre></figure>

<p>Using <code class="language-plaintext highlighter-rouge">ungroup()</code> doesn’t appear to change anything in our data, similarly to <code class="language-plaintext highlighter-rouge">group_by()</code>. However, if we review the attributes of <code class="language-plaintext highlighter-rouge">df</code> again, we see that the <code class="language-plaintext highlighter-rouge">$groups</code> attribute has now been removed and <code class="language-plaintext highlighter-rouge">grouped_df</code> is no longer an element of the <code class="language-plaintext highlighter-rouge">$class</code> attribute.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">attributes</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#' $class</span><span class="w">
</span><span class="cd">#' [1] "tbl_df"     "tbl"        "data.frame"</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $row.names</span><span class="w">
</span><span class="cd">#'   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18</span><span class="w">
</span><span class="cd">#'  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36</span><span class="w">
</span><span class="cd">#'  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54</span><span class="w">
</span><span class="cd">#'  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72</span><span class="w">
</span><span class="cd">#'  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90</span><span class="w">
</span><span class="cd">#'  [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108</span><span class="w">
</span><span class="cd">#' [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126</span><span class="w">
</span><span class="cd">#' [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144</span><span class="w">
</span><span class="cd">#' [145] 145 146 147 148 149 150</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $names</span><span class="w">
</span><span class="cd">#' [1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"  "Species"</span></code></pre></figure>

<h3 id="group_by---multiple-grouping-column">group_by() - multiple grouping column</h3>

<p>Grouping can also be applied across multiple columns. Lets add a new column to <code class="language-plaintext highlighter-rouge">df</code> which we use for grouping. The new column, <code class="language-plaintext highlighter-rouge">Big.Petal</code>, will add a logical value based on whether <code class="language-plaintext highlighter-rouge">Petal.Length</code> and <code class="language-plaintext highlighter-rouge">Petal.Width</code> are above average.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">Big.Petal</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">Petal.Length</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Petal.Length</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">Petal.Width</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#' # A tibble: 150 × 6</span><span class="w">
</span><span class="cd">#'    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Big.Petal</span><span class="w">
</span><span class="cd">#'           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;lgl&gt;    </span><span class="w">
</span><span class="cd">#'  1          5.1         3.5          1.4         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  2          4.9         3            1.4         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  3          4.7         3.2          1.3         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  4          4.6         3.1          1.5         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  5          5           3.6          1.4         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  6          5.4         3.9          1.7         0.4 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  7          4.6         3.4          1.4         0.3 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  8          5           3.4          1.5         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#'  9          4.4         2.9          1.4         0.2 setosa  FALSE    </span><span class="w">
</span><span class="cd">#' 10          4.9         3.1          1.5         0.1 setosa  FALSE    </span><span class="w">
</span><span class="cd">#' # … with 140 more rows</span><span class="w">
</span><span class="cd">#' # ℹ Use `print(n = ...)` to see more rows</span></code></pre></figure>

<p>We can now group our data by <code class="language-plaintext highlighter-rouge">Species</code> and <code class="language-plaintext highlighter-rouge">Big.Petal</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">group_by</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Species</span><span class="p">,</span><span class="w"> </span><span class="n">Big.Petal</span><span class="p">)</span></code></pre></figure>

<p>This grouping allows us to calculate a mean <code class="language-plaintext highlighter-rouge">Sepal.Length</code> value by both <code class="language-plaintext highlighter-rouge">Species</code> and <code class="language-plaintext highlighter-rouge">Big.Petal</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Mean.Sepal.Length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">Sepal.Length</span><span class="p">))</span><span class="w">
</span><span class="cd">#' # A tibble: 4 × 3</span><span class="w">
</span><span class="cd">#' # Groups:   Species [3]</span><span class="w">
</span><span class="cd">#'   Species    Big.Petal Mean.Sepal.Length</span><span class="w">
</span><span class="cd">#'   &lt;fct&gt;      &lt;lgl&gt;                 &lt;dbl&gt;</span><span class="w">
</span><span class="cd">#' 1 setosa     FALSE                  5.01</span><span class="w">
</span><span class="cd">#' 2 versicolor FALSE                  5.43</span><span class="w">
</span><span class="cd">#' 3 versicolor TRUE                   6.08</span><span class="w">
</span><span class="cd">#' 4 virginica  TRUE                   6.59</span></code></pre></figure>

<h3 id="group_by---keep-all-columns">group_by - keep all columns</h3>

<p><code class="language-plaintext highlighter-rouge">summarise()</code> works well, but it reduces the number of rows down to one row per distinct combination of the grouping variables, and drops columns that aren’t grouping variables. This may not always be our desired behaviour. If we want to add the mean <code class="language-plaintext highlighter-rouge">Sepal.Length</code> value by <code class="language-plaintext highlighter-rouge">Species</code> and <code class="language-plaintext highlighter-rouge">Big.Petal</code> to our data ‘as is’, we need to use another <code class="language-plaintext highlighter-rouge">dplyr</code> function; <code class="language-plaintext highlighter-rouge">mutate()</code>. <code class="language-plaintext highlighter-rouge">mutate()</code> is used to add new columns.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">Mean.Sepal.Length</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">Sepal.Length</span><span class="p">))</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#' # A tibble: 150 × 7</span><span class="w">
</span><span class="cd">#' # Groups:   Species, Big.Petal [4]</span><span class="w">
</span><span class="cd">#'    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Big.Petal Mean.Se…¹</span><span class="w">
</span><span class="cd">#'           &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;lgl&gt;         &lt;dbl&gt;</span><span class="w">
</span><span class="cd">#'  1          5.1         3.5          1.4         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  2          4.9         3            1.4         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  3          4.7         3.2          1.3         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  4          4.6         3.1          1.5         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  5          5           3.6          1.4         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  6          5.4         3.9          1.7         0.4 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  7          4.6         3.4          1.4         0.3 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  8          5           3.4          1.5         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#'  9          4.4         2.9          1.4         0.2 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#' 10          4.9         3.1          1.5         0.1 setosa  FALSE          5.01</span><span class="w">
</span><span class="cd">#' # … with 140 more rows, and abbreviated variable name ¹​Mean.Sepal.Length</span><span class="w">
</span><span class="cd">#' # ℹ Use `print(n = ...)` to see more rows</span></code></pre></figure>

<h2 id="next-steps">Next steps</h2>

<p>Grouping is a powerful and effective way to add summary statistics to your data and the <code class="language-plaintext highlighter-rouge">dplyr</code> package offers easy to use functions to achieve this.</p>

<p>Try some of the tasks below to put the theory into practice.</p>

<p>Create a <code class="language-plaintext highlighter-rouge">data.frame</code> named <code class="language-plaintext highlighter-rouge">df</code> using the below code.</p>

<details>
  <summary>Reveal data generation code</summary>


<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">structure</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">Date</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210201L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> </span><span class="m">20210202L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210203L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210204L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> </span><span class="m">20210205L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210206L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">,</span><span class="w"> </span><span class="m">20210207L</span><span class="p">),</span><span class="w"> </span><span class="n">Sex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Female"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Male"</span><span class="p">),</span><span class="w"> </span><span class="n">AgeGroup</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> </span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> </span><span class="s2">"85plus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 14"</span><span class="p">,</span><span class="w"> </span><span class="s2">"0 to 59"</span><span class="p">,</span><span class="w"> </span><span class="s2">"15 to 19"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"20 to 24"</span><span class="p">,</span><span class="w"> </span><span class="s2">"25 to 44"</span><span class="p">,</span><span class="w"> </span><span class="s2">"45 to 64"</span><span class="p">,</span><span class="w"> </span><span class="s2">"60+"</span><span class="p">,</span><span class="w"> </span><span class="s2">"65 to 74"</span><span class="p">,</span><span class="w"> </span><span class="s2">"75 to 84"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"85plus"</span><span class="p">),</span><span class="w"> </span><span class="n">FirstInfections</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">454L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">44L</span><span class="p">,</span><span class="w"> </span><span class="m">203L</span><span class="p">,</span><span class="w"> </span><span class="m">176L</span><span class="p">,</span><span class="w"> 
</span><span class="m">132L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">36L</span><span class="p">,</span><span class="w"> </span><span class="m">395L</span><span class="p">,</span><span class="w"> </span><span class="m">19L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> </span><span class="m">162L</span><span class="p">,</span><span class="w"> </span><span class="m">166L</span><span class="p">,</span><span class="w"> </span><span class="m">114L</span><span class="p">,</span><span class="w"> </span><span class="m">41L</span><span class="p">,</span><span class="w"> 
</span><span class="m">22L</span><span class="p">,</span><span class="w"> </span><span class="m">17L</span><span class="p">,</span><span class="w"> </span><span class="m">41L</span><span class="p">,</span><span class="w"> </span><span class="m">449L</span><span class="p">,</span><span class="w"> </span><span class="m">26L</span><span class="p">,</span><span class="w"> </span><span class="m">50L</span><span class="p">,</span><span class="w"> </span><span class="m">192L</span><span class="p">,</span><span class="w"> </span><span class="m">162L</span><span class="p">,</span><span class="w"> </span><span class="m">121L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">34L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> 
</span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">407L</span><span class="p">,</span><span class="w"> </span><span class="m">22L</span><span class="p">,</span><span class="w"> </span><span class="m">48L</span><span class="p">,</span><span class="w"> </span><span class="m">183L</span><span class="p">,</span><span class="w"> </span><span class="m">148L</span><span class="p">,</span><span class="w"> </span><span class="m">72L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">31L</span><span class="p">,</span><span class="w"> </span><span class="m">375L</span><span class="p">,</span><span class="w"> 
</span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">153L</span><span class="p">,</span><span class="w"> </span><span class="m">150L</span><span class="p">,</span><span class="w"> </span><span class="m">91L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> </span><span class="m">13L</span><span class="p">,</span><span class="w"> </span><span class="m">29L</span><span class="p">,</span><span class="w"> </span><span class="m">369L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">39L</span><span class="p">,</span><span class="w"> 
</span><span class="m">154L</span><span class="p">,</span><span class="w"> </span><span class="m">143L</span><span class="p">,</span><span class="w"> </span><span class="m">95L</span><span class="p">,</span><span class="w"> </span><span class="m">35L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">12L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">362L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">38L</span><span class="p">,</span><span class="w"> </span><span class="m">160L</span><span class="p">,</span><span class="w"> </span><span class="m">146L</span><span class="p">,</span><span class="w"> 
</span><span class="m">93L</span><span class="p">,</span><span class="w"> </span><span class="m">22L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">17L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">356L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">150L</span><span class="p">,</span><span class="w"> </span><span class="m">149L</span><span class="p">,</span><span class="w"> </span><span class="m">87L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> 
</span><span class="m">19L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">360L</span><span class="p">,</span><span class="w"> </span><span class="m">31L</span><span class="p">,</span><span class="w"> </span><span class="m">51L</span><span class="p">,</span><span class="w"> </span><span class="m">141L</span><span class="p">,</span><span class="w"> </span><span class="m">127L</span><span class="p">,</span><span class="w"> </span><span class="m">119L</span><span class="p">,</span><span class="w"> </span><span class="m">39L</span><span class="p">,</span><span class="w"> </span><span class="m">22L</span><span class="p">,</span><span class="w"> </span><span class="m">35L</span><span class="p">,</span><span class="w"> 
</span><span class="m">34L</span><span class="p">,</span><span class="w"> </span><span class="m">349L</span><span class="p">,</span><span class="w"> </span><span class="m">21L</span><span class="p">,</span><span class="w"> </span><span class="m">32L</span><span class="p">,</span><span class="w"> </span><span class="m">160L</span><span class="p">,</span><span class="w"> </span><span class="m">132L</span><span class="p">,</span><span class="w"> </span><span class="m">107L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">35L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">323L</span><span class="p">,</span><span class="w"> 
</span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">34L</span><span class="p">,</span><span class="w"> </span><span class="m">140L</span><span class="p">,</span><span class="w"> </span><span class="m">113L</span><span class="p">,</span><span class="w"> </span><span class="m">74L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">12L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">267L</span><span class="p">,</span><span class="w"> </span><span class="m">16L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> 
</span><span class="m">104L</span><span class="p">,</span><span class="w"> </span><span class="m">105L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">23L</span><span class="p">,</span><span class="w"> </span><span class="m">280L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> </span><span class="m">29L</span><span class="p">,</span><span class="w"> </span><span class="m">127L</span><span class="p">,</span><span class="w"> </span><span class="m">112L</span><span class="p">,</span><span class="w"> 
</span><span class="m">71L</span><span class="p">,</span><span class="w"> </span><span class="m">17L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">31L</span><span class="p">,</span><span class="w"> </span><span class="m">246L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">106L</span><span class="p">,</span><span class="w"> </span><span class="m">92L</span><span class="p">,</span><span class="w"> </span><span class="m">57L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> 
</span><span class="m">19L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">),</span><span class="w"> </span><span class="n">Reinfections</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> 
</span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> 
</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> 
</span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">,</span><span class="w"> </span><span class="m">0L</span><span class="p">)),</span><span class="w"> </span><span class="n">class</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"data.frame"</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="m">-140L</span><span class="p">))</span></code></pre></figure>


</details>

<p>The data contains details of the daily counts of positive COVID-19 cases for the 1st 7 days of February 2021, broken down by age group and sex. The data is available from the <a href="opendata.nhs.scot">PHS Scotland open data platform</a>.</p>

<ol>
  <li>
    <p>Group the data by sex and calculate the mean and median number of first infections.</p>
  </li>
  <li>
    <p>Group the data by sex and age group and calculate the mean and median of both first infections and reinfections.</p>
  </li>
  <li>
    <p>Group the data by sex and age group and calculate the totals of both first infections and reinfections.</p>
  </li>
</ol>

<details>
  <summary>Answers</summary>

  Your outputs should resemble the examples below; <br />

  1.

  
<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="w">  </span><span class="cd">#'   # A tibble: 2 × 3</span><span class="w">
  </span><span class="cd">#'   Sex    mean_first_inf median_first_inf</span><span class="w">
  </span><span class="cd">#'   &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;</span><span class="w">
  </span><span class="cd">#' 1 Female           94.4               40</span><span class="w">
  </span><span class="cd">#' 2 Male             84.7               35</span><span class="w">

  </span></code></pre></figure>


  2.

  
<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="w">  </span><span class="cd">#' # A tibble: 20 × 6</span><span class="w">
  </span><span class="cd">#' # Groups:   Sex [2]</span><span class="w">
  </span><span class="cd">#'    Sex    AgeGroup mean_first_inf median_first_inf mean_reinf median_reinf</span><span class="w">
  </span><span class="cd">#'    &lt;chr&gt;  &lt;chr&gt;             &lt;dbl&gt;            &lt;int&gt;      &lt;dbl&gt;        &lt;int&gt;</span><span class="w">
  </span><span class="cd">#'  1 Female 0 to 14           32.4                31      0.143            0</span><span class="w">
  </span><span class="cd">#'  2 Female 0 to 59          372.                362      3                2</span><span class="w">
  </span><span class="cd">#'  3 Female 15 to 19          26.3                28      0.143            0</span><span class="w">
  </span><span class="cd">#'  4 Female 20 to 24          41.6                44      0.429            0</span><span class="w">
  </span><span class="cd">#'  5 Female 25 to 44         159.                153      1.14             1</span><span class="w">
  </span><span class="cd">#'  6 Female 45 to 64         141.                146      1.14             1</span><span class="w">
  </span><span class="cd">#'  7 Female 60+              100.                 93      0.571            0</span><span class="w">
  </span><span class="cd">#'  8 Female 65 to 74          30.9                28      0.286            0</span><span class="w">
  </span><span class="cd">#'  9 Female 75 to 84          20.6                20      0                0</span><span class="w">
  </span><span class="cd">#' 10 Female 85plus            20                  17      0.286            0</span><span class="w">
  </span><span class="cd">#' 11 Male   0 to 14           32.9                33      0.286            0</span><span class="w">
  </span><span class="cd">#' 12 Male   0 to 59          341.                356      1                1</span><span class="w">
  </span><span class="cd">#' 13 Male   15 to 19          19.7                19      0                0</span><span class="w">
  </span><span class="cd">#' 14 Male   20 to 24          34.7                32      0                0</span><span class="w">
  </span><span class="cd">#' 15 Male   25 to 44         146.                154      0.429            0</span><span class="w">
  </span><span class="cd">#' 16 Male   45 to 64         134.                143      0.286            0</span><span class="w">
  </span><span class="cd">#' 17 Male   60+               82                  87      0.143            0</span><span class="w">
  </span><span class="cd">#' 18 Male   65 to 74          27.4                30      0.143            0</span><span class="w">
  </span><span class="cd">#' 19 Male   75 to 84          21                  20      0                0</span><span class="w">
  </span><span class="cd">#' 20 Male   85plus             8.43                9      0                0</span><span class="w">

  </span></code></pre></figure>


  3.

  
<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="w">  </span><span class="cd">#' # A tibble: 20 × 4</span><span class="w">
  </span><span class="cd">#' # Groups:   Sex [2]</span><span class="w">
  </span><span class="cd">#'    Sex    AgeGroup total_first_inf total_reinf</span><span class="w">
  </span><span class="cd">#'    &lt;chr&gt;  &lt;chr&gt;              &lt;int&gt;       &lt;int&gt;</span><span class="w">
  </span><span class="cd">#'  1 Female 0 to 14              227           1</span><span class="w">
  </span><span class="cd">#'  2 Female 0 to 59             2603          21</span><span class="w">
  </span><span class="cd">#'  3 Female 15 to 19             184           1</span><span class="w">
  </span><span class="cd">#'  4 Female 20 to 24             291           3</span><span class="w">
  </span><span class="cd">#'  5 Female 25 to 44            1116           8</span><span class="w">
  </span><span class="cd">#'  6 Female 45 to 64             986           8</span><span class="w">
  </span><span class="cd">#'  7 Female 60+                  701           4</span><span class="w">
  </span><span class="cd">#'  8 Female 65 to 74             216           2</span><span class="w">
  </span><span class="cd">#'  9 Female 75 to 84             144           0</span><span class="w">
  </span><span class="cd">#' 10 Female 85plus               140           2</span><span class="w">
  </span><span class="cd">#' 11 Male   0 to 14              230           2</span><span class="w">
  </span><span class="cd">#' 12 Male   0 to 59             2389           7</span><span class="w">
  </span><span class="cd">#' 13 Male   15 to 19             138           0</span><span class="w">
  </span><span class="cd">#' 14 Male   20 to 24             243           0</span><span class="w">
  </span><span class="cd">#' 15 Male   25 to 44            1019           3</span><span class="w">
  </span><span class="cd">#' 16 Male   45 to 64             935           2</span><span class="w">
  </span><span class="cd">#' 17 Male   60+                  574           1</span><span class="w">
  </span><span class="cd">#' 18 Male   65 to 74             192           1</span><span class="w">
  </span><span class="cd">#' 19 Male   75 to 84             147           0</span><span class="w">
  </span><span class="cd">#' 20 Male   85plus                59           0</span><span class="w">

  </span></code></pre></figure>


</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[Data often contains information pertaining to a multitude of groups. Producing summary or aggregated statistics for these groups is a common task. Being able to efficiently perform grouping operations is a powerful tool. There are many ways to produce summary statistics and aggregations using R, however, the one of most intuitive ways to achieve this is to use the tidyverse package dplyr. The dplyr package offers functions for aggregating and summarising data which are simple to use and that avoid some of the pitfalls found in alternative approaches. We can use the built in iris dataset to explore grouping in R. For a quick reminder of the contents of iris, lets use the head() function. head(iris) #' Sepal.Length Sepal.Width Petal.Length Petal.Width Species #' 1 5.1 3.5 1.4 0.2 setosa #' 2 4.9 3.0 1.4 0.2 setosa #' 3 4.7 3.2 1.3 0.2 setosa #' 4 4.6 3.1 1.5 0.2 setosa #' 5 5.0 3.6 1.4 0.2 setosa #' 6 5.4 3.9 1.7 0.4 setosa We can create a copy of iris to work with named df. df &lt;- iris Grouping data Using the dplyr package to generate groups to allow for the production of summary statistics and aggregations involves two functions; group_by() and ungroup(). group_by() is used to create groups, and ungroup() to remove them. group_by() - single grouping column The group_by() function accepts various arguments, you can check these out by running ?group_by. In its most basic usage though, we only need to specify our data (df) and the column or columns that we want the data to be grouped by. Let’s start by grouping df using the Species column. df &lt;- dplyr::group_by(df, Species) print(df) #' # A tibble: 150 × 5 #' # Groups: Species [3] #' Sepal.Length Sepal.Width Petal.Length Petal.Width Species #' &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; #' 1 5.1 3.5 1.4 0.2 setosa #' 2 4.9 3 1.4 0.2 setosa #' 3 4.7 3.2 1.3 0.2 setosa #' 4 4.6 3.1 1.5 0.2 setosa #' 5 5 3.6 1.4 0.2 setosa #' 6 5.4 3.9 1.7 0.4 setosa #' 7 4.6 3.4 1.4 0.3 setosa #' 8 5 3.4 1.5 0.2 setosa #' 9 4.4 2.9 1.4 0.2 setosa #' 10 4.9 3.1 1.5 0.1 setosa #' # … with 140 more rows #' # ℹ Use `print(n = ...)` to see more rows Note that whilst using group_by() has converted our data into a tibble (a tidyverse implementation of the data.frame), no changes have been made to the data itself. The output of print(df) does show that we have 3 groups based on Species; # Groups: Species [3]. To see the effects of group_by() we can check the attributes of our data. attributes(df) #' $class #' [1] "grouped_df" "tbl_df" "tbl" "data.frame" #' #' $row.names #' [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #' [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #' [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #' [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #' [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #' [91] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #' [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #' [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #' [145] 145 146 147 148 149 150 #' #' $names #' [1] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width" "Species" #' #' $groups #' # A tibble: 3 × 2 #' Species .rows #' &lt;fct&gt; &lt;list&lt;int&gt;&gt; #' 1 setosa [50] #' 2 versicolor [50] #' 3 virginica [50] You can see that the $groups attribute has been added to record our groupings and an additional element has been added to the $class attribute, grouped_df. CAUTION: Whilst our data remains grouped we need to take care when using functions that behave differently when passed a grouped_df. Typically this will be functions from tidyverse packages, though there is nothing to prevent authors of other packages utilising the grouped_df class. If we don’t want our output to be effected by the groupings then the grouping will need to be removed explicitly using ungroup(). summarise() summarise(), from the dplyr package, creates a new data frame which will contain a row for each combination of grouping variables that exists in the data, or if there are no grouping variables, a single row summarising all of the observations in the input. The resulting data frame contains a column for each grouping variable and additional columns for each of the summary statistics that have been specified. We can use summarise() to work out the mean petal length (Petal.Length) for each Species. dplyr::summarise(df, Mean.Petal.Length = mean(Petal.Length)) #' # A tibble: 3 × 2 #' Species Mean.Petal.Length #' &lt;fct&gt; &lt;dbl&gt; #' 1 setosa 1.46 #' 2 versicolor 4.26 #' 3 virginica 5.55 We are not limited to adding one summary statistic at a time, if we want the mean and median values for Petal.Length, we can add both in the same function call. dplyr::summarise( df, Mean.Petal.Length = mean(Petal.Length), Median.Petal.Length = median(Petal.Length) ) #' # A tibble: 3 × 3 #' Species Mean.Petal.Length Median.Petal.Length #' &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; #' 1 setosa 1.46 1.5 #' 2 versicolor 4.26 4.35 #' 3 virginica 5.55 5.55 n() It is often useful to have a count of the number of observations within a group. The dplyr function n() allows us to do this. dplyr::summarise(df, observations = dplyr::n()) #' # A tibble: 3 × 2 #' Species observations #' &lt;fct&gt; &lt;int&gt; #' 1 setosa 50 #' 2 versicolor 50 #' 3 virginica 50 ungroup() Once we have finished working with the groupings that we created we need to remove them. Not removing the groupings can cause issues further down the line if you forget that they are present. To remove the current groupings we need to use the dplyr function ungroup(). df &lt;- dplyr::ungroup(df) Using ungroup() doesn’t appear to change anything in our data, similarly to group_by(). However, if we review the attributes of df again, we see that the $groups attribute has now been removed and grouped_df is no longer an element of the $class attribute. attributes(df) #' $class #' [1] "tbl_df" "tbl" "data.frame" #' #' $row.names #' [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #' [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #' [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #' [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #' [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 #' [91] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #' [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #' [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #' [145] 145 146 147 148 149 150 #' #' $names #' [1] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width" "Species" group_by() - multiple grouping column Grouping can also be applied across multiple columns. Lets add a new column to df which we use for grouping. The new column, Big.Petal, will add a logical value based on whether Petal.Length and Petal.Width are above average. df$Big.Petal &lt;- df$Petal.Length &gt; mean(df$Petal.Length) &amp; df$Petal.Width &gt; mean(df$Petal.Width) print(df) #' # A tibble: 150 × 6 #' Sepal.Length Sepal.Width Petal.Length Petal.Width Species Big.Petal #' &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;lgl&gt; #' 1 5.1 3.5 1.4 0.2 setosa FALSE #' 2 4.9 3 1.4 0.2 setosa FALSE #' 3 4.7 3.2 1.3 0.2 setosa FALSE #' 4 4.6 3.1 1.5 0.2 setosa FALSE #' 5 5 3.6 1.4 0.2 setosa FALSE #' 6 5.4 3.9 1.7 0.4 setosa FALSE #' 7 4.6 3.4 1.4 0.3 setosa FALSE #' 8 5 3.4 1.5 0.2 setosa FALSE #' 9 4.4 2.9 1.4 0.2 setosa FALSE #' 10 4.9 3.1 1.5 0.1 setosa FALSE #' # … with 140 more rows #' # ℹ Use `print(n = ...)` to see more rows We can now group our data by Species and Big.Petal. df &lt;- dplyr::group_by(df, Species, Big.Petal) This grouping allows us to calculate a mean Sepal.Length value by both Species and Big.Petal. dplyr::summarise(df, Mean.Sepal.Length = mean(Sepal.Length)) #' # A tibble: 4 × 3 #' # Groups: Species [3] #' Species Big.Petal Mean.Sepal.Length #' &lt;fct&gt; &lt;lgl&gt; &lt;dbl&gt; #' 1 setosa FALSE 5.01 #' 2 versicolor FALSE 5.43 #' 3 versicolor TRUE 6.08 #' 4 virginica TRUE 6.59 group_by - keep all columns summarise() works well, but it reduces the number of rows down to one row per distinct combination of the grouping variables, and drops columns that aren’t grouping variables. This may not always be our desired behaviour. If we want to add the mean Sepal.Length value by Species and Big.Petal to our data ‘as is’, we need to use another dplyr function; mutate(). mutate() is used to add new columns. df &lt;- dplyr::mutate(df, Mean.Sepal.Length = mean(Sepal.Length)) print(df) #' # A tibble: 150 × 7 #' # Groups: Species, Big.Petal [4] #' Sepal.Length Sepal.Width Petal.Length Petal.Width Species Big.Petal Mean.Se…¹ #' &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;lgl&gt; &lt;dbl&gt; #' 1 5.1 3.5 1.4 0.2 setosa FALSE 5.01 #' 2 4.9 3 1.4 0.2 setosa FALSE 5.01 #' 3 4.7 3.2 1.3 0.2 setosa FALSE 5.01 #' 4 4.6 3.1 1.5 0.2 setosa FALSE 5.01 #' 5 5 3.6 1.4 0.2 setosa FALSE 5.01 #' 6 5.4 3.9 1.7 0.4 setosa FALSE 5.01 #' 7 4.6 3.4 1.4 0.3 setosa FALSE 5.01 #' 8 5 3.4 1.5 0.2 setosa FALSE 5.01 #' 9 4.4 2.9 1.4 0.2 setosa FALSE 5.01 #' 10 4.9 3.1 1.5 0.1 setosa FALSE 5.01 #' # … with 140 more rows, and abbreviated variable name ¹​Mean.Sepal.Length #' # ℹ Use `print(n = ...)` to see more rows Next steps Grouping is a powerful and effective way to add summary statistics to your data and the dplyr package offers easy to use functions to achieve this. Try some of the tasks below to put the theory into practice. Create a data.frame named df using the below code. Reveal data generation code df &lt;- structure(list(Date = cex = c("Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Female", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male"), AgeGroup = c("0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus", "0 to 14", "0 to 59", "15 to 19", "20 to 24", "25 to 44", "45 to 64", "60+", "65 to 74", "75 to 84", "85plus"), FirstInfections = c(45L, 454L, 28L, 44L, 203L, 176L, 132L, 37L, 25L, 28L, 36L, 395L, 19L, 46L, 162L, 166L, 114L, 41L, 22L, 17L, 41L, 449L, 26L, 50L, 192L, 162L, 121L, 45L, 34L, 20L, 33L, 407L, 22L, 48L, 183L, 148L, 72L, 20L, 20L, 5L, 31L, 375L, 28L, 45L, 153L, 150L, 91L, 28L, 18L, 13L, 29L, 369L, 27L, 39L, 154L, 143L, 95L, 35L, 25L, 12L, 27L, 362L, 25L, 38L, 160L, 146L, 93L, 22L, 20L, 17L, 37L, 356L, 18L, 30L, 150L, 149L, 87L, 30L, 19L, 10L, 33L, 360L, 31L, 51L, 141L, 127L, 119L, 39L, 22L, 35L, 34L, 349L, 21L, 32L, 160L, 132L, 107L, 33L, 35L, 9L, 27L, 323L, 28L, 34L, 140L, 113L, 74L, 28L, 15L, 12L, 30L, 267L, 16L, 28L, 104L, 105L, 42L, 15L, 7L, 4L, 23L, 280L, 18L, 29L, 127L, 112L, 71L, 17L, 10L, 15L, 31L, 246L, 15L, 20L, 106L, 92L, 57L, 18L, 19L, 2L), Reinfections = c(0L, 5L, 0L, 1L, 3L, 1L, 2L, 1L, 0L, 1L, 1L, 2L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 7L, 1L, 1L, 1L, 3L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 2L, 0L, 0L, 2L, 0L, 0L, 0L, 0L, 0L, 1L, 2L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L)), class = "data.frame", row.names = c(NA, -140L)) The data contains details of the daily counts of positive COVID-19 cases for the 1st 7 days of February 2021, broken down by age group and sex. The data is available from the PHS Scotland open data platform. Group the data by sex and calculate the mean and median number of first infections. Group the data by sex and age group and calculate the mean and median of both first infections and reinfections. Group the data by sex and age group and calculate the totals of both first infections and reinfections. Answers Your outputs should resemble the examples below; 1. #' # A tibble: 2 × 3 #' Sex mean_first_inf median_first_inf #' &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #' 1 Female 94.4 40 #' 2 Male 84.7 35 2. #' # A tibble: 20 × 6 #' # Groups: Sex [2] #' Sex AgeGroup mean_first_inf median_first_inf mean_reinf median_reinf #' &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #' 1 Female 0 to 14 32.4 31 0.143 0 #' 2 Female 0 to 59 372. 362 3 2 #' 3 Female 15 to 19 26.3 28 0.143 0 #' 4 Female 20 to 24 41.6 44 0.429 0 #' 5 Female 25 to 44 159. 153 1.14 1 #' 6 Female 45 to 64 141. 146 1.14 1 #' 7 Female 60+ 100. 93 0.571 0 #' 8 Female 65 to 74 30.9 28 0.286 0 #' 9 Female 75 to 84 20.6 20 0 0 #' 10 Female 85plus 20 17 0.286 0 #' 11 Male 0 to 14 32.9 33 0.286 0 #' 12 Male 0 to 59 341. 356 1 1 #' 13 Male 15 to 19 19.7 19 0 0 #' 14 Male 20 to 24 34.7 32 0 0 #' 15 Male 25 to 44 146. 154 0.429 0 #' 16 Male 45 to 64 134. 143 0.286 0 #' 17 Male 60+ 82 87 0.143 0 #' 18 Male 65 to 74 27.4 30 0.143 0 #' 19 Male 75 to 84 21 20 0 0 #' 20 Male 85plus 8.43 9 0 0 3. #' # A tibble: 20 × 4 #' # Groups: Sex [2] #' Sex AgeGroup total_first_inf total_reinf #' &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #' 1 Female 0 to 14 227 1 #' 2 Female 0 to 59 2603 21 #' 3 Female 15 to 19 184 1 #' 4 Female 20 to 24 291 3 #' 5 Female 25 to 44 1116 8 #' 6 Female 45 to 64 986 8 #' 7 Female 60+ 701 4 #' 8 Female 65 to 74 216 2 #' 9 Female 75 to 84 144 0 #' 10 Female 85plus 140 2 #' 11 Male 0 to 14 230 2 #' 12 Male 0 to 59 2389 7 #' 13 Male 15 to 19 138 0 #' 14 Male 20 to 24 243 0 #' 15 Male 25 to 44 1019 3 #' 16 Male 45 to 64 935 2 #' 17 Male 60+ 574 1 #' 18 Male 65 to 74 192 1 #' 19 Male 75 to 84 147 0 #' 20 Male 85plus 59 0]]></summary></entry><entry><title type="html">R Basics - Data Transformation</title><link href="http://0.0.0.0:4000/2022/11/10/r-basics-data-transformation.html" rel="alternate" type="text/html" title="R Basics - Data Transformation" /><published>2022-11-10T00:00:00+00:00</published><updated>2022-11-10T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2022/11/10/r-basics-data-transformation</id><content type="html" xml:base="http://0.0.0.0:4000/2022/11/10/r-basics-data-transformation.html"><![CDATA[<p>When working with data we often find a need to transform it in various ways. This might be for reasons of presentation, to make data compatible with a function that requires the input to be in a specific format, or to make it easier to work with. R provides plenty of options for data transformation and the rich package system means that there is typically a ready made solution for most of the problems that you might encounter.</p>

<h1 id="wide-and-long-format-transformations">Wide and long format transformations</h1>

<p>Consider the following dataset;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">first_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Olivia"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Amelia"</span><span class="p">,</span><span class="w"> </span><span class="s2">"George"</span><span class="p">),</span><span class="w">
    </span><span class="n">post_code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"AB12CD"</span><span class="p">,</span><span class="w"> </span><span class="s2">"EF34GH"</span><span class="p">,</span><span class="w"> </span><span class="s2">"IJ56KL"</span><span class="p">),</span><span class="w">
    </span><span class="n">hair_colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"brown"</span><span class="p">,</span><span class="w"> </span><span class="s2">"brown"</span><span class="p">,</span><span class="w"> </span><span class="s2">"blond"</span><span class="p">),</span><span class="w">
    </span><span class="n">eye_colour</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"green"</span><span class="p">,</span><span class="w"> </span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"blue"</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   first_name post_code hair_colour eye_colour</span><span class="w">
</span><span class="cd">#' 1     Olivia    AB12CD       brown      green</span><span class="w">
</span><span class="cd">#' 2     Amelia    EF34GH       brown       blue</span><span class="w">
</span><span class="cd">#' 3     George    IJ56KL       blond       blue</span></code></pre></figure>

<p>The data has one row per individual and records their name, post code, hair colour, and eye colour. Each observation is held in a column and the layout could be described as being a <strong><em>wide</em></strong> format.</p>

<p>The same data could also be stored in a <strong><em>long</em></strong> format where the post code, hair colour, and eye colour are all stored in a single column of values, with another column used to identify what the value signifies.</p>

<p><strong>Wide format</strong></p>

<table>
  <thead>
    <tr>
      <th>first_name</th>
      <th>post_code</th>
      <th>hair_colour</th>
      <th>eye_colour</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Olivia</td>
      <td>AB12CD</td>
      <td>brown</td>
      <td>green</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>EF34GH</td>
      <td>brown</td>
      <td>blue</td>
    </tr>
    <tr>
      <td>George</td>
      <td>IJ56KL</td>
      <td>blond</td>
      <td>blue</td>
    </tr>
  </tbody>
</table>

<p><strong>Long format</strong></p>

<table>
  <thead>
    <tr>
      <th>first_name</th>
      <th>measure</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Olivia</td>
      <td>post_code</td>
      <td>AB12CD</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>post_code</td>
      <td>EF34GH</td>
    </tr>
    <tr>
      <td>George</td>
      <td>post_code</td>
      <td>IJ56KL</td>
    </tr>
    <tr>
      <td>Olivia</td>
      <td>hair_colour</td>
      <td>brown</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>hair_colour</td>
      <td>brown</td>
    </tr>
    <tr>
      <td>George</td>
      <td>hair_colour</td>
      <td>blond</td>
    </tr>
    <tr>
      <td>Olivia</td>
      <td>eye_colour</td>
      <td>green</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>eye_colour</td>
      <td>blue</td>
    </tr>
    <tr>
      <td>George</td>
      <td>eye_colour</td>
      <td>blue</td>
    </tr>
  </tbody>
</table>

<h2 id="wide-to-long-transformation">Wide to Long transformation</h2>

<p>Whilst there are a number of functions available to assist in the wide to long transformation, <code class="language-plaintext highlighter-rouge">pivot_longer</code> from the <code class="language-plaintext highlighter-rouge">tidyr</code> package offers one of the simpler API’s. <code class="language-plaintext highlighter-rouge">tidyr</code> is a widely used package and the <code class="language-plaintext highlighter-rouge">pivot_longer</code> function is performant with small to mid sized data.</p>

<p>You can install <code class="language-plaintext highlighter-rouge">tidyr</code> from CRAN if you don’t already have it installed.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"tidyr"</span><span class="p">)</span></code></pre></figure>

<p>To use <code class="language-plaintext highlighter-rouge">pivot_longer</code> to transform our data we need to specify at least the <code class="language-plaintext highlighter-rouge">data</code> and <code class="language-plaintext highlighter-rouge">cols</code> arguments. <code class="language-plaintext highlighter-rouge">data</code> allows us to specify the object that we want to transform, and <code class="language-plaintext highlighter-rouge">cols</code> specifies the columns to pivot into the longer format.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">post_code</span><span class="p">,</span><span class="w"> </span><span class="n">hair_colour</span><span class="p">,</span><span class="w"> </span><span class="n">eye_colour</span><span class="p">))</span><span class="w">
</span><span class="cd">#' # A tibble: 9 × 3</span><span class="w">
</span><span class="cd">#'   first_name name        value </span><span class="w">
</span><span class="cd">#'   &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt; </span><span class="w">
</span><span class="cd">#' 1 Olivia     post_code   AB12CD</span><span class="w">
</span><span class="cd">#' 2 Olivia     hair_colour brown </span><span class="w">
</span><span class="cd">#' 3 Olivia     eye_colour  green </span><span class="w">
</span><span class="cd">#' 4 Amelia     post_code   EF34GH</span><span class="w">
</span><span class="cd">#' 5 Amelia     hair_colour brown </span><span class="w">
</span><span class="cd">#' 6 Amelia     eye_colour  blue  </span><span class="w">
</span><span class="cd">#' 7 George     post_code   IJ56KL</span><span class="w">
</span><span class="cd">#' 8 George     hair_colour blond </span><span class="w">
</span><span class="cd">#' 9 George     eye_colour  blue </span></code></pre></figure>

<p>We can also use negation in the <code class="language-plaintext highlighter-rouge">cols</code> argument; in our example we actually want to pivot all columns except <code class="language-plaintext highlighter-rouge">first_name</code>, so we can also write the function like this;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w"> </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">first_name</span><span class="p">)</span><span class="w">
</span><span class="cd">#' # A tibble: 9 × 3</span><span class="w">
</span><span class="cd">#'   first_name name        value </span><span class="w">
</span><span class="cd">#'   &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt; </span><span class="w">
</span><span class="cd">#' 1 Olivia     post_code   AB12CD</span><span class="w">
</span><span class="cd">#' 2 Olivia     hair_colour brown </span><span class="w">
</span><span class="cd">#' 3 Olivia     eye_colour  green </span><span class="w">
</span><span class="cd">#' 4 Amelia     post_code   EF34GH</span><span class="w">
</span><span class="cd">#' 5 Amelia     hair_colour brown </span><span class="w">
</span><span class="cd">#' 6 Amelia     eye_colour  blue  </span><span class="w">
</span><span class="cd">#' 7 George     post_code   IJ56KL</span><span class="w">
</span><span class="cd">#' 8 George     hair_colour blond </span><span class="w">
</span><span class="cd">#' 9 George     eye_colour  blue </span></code></pre></figure>

<p>You will have noticed that the return of <code class="language-plaintext highlighter-rouge">pivot_longer</code> is a <code class="language-plaintext highlighter-rouge">tibble</code>. This generally won’t be a problem, but we can keep our data in a <code class="language-plaintext highlighter-rouge">data.frame</code> by using <code class="language-plaintext highlighter-rouge">as.data.frame()</code> to wrap our call to <code class="language-plaintext highlighter-rouge">pivot_longer()</code>, for example <code class="language-plaintext highlighter-rouge">as.data.frame(tidyr::pivot_longer(data, cols))</code>.</p>

<p>Typically, we might want to specify the names of the new <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">value</code> columns rather than using the default values. This can be achieved with the <code class="language-plaintext highlighter-rouge">names_to</code> and <code class="language-plaintext highlighter-rouge">values_to</code> arguments.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w">
        </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w">
        </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">first_name</span><span class="p">,</span><span class="w">
        </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="p">,</span><span class="w"> </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"value"</span><span class="w">
        </span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">
</span><span class="cd">#'   first_name     measure  value</span><span class="w">
</span><span class="cd">#' 1     Olivia   post_code AB12CD</span><span class="w">
</span><span class="cd">#' 2     Olivia hair_colour  brown</span><span class="w">
</span><span class="cd">#' 3     Olivia  eye_colour  green</span><span class="w">
</span><span class="cd">#' 4     Amelia   post_code EF34GH</span><span class="w">
</span><span class="cd">#' 5     Amelia hair_colour  brown</span><span class="w">
</span><span class="cd">#' 6     Amelia  eye_colour   blue</span><span class="w">
</span><span class="cd">#' 7     George   post_code IJ56KL</span><span class="w">
</span><span class="cd">#' 8     George hair_colour  blond</span><span class="w">
</span><span class="cd">#' 9     George  eye_colour   blue</span></code></pre></figure>

<p>The function has worked well so far, but what if we had another column containing numeric values that we also wanted to include in the transformation?</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dat</span><span class="o">$</span><span class="n">age</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">64</span><span class="p">,</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="m">56</span><span class="p">)</span><span class="w">

</span><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w">
        </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w">
        </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">first_name</span><span class="p">,</span><span class="w">
        </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="p">,</span><span class="w"> </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"value"</span><span class="w">
        </span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">
</span><span class="cd">#' Error in `pivot_longer_spec()`:</span><span class="w">
</span><span class="cd">#' ! Can't combine `post_code` &lt;character&gt; and `age` &lt;double&gt;.</span><span class="w">
</span><span class="cd">#' Run `rlang::last_error()` to see where the error occurred.</span></code></pre></figure>

<p>Our <code class="language-plaintext highlighter-rouge">post_code</code>, <code class="language-plaintext highlighter-rouge">hair_colour</code>, and <code class="language-plaintext highlighter-rouge">eye_colour</code> columns were all character vectors, whereas our newly added <code class="language-plaintext highlighter-rouge">age</code> column is numeric. <code class="language-plaintext highlighter-rouge">tidyverse</code> functions usually try to avoid implicit type coercions, so whilst you might have expected <code class="language-plaintext highlighter-rouge">age</code> to be coerced into a character, we have instead received an error.</p>

<p>We can use the <code class="language-plaintext highlighter-rouge">values_transform</code> argument to specify the <code class="language-plaintext highlighter-rouge">as.character</code> function, which will then be applied to all columns in the transformation.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dat</span><span class="o">$</span><span class="n">age</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">64</span><span class="p">,</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="m">56</span><span class="p">)</span><span class="w">

</span><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w">
        </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w">
        </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">first_name</span><span class="p">,</span><span class="w">
        </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="p">,</span><span class="w"> </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w">
        </span><span class="n">values_transform</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.character</span><span class="w">
        </span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    first_name     measure  value</span><span class="w">
</span><span class="cd">#' 1      Olivia   post_code AB12CD</span><span class="w">
</span><span class="cd">#' 2      Olivia hair_colour  brown</span><span class="w">
</span><span class="cd">#' 3      Olivia  eye_colour  green</span><span class="w">
</span><span class="cd">#' 4      Olivia         age     64</span><span class="w">
</span><span class="cd">#' 5      Amelia   post_code EF34GH</span><span class="w">
</span><span class="cd">#' 6      Amelia hair_colour  brown</span><span class="w">
</span><span class="cd">#' 7      Amelia  eye_colour   blue</span><span class="w">
</span><span class="cd">#' 8      Amelia         age     25</span><span class="w">
</span><span class="cd">#' 9      George   post_code IJ56KL</span><span class="w">
</span><span class="cd">#' 10     George hair_colour  blond</span><span class="w">
</span><span class="cd">#' 11     George  eye_colour   blue</span><span class="w">
</span><span class="cd">#' 12     George         age     56</span></code></pre></figure>

<p>Note that we wrote <code class="language-plaintext highlighter-rouge">values_transform = as.character</code> and not <code class="language-plaintext highlighter-rouge">values_transform = as.character()</code>. The reasons for this are to do with how the <code class="language-plaintext highlighter-rouge">pivot_longer</code> function is written internally, but for now it is sufficient to have this pointed out.</p>

<p><code class="language-plaintext highlighter-rouge">pivot_longer</code> offers a range of arguments allowing the user to exert varying levels of control over the transformation that takes place. You can view the documentation by running <code class="language-plaintext highlighter-rouge">?pivot_longer</code>.</p>

<h2 id="long-to-wide-transformation">Long to Wide transformation</h2>

<p><code class="language-plaintext highlighter-rouge">pivot_wider</code> from the <code class="language-plaintext highlighter-rouge">tidyr</code> package is used for transforming data from a long to wide format. Having used <code class="language-plaintext highlighter-rouge">pivot_longer</code>, it should feel somewhat familiar.</p>

<p>We can use <code class="language-plaintext highlighter-rouge">pivot_wider</code> to return our <code class="language-plaintext highlighter-rouge">data.frame</code>, <code class="language-plaintext highlighter-rouge">dat</code> back to a wide format. <code class="language-plaintext highlighter-rouge">dat</code> currently looks like this;</p>

<table>
  <thead>
    <tr>
      <th>first_name</th>
      <th>measure</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Olivia</td>
      <td>post_code</td>
      <td>AB12CD</td>
    </tr>
    <tr>
      <td>Olivia</td>
      <td>hair_colour</td>
      <td>brown</td>
    </tr>
    <tr>
      <td>Olivia</td>
      <td>eye_colour</td>
      <td>green</td>
    </tr>
    <tr>
      <td>Olivia</td>
      <td>age</td>
      <td>64</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>post_code</td>
      <td>EF34GH</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>hair_colour</td>
      <td>brown</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>eye_colour</td>
      <td>blue</td>
    </tr>
    <tr>
      <td>Amelia</td>
      <td>age</td>
      <td>25</td>
    </tr>
    <tr>
      <td>George</td>
      <td>post_code</td>
      <td>IJ56KL</td>
    </tr>
    <tr>
      <td>George</td>
      <td>hair_colour</td>
      <td>blond</td>
    </tr>
    <tr>
      <td>George</td>
      <td>eye_colour</td>
      <td>blue</td>
    </tr>
    <tr>
      <td>George</td>
      <td>age</td>
      <td>56</td>
    </tr>
  </tbody>
</table>

<p>The minimum arguments that we need to provide to transform our data with <code class="language-plaintext highlighter-rouge">pivot_wider</code> are <code class="language-plaintext highlighter-rouge">names_from</code> (the column values will be converted to the column names) and <code class="language-plaintext highlighter-rouge">values_from</code> (the values that will populate the new columns). We also need to pass our <code class="language-plaintext highlighter-rouge">data.frame</code> as the <code class="language-plaintext highlighter-rouge">data</code> argument.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_wider</span><span class="p">(</span><span class="w">
        </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dat</span><span class="p">,</span><span class="w">
        </span><span class="n">names_from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">measure</span><span class="p">,</span><span class="w">
        </span><span class="n">values_from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="w">
        </span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   first_name post_code hair_colour eye_colour age</span><span class="w">
</span><span class="cd">#' 1     Olivia    AB12CD       brown      green  64</span><span class="w">
</span><span class="cd">#' 2     Amelia    EF34GH       brown       blue  25</span><span class="w">
</span><span class="cd">#' 3     George    IJ56KL       blond       blue  56</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">pivot_wider</code> also offers a range of additional arguments allowing the user to exert control over the transformation that takes place. You can view the documentation by running <code class="language-plaintext highlighter-rouge">?pivot_wider</code>.</p>

<h1 id="joins">Joins</h1>

<p>Joining two datasets together is a powerful technique, typically used to combine rows from two or more tables, based on a related column between them.</p>

<p>Let’s use an example of 2 tables; <code class="language-plaintext highlighter-rouge">employees</code> and <code class="language-plaintext highlighter-rouge">skills</code>. Both tables contain details of a unique identifier (<code class="language-plaintext highlighter-rouge">uid</code>), which is used to identify individual employees.</p>

<p><code class="language-plaintext highlighter-rouge">employees</code> also contains details of an employees job role (<code class="language-plaintext highlighter-rouge">role</code>) and length of service in years (<code class="language-plaintext highlighter-rouge">service</code>).</p>

<p><code class="language-plaintext highlighter-rouge">skills</code> contains 2 columns, <code class="language-plaintext highlighter-rouge">python</code> and <code class="language-plaintext highlighter-rouge">r</code>, used to record whether an employee knows those languages. Managers don’t do anything practical (obviously) so nobody bothered to record their programming skills, hence they don’t appear in the <code class="language-plaintext highlighter-rouge">skills</code> data.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">employees</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">uid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"001"</span><span class="p">,</span><span class="w"> </span><span class="s2">"002"</span><span class="p">,</span><span class="w"> </span><span class="s2">"003"</span><span class="p">,</span><span class="w"> </span><span class="s2">"004"</span><span class="p">,</span><span class="w"> </span><span class="s2">"005"</span><span class="p">),</span><span class="w">
    </span><span class="n">role</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"data scientist"</span><span class="p">,</span><span class="w"> </span><span class="s2">"data scientist"</span><span class="p">,</span><span class="w"> </span><span class="s2">"data engineer"</span><span class="p">,</span><span class="w"> </span><span class="s2">"data scientist"</span><span class="p">,</span><span class="w"> </span><span class="s2">"manager"</span><span class="p">),</span><span class="w">
    </span><span class="n">service</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">3</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">skills</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">uid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"001"</span><span class="p">,</span><span class="w"> </span><span class="s2">"002"</span><span class="p">,</span><span class="w"> </span><span class="s2">"003"</span><span class="p">,</span><span class="w"> </span><span class="s2">"004"</span><span class="p">),</span><span class="w">
    </span><span class="n">python</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w">
    </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="p">)</span></code></pre></figure>

<p>We can use the <code class="language-plaintext highlighter-rouge">merge</code> function to perform a wide range of different joins. Whatever the type of join required, much of the syntax remains the same. The <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> arguments are used to specify the two <code class="language-plaintext highlighter-rouge">data.frame</code>’s to be joined and <code class="language-plaintext highlighter-rouge">by</code> is used to specify the columns which the merge will be performed on.</p>

<h3 id="inner-join">Inner join</h3>

<div class="card">
  <div class="card__image">
        <img class="image image--lg" src="/assets/img/r-basics-data-transformation/img01.png" />
  </div>
</div>

<p>Inner joins are used to join data but keep only the rows where the merge column value exists in both <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">))</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span></code></pre></figure>

<p>Employee ‘005’ doesn’t appear in the returned <code class="language-plaintext highlighter-rouge">data.frame</code> as “005” only existed in <code class="language-plaintext highlighter-rouge">x</code>.</p>

<h3 id="outer-join">Outer join</h3>

<div class="card">
  <div class="card__image">
        <img class="image image--lg" src="/assets/img/r-basics-data-transformation/img02.png" />
  </div>
</div>

<p>The outer join is used to join the datasets whilst keeping all records from <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>. We set the <code class="language-plaintext highlighter-rouge">all</code> argument to <code class="language-plaintext highlighter-rouge">TRUE</code> to perform this join.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">),</span><span class="w"> </span><span class="n">all</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 5 005        manager       3     NA    NA</span></code></pre></figure>

<p>All records from <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> are included in the return, however, as employee ‘005’ did not exist in <code class="language-plaintext highlighter-rouge">y</code> the values for that employee in the <code class="language-plaintext highlighter-rouge">python</code> and <code class="language-plaintext highlighter-rouge">r</code> column have been set to <code class="language-plaintext highlighter-rouge">NA</code>.</p>

<h3 id="left-join">Left join</h3>

<div class="card">
  <div class="card__image">
        <img class="image image--lg" src="/assets/img/r-basics-data-transformation/img03.png" />
  </div>
</div>

<p>A left join returns all rows from the left table (<code class="language-plaintext highlighter-rouge">x</code>) and matched rows from the right table (<code class="language-plaintext highlighter-rouge">y</code>).</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">),</span><span class="w"> </span><span class="n">all.x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 5 005        manager       3     NA    NA</span></code></pre></figure>

<p>This time the return includes employee ‘005’ as the row existed in the left table (<code class="language-plaintext highlighter-rouge">x</code>) and again the values in the <code class="language-plaintext highlighter-rouge">python</code> and <code class="language-plaintext highlighter-rouge">r</code> columns have been set to <code class="language-plaintext highlighter-rouge">NA</code> as there was no row for the employee in the right table (<code class="language-plaintext highlighter-rouge">y</code>).</p>

<h3 id="right-join">Right join</h3>

<div class="card">
  <div class="card__image">
        <img class="image image--lg" src="/assets/img/r-basics-data-transformation/img04.png" />
  </div>
</div>

<p>A right join returns matched rows from the left table (<code class="language-plaintext highlighter-rouge">x</code>) and all rows from the right table (<code class="language-plaintext highlighter-rouge">y</code>).</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">),</span><span class="w"> </span><span class="n">all.y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span></code></pre></figure>

<p>This time the return does not include employee ‘005’ as the row existed only in the left table (<code class="language-plaintext highlighter-rouge">x</code>).</p>

<h3 id="summary">Summary</h3>

<p>The <code class="language-plaintext highlighter-rouge">merge()</code> function provides a simple and intuitive API. In the examples above the <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, and <code class="language-plaintext highlighter-rouge">by</code> arguments remain the same across the different types of join. The table below demonstrates the additional arguments required to achieve each type of join.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">inner join</th>
      <th style="text-align: center">outer join</th>
      <th style="text-align: center">left join</th>
      <th style="text-align: center">right join</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="/assets/img/r-basics-data-transformation/img01.png" alt="" /></td>
      <td style="text-align: center"><img src="/assets/img/r-basics-data-transformation/img02.png" alt="" /></td>
      <td style="text-align: center"><img src="/assets/img/r-basics-data-transformation/img03.png" alt="" /></td>
      <td style="text-align: center"><img src="/assets/img/r-basics-data-transformation/img04.png" alt="" /></td>
    </tr>
    <tr>
      <td style="text-align: center">all = FALSE</td>
      <td style="text-align: center">all = TRUE</td>
      <td style="text-align: center">all.x = TRUE</td>
      <td style="text-align: center">all.y = TRUE</td>
    </tr>
  </tbody>
</table>

<h2 id="a-tidy-approach">A tidy approach</h2>

<p>The <code class="language-plaintext highlighter-rouge">tidyverse</code> package <code class="language-plaintext highlighter-rouge">dplyr</code> provides functions for performing joins on a pair of <code class="language-plaintext highlighter-rouge">data.frames</code>.</p>

<h3 id="inner-join-1">Inner join</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">inner_join</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">))</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span></code></pre></figure>

<h3 id="outer-join-1">Outer join</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">full_join</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">))</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 5 005        manager       3     NA    NA</span></code></pre></figure>

<h3 id="left-join-1">Left join</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">left_join</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">))</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 5 005        manager       3     NA    NA</span></code></pre></figure>

<h3 id="right-join-1">Right join</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">dplyr</span><span class="o">::</span><span class="n">right_join</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">employees</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">skills</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"uid"</span><span class="p">))</span><span class="w">
</span><span class="cd">#'   uid           role service python     r</span><span class="w">
</span><span class="cd">#' 1 001 data scientist       1   TRUE  TRUE</span><span class="w">
</span><span class="cd">#' 2 002 data scientist       3   TRUE FALSE</span><span class="w">
</span><span class="cd">#' 3 003  data engineer       4  FALSE  TRUE</span><span class="w">
</span><span class="cd">#' 4 004 data scientist       5   TRUE  TRUE</span></code></pre></figure>

<h1 id="next-steps">Next steps</h1>

<p>The data transformation techniques discussed here are powerful and effective techniques, whilst being simple to use. They are particularly useful in analytical based projects.</p>

<p>Try out some of the tasks below to put the theory into practice.</p>

<p>The below code can be used to generate 2 <code class="language-plaintext highlighter-rouge">data.frame</code>’s, <code class="language-plaintext highlighter-rouge">transfers</code> and <code class="language-plaintext highlighter-rouge">cl_goals</code>. <code class="language-plaintext highlighter-rouge">transfers</code> contains data pertaining to the most expensive association football transfers (as of Summer 2021). <code class="language-plaintext highlighter-rouge">cl_goals</code> contains data of the 50 all time champions league top scorers (as of 2nd November 2022).</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">transfers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">structure</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">player_uid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> 
</span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> 
</span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> 
</span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> 
</span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">),</span><span class="w"> </span><span class="n">measure</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Player"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FromClub"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ToClub"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Position"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeeEuro"</span><span class="p">,</span><span class="w"> </span><span class="s2">"FeePound"</span><span class="p">),</span><span class="w"> </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Neymar"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Barcelona"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Paris Saint-Germain"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> </span><span class="s2">"222"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£198"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Kylian Mbappé"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Monaco"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Paris Saint-Germain"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"180"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£163"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Philippe Coutinho"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Liverpool"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Barcelona"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Midfielder"</span><span class="p">,</span><span class="w"> </span><span class="s2">"145"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£105"</span><span class="p">,</span><span class="w"> </span><span class="s2">"João Félix"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Benfica"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Atlético Madrid"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> </span><span class="s2">"126"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£104.10"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Antoine Griezmann"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Atlético Madrid"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Barcelona"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> </span><span class="s2">"120"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£107"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Jack Grealish"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Aston Villa"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Manchester City"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Midfielder"</span><span class="p">,</span><span class="w"> </span><span class="s2">"117"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£100"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Paul Pogba"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Juventus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Manchester United"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Midfielder"</span><span class="p">,</span><span class="w"> </span><span class="s2">"105"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£89"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Ousmane Dembélé"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Borussia Dortmund"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Barcelona"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"105"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£97"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Gareth Bale"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Tottenham Hotspur"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Real Madrid"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> </span><span class="s2">"100"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£86"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Cristiano Ronaldo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Real Madrid"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Juventus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Forward"</span><span class="p">,</span><span class="w"> </span><span class="s2">"100"</span><span class="p">,</span><span class="w"> </span><span class="s2">"£88"</span><span class="p">)),</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> 
</span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">11L</span><span class="p">,</span><span class="w"> </span><span class="m">12L</span><span class="p">,</span><span class="w"> </span><span class="m">13L</span><span class="p">,</span><span class="w"> </span><span class="m">14L</span><span class="p">,</span><span class="w"> </span><span class="m">16L</span><span class="p">,</span><span class="w"> </span><span class="m">17L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> </span><span class="m">19L</span><span class="p">,</span><span class="w"> 
</span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">21L</span><span class="p">,</span><span class="w"> </span><span class="m">23L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">26L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">31L</span><span class="p">,</span><span class="w"> </span><span class="m">32L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">34L</span><span class="p">,</span><span class="w"> 
</span><span class="m">35L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">38L</span><span class="p">,</span><span class="w"> </span><span class="m">39L</span><span class="p">,</span><span class="w"> </span><span class="m">40L</span><span class="p">,</span><span class="w"> </span><span class="m">41L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">44L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> </span><span class="m">47L</span><span class="p">,</span><span class="w"> </span><span class="m">48L</span><span class="p">,</span><span class="w"> </span><span class="m">49L</span><span class="p">,</span><span class="w"> 
</span><span class="m">51L</span><span class="p">,</span><span class="w"> </span><span class="m">52L</span><span class="p">,</span><span class="w"> </span><span class="m">53L</span><span class="p">,</span><span class="w"> </span><span class="m">54L</span><span class="p">,</span><span class="w"> </span><span class="m">55L</span><span class="p">,</span><span class="w"> </span><span class="m">56L</span><span class="p">,</span><span class="w"> </span><span class="m">58L</span><span class="p">,</span><span class="w"> </span><span class="m">59L</span><span class="p">,</span><span class="w"> </span><span class="m">60L</span><span class="p">,</span><span class="w"> </span><span class="m">61L</span><span class="p">,</span><span class="w"> </span><span class="m">62L</span><span class="p">,</span><span class="w"> </span><span class="m">63L</span><span class="p">,</span><span class="w"> </span><span class="m">65L</span><span class="p">,</span><span class="w"> 
</span><span class="m">66L</span><span class="p">,</span><span class="w"> </span><span class="m">67L</span><span class="p">,</span><span class="w"> </span><span class="m">68L</span><span class="p">,</span><span class="w"> </span><span class="m">69L</span><span class="p">,</span><span class="w"> </span><span class="m">70L</span><span class="p">),</span><span class="w"> </span><span class="n">class</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"data.frame"</span><span class="p">)</span><span class="w">

</span><span class="n">cl_goals</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">structure</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">Rank</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">,</span><span class="w"> </span><span class="m">6L</span><span class="p">,</span><span class="w"> </span><span class="m">7L</span><span class="p">,</span><span class="w"> </span><span class="m">8L</span><span class="p">,</span><span class="w"> </span><span class="m">9L</span><span class="p">,</span><span class="w"> </span><span class="m">10L</span><span class="p">,</span><span class="w"> 
</span><span class="m">10L</span><span class="p">,</span><span class="w"> </span><span class="m">12L</span><span class="p">,</span><span class="w"> </span><span class="m">12L</span><span class="p">,</span><span class="w"> </span><span class="m">14L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">15L</span><span class="p">,</span><span class="w"> </span><span class="m">17L</span><span class="p">,</span><span class="w"> </span><span class="m">18L</span><span class="p">,</span><span class="w"> </span><span class="m">19L</span><span class="p">,</span><span class="w"> </span><span class="m">20L</span><span class="p">,</span><span class="w"> </span><span class="m">21L</span><span class="p">,</span><span class="w"> </span><span class="m">22L</span><span class="p">,</span><span class="w"> </span><span class="m">23L</span><span class="p">,</span><span class="w"> 
</span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> 
</span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">40L</span><span class="p">,</span><span class="w"> </span><span class="m">40L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">,</span><span class="w"> 
</span><span class="m">45L</span><span class="p">,</span><span class="w"> </span><span class="m">45L</span><span class="p">),</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Cristiano Ronaldo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Lionel Messi"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Robert Lewandowski"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Karim Benzema"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Raúl"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ruud van Nistelrooy"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Thomas Müller"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Thierry Henry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Alfredo Di Stéfano "</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Andriy Shevchenko"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Zlatan Ibrahimović"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Eusébio "</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Filippo Inzaghi"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Didier Drogba"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Mohamed Salah"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Neymar"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Alessandro Del Piero"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Sergio Agüero"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Kylian Mbappé"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Ferenc Puskás"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Edinson Cavani"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Gerd Müller"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Fernando Morientes"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Arjen Robben"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Samuel Eto'o"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Antoine Griezmann"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Wayne Rooney"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Kaká"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Francisco Gento"</span><span class="p">,</span><span class="w"> </span><span class="s2">"David Trezeguet"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Roy Makaay"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Patrick Kluivert"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Erling Haaland"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Jean-Pierre Papin"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Edin Džeko"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Ryan Giggs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Sadio Mané"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Luis Suárez"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Rivaldo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Mario Gómez"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Raheem Sterling"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Mário Jardel"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Robin van Persie"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Hernán Crespo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"José Altafini "</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Marco Simone "</span><span class="p">,</span><span class="w"> </span><span class="s2">"José Augusto "</span><span class="p">,</span><span class="w"> </span><span class="s2">"Giovane Élber"</span><span class="p">,</span><span class="w"> 
</span><span class="s2">"Gonzalo Higuaín"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Luís Figo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Paul Scholes"</span><span class="p">),</span><span class="w"> </span><span class="n">Goals</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">140L</span><span class="p">,</span><span class="w"> 
</span><span class="m">129L</span><span class="p">,</span><span class="w"> </span><span class="m">91L</span><span class="p">,</span><span class="w"> </span><span class="m">86L</span><span class="p">,</span><span class="w"> </span><span class="m">71L</span><span class="p">,</span><span class="w"> </span><span class="m">56L</span><span class="p">,</span><span class="w"> </span><span class="m">53L</span><span class="p">,</span><span class="w"> </span><span class="m">50L</span><span class="p">,</span><span class="w"> </span><span class="m">49L</span><span class="p">,</span><span class="w"> </span><span class="m">48L</span><span class="p">,</span><span class="w"> </span><span class="m">48L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> 
</span><span class="m">44L</span><span class="p">,</span><span class="w"> </span><span class="m">43L</span><span class="p">,</span><span class="w"> </span><span class="m">43L</span><span class="p">,</span><span class="w"> </span><span class="m">42L</span><span class="p">,</span><span class="w"> </span><span class="m">41L</span><span class="p">,</span><span class="w"> </span><span class="m">40L</span><span class="p">,</span><span class="w"> </span><span class="m">36L</span><span class="p">,</span><span class="w"> </span><span class="m">35L</span><span class="p">,</span><span class="w"> </span><span class="m">34L</span><span class="p">,</span><span class="w"> </span><span class="m">33L</span><span class="p">,</span><span class="w"> </span><span class="m">31L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> 
</span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">30L</span><span class="p">,</span><span class="w"> </span><span class="m">29L</span><span class="p">,</span><span class="w"> </span><span class="m">29L</span><span class="p">,</span><span class="w"> </span><span class="m">29L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> </span><span class="m">27L</span><span class="p">,</span><span class="w"> 
</span><span class="m">26L</span><span class="p">,</span><span class="w"> </span><span class="m">26L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">25L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">,</span><span class="w"> </span><span class="m">24L</span><span class="p">),</span><span class="w"> 
    </span><span class="n">Apps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">183L</span><span class="p">,</span><span class="w"> </span><span class="m">161L</span><span class="p">,</span><span class="w"> </span><span class="m">111L</span><span class="p">,</span><span class="w"> </span><span class="m">146L</span><span class="p">,</span><span class="w"> </span><span class="m">142L</span><span class="p">,</span><span class="w"> </span><span class="m">73L</span><span class="p">,</span><span class="w"> </span><span class="m">138L</span><span class="p">,</span><span class="w"> </span><span class="m">112L</span><span class="p">,</span><span class="w"> </span><span class="m">58L</span><span class="p">,</span><span class="w"> 
    </span><span class="m">100L</span><span class="p">,</span><span class="w"> </span><span class="m">124L</span><span class="p">,</span><span class="w"> </span><span class="m">65L</span><span class="p">,</span><span class="w"> </span><span class="m">81L</span><span class="p">,</span><span class="w"> </span><span class="m">92L</span><span class="p">,</span><span class="w"> </span><span class="m">77L</span><span class="p">,</span><span class="w"> </span><span class="m">80L</span><span class="p">,</span><span class="w"> </span><span class="m">89L</span><span class="p">,</span><span class="w"> </span><span class="m">79L</span><span class="p">,</span><span class="w"> </span><span class="m">59L</span><span class="p">,</span><span class="w"> </span><span class="m">41L</span><span class="p">,</span><span class="w"> 
    </span><span class="m">70L</span><span class="p">,</span><span class="w"> </span><span class="m">35L</span><span class="p">,</span><span class="w"> </span><span class="m">93L</span><span class="p">,</span><span class="w"> </span><span class="m">110L</span><span class="p">,</span><span class="w"> </span><span class="m">78L</span><span class="p">,</span><span class="w"> </span><span class="m">85L</span><span class="p">,</span><span class="w"> </span><span class="m">85L</span><span class="p">,</span><span class="w"> </span><span class="m">86L</span><span class="p">,</span><span class="w"> </span><span class="m">89L</span><span class="p">,</span><span class="w"> </span><span class="m">58L</span><span class="p">,</span><span class="w"> </span><span class="m">61L</span><span class="p">,</span><span class="w"> </span><span class="m">71L</span><span class="p">,</span><span class="w"> 
    </span><span class="m">23L</span><span class="p">,</span><span class="w"> </span><span class="m">37L</span><span class="p">,</span><span class="w"> </span><span class="m">68L</span><span class="p">,</span><span class="w"> </span><span class="m">145L</span><span class="p">,</span><span class="w"> </span><span class="m">61L</span><span class="p">,</span><span class="w"> </span><span class="m">73L</span><span class="p">,</span><span class="w"> </span><span class="m">73L</span><span class="p">,</span><span class="w"> </span><span class="m">44L</span><span class="p">,</span><span class="w"> </span><span class="m">79L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> </span><span class="m">59L</span><span class="p">,</span><span class="w"> </span><span class="m">65L</span><span class="p">,</span><span class="w"> 
    </span><span class="m">28L</span><span class="p">,</span><span class="w"> </span><span class="m">46L</span><span class="p">,</span><span class="w"> </span><span class="m">56L</span><span class="p">,</span><span class="w"> </span><span class="m">69L</span><span class="p">,</span><span class="w"> </span><span class="m">83L</span><span class="p">,</span><span class="w"> </span><span class="m">103L</span><span class="p">,</span><span class="w"> </span><span class="m">124L</span><span class="p">)),</span><span class="w"> </span><span class="n">class</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"data.frame"</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> 
</span><span class="m">-51L</span><span class="p">))</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">transfers</code> dataset is in a long format, consisting of 3 columns, <code class="language-plaintext highlighter-rouge">player_uid</code>, <code class="language-plaintext highlighter-rouge">measure</code>, and <code class="language-plaintext highlighter-rouge">value</code>. Transform the dataset into a wide format, the transformed dataset should contain the columns;</p>

<ul>
  <li>player_uid</li>
  <li>Player</li>
  <li>FromClub</li>
  <li>ToClub</li>
  <li>Position</li>
  <li>FeeEuro</li>
  <li>FeePound</li>
</ul>

<p>Join the <code class="language-plaintext highlighter-rouge">transfers</code> and <code class="language-plaintext highlighter-rouge">cl_goals</code> datasets using the <code class="language-plaintext highlighter-rouge">Player</code> column to create a new dataset named <code class="language-plaintext highlighter-rouge">tg</code> containing only the players that are present in both datasets.</p>

<p>Using the <code class="language-plaintext highlighter-rouge">tg</code> dataset you have created;</p>

<ol>
  <li>
    <p>How many players are included in <code class="language-plaintext highlighter-rouge">tg</code>?</p>
  </li>
  <li>
    <p>What is the combined number of Champions League appearences made by players in <code class="language-plaintext highlighter-rouge">tg</code>?</p>
  </li>
  <li>
    <p>Which player scored the most goals per Champions League appearence?</p>
  </li>
  <li>
    <p>Considering the fee paid for each player in euro’s, calculate the spend per Champions League goal and assign the result to a column named <code class="language-plaintext highlighter-rouge">spend_per_goal</code>. Which player had the lowest spend per Champions League goal?</p>
  </li>
</ol>

<p><strong><em>hint: some columns may not be numeric, <code class="language-plaintext highlighter-rouge">as.numeric()</code> can be used to change type</em></strong></p>

<details>
  <summary>Answers</summary>
  
  1. 4 <br />

  2. 407 <br />

  3. Cristiano Ronaldo <br /> 

  4. Cristiano Ronaldo <br />
    
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[When working with data we often find a need to transform it in various ways. This might be for reasons of presentation, to make data compatible with a function that requires the input to be in a specific format, or to make it easier to work with. R provides plenty of options for data transformation and the rich package system means that there is typically a ready made solution for most of the problems that you might encounter. Wide and long format transformations Consider the following dataset; dat &lt;- data.frame( first_name = c("Olivia", "Amelia", "George"), post_code = c("AB12CD", "EF34GH", "IJ56KL"), hair_colour = c("brown", "brown", "blond"), eye_colour = c("green", "blue", "blue") ) print(dat) #' first_name post_code hair_colour eye_colour #' 1 Olivia AB12CD brown green #' 2 Amelia EF34GH brown blue #' 3 George IJ56KL blond blue The data has one row per individual and records their name, post code, hair colour, and eye colour. Each observation is held in a column and the layout could be described as being a wide format. The same data could also be stored in a long format where the post code, hair colour, and eye colour are all stored in a single column of values, with another column used to identify what the value signifies. Wide format first_name post_code hair_colour eye_colour Olivia AB12CD brown green Amelia EF34GH brown blue George IJ56KL blond blue Long format first_name measure value Olivia post_code AB12CD Amelia post_code EF34GH George post_code IJ56KL Olivia hair_colour brown Amelia hair_colour brown George hair_colour blond Olivia eye_colour green Amelia eye_colour blue George eye_colour blue Wide to Long transformation Whilst there are a number of functions available to assist in the wide to long transformation, pivot_longer from the tidyr package offers one of the simpler API’s. tidyr is a widely used package and the pivot_longer function is performant with small to mid sized data. You can install tidyr from CRAN if you don’t already have it installed. install.packages("tidyr") To use pivot_longer to transform our data we need to specify at least the data and cols arguments. data allows us to specify the object that we want to transform, and cols specifies the columns to pivot into the longer format. tidyr::pivot_longer(data = dat, cols = c(post_code, hair_colour, eye_colour)) #' # A tibble: 9 × 3 #' first_name name value #' &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #' 1 Olivia post_code AB12CD #' 2 Olivia hair_colour brown #' 3 Olivia eye_colour green #' 4 Amelia post_code EF34GH #' 5 Amelia hair_colour brown #' 6 Amelia eye_colour blue #' 7 George post_code IJ56KL #' 8 George hair_colour blond #' 9 George eye_colour blue We can also use negation in the cols argument; in our example we actually want to pivot all columns except first_name, so we can also write the function like this; tidyr::pivot_longer(data = dat, cols = !first_name) #' # A tibble: 9 × 3 #' first_name name value #' &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #' 1 Olivia post_code AB12CD #' 2 Olivia hair_colour brown #' 3 Olivia eye_colour green #' 4 Amelia post_code EF34GH #' 5 Amelia hair_colour brown #' 6 Amelia eye_colour blue #' 7 George post_code IJ56KL #' 8 George hair_colour blond #' 9 George eye_colour blue You will have noticed that the return of pivot_longer is a tibble. This generally won’t be a problem, but we can keep our data in a data.frame by using as.data.frame() to wrap our call to pivot_longer(), for example as.data.frame(tidyr::pivot_longer(data, cols)). Typically, we might want to specify the names of the new name and value columns rather than using the default values. This can be achieved with the names_to and values_to arguments. as.data.frame( tidyr::pivot_longer( data = dat, cols = !first_name, names_to = "measure", values_to = "value" ) ) #' first_name measure value #' 1 Olivia post_code AB12CD #' 2 Olivia hair_colour brown #' 3 Olivia eye_colour green #' 4 Amelia post_code EF34GH #' 5 Amelia hair_colour brown #' 6 Amelia eye_colour blue #' 7 George post_code IJ56KL #' 8 George hair_colour blond #' 9 George eye_colour blue The function has worked well so far, but what if we had another column containing numeric values that we also wanted to include in the transformation? dat$age &lt;- c(64, 25, 56) as.data.frame( tidyr::pivot_longer( data = dat, cols = !first_name, names_to = "measure", values_to = "value" ) ) #' Error in `pivot_longer_spec()`: #' ! Can't combine `post_code` &lt;character&gt; and `age` &lt;double&gt;. #' Run `rlang::last_error()` to see where the error occurred. Our post_code, hair_colour, and eye_colour columns were all character vectors, whereas our newly added age column is numeric. tidyverse functions usually try to avoid implicit type coercions, so whilst you might have expected age to be coerced into a character, we have instead received an error. We can use the values_transform argument to specify the as.character function, which will then be applied to all columns in the transformation. dat$age &lt;- c(64, 25, 56) dat &lt;- as.data.frame( tidyr::pivot_longer( data = dat, cols = !first_name, names_to = "measure", values_to = "value", values_transform = as.character ) ) print(dat) #' first_name measure value #' 1 Olivia post_code AB12CD #' 2 Olivia hair_colour brown #' 3 Olivia eye_colour green #' 4 Olivia age 64 #' 5 Amelia post_code EF34GH #' 6 Amelia hair_colour brown #' 7 Amelia eye_colour blue #' 8 Amelia age 25 #' 9 George post_code IJ56KL #' 10 George hair_colour blond #' 11 George eye_colour blue #' 12 George age 56 Note that we wrote values_transform = as.character and not values_transform = as.character(). The reasons for this are to do with how the pivot_longer function is written internally, but for now it is sufficient to have this pointed out. pivot_longer offers a range of arguments allowing the user to exert varying levels of control over the transformation that takes place. You can view the documentation by running ?pivot_longer. Long to Wide transformation pivot_wider from the tidyr package is used for transforming data from a long to wide format. Having used pivot_longer, it should feel somewhat familiar. We can use pivot_wider to return our data.frame, dat back to a wide format. dat currently looks like this; first_name measure value Olivia post_code AB12CD Olivia hair_colour brown Olivia eye_colour green Olivia age 64 Amelia post_code EF34GH Amelia hair_colour brown Amelia eye_colour blue Amelia age 25 George post_code IJ56KL George hair_colour blond George eye_colour blue George age 56 The minimum arguments that we need to provide to transform our data with pivot_wider are names_from (the column values will be converted to the column names) and values_from (the values that will populate the new columns). We also need to pass our data.frame as the data argument. as.data.frame( tidyr::pivot_wider( data = dat, names_from = measure, values_from = value ) ) #' first_name post_code hair_colour eye_colour age #' 1 Olivia AB12CD brown green 64 #' 2 Amelia EF34GH brown blue 25 #' 3 George IJ56KL blond blue 56 pivot_wider also offers a range of additional arguments allowing the user to exert control over the transformation that takes place. You can view the documentation by running ?pivot_wider. Joins Joining two datasets together is a powerful technique, typically used to combine rows from two or more tables, based on a related column between them. Let’s use an example of 2 tables; employees and skills. Both tables contain details of a unique identifier (uid), which is used to identify individual employees. employees also contains details of an employees job role (role) and length of service in years (service). skills contains 2 columns, python and r, used to record whether an employee knows those languages. Managers don’t do anything practical (obviously) so nobody bothered to record their programming skills, hence they don’t appear in the skills data. employees &lt;- data.frame( uid = c("001", "002", "003", "004", "005"), role = c("data scientist", "data scientist", "data engineer", "data scientist", "manager"), service = c(1,3,4,5,3) ) skills &lt;- data.frame( uid = c("001", "002", "003", "004"), python = c(TRUE, TRUE, FALSE, TRUE), r = c(TRUE, FALSE, TRUE, TRUE) ) We can use the merge function to perform a wide range of different joins. Whatever the type of join required, much of the syntax remains the same. The x and y arguments are used to specify the two data.frame’s to be joined and by is used to specify the columns which the merge will be performed on. Inner join Inner joins are used to join data but keep only the rows where the merge column value exists in both x and y. merge(x = employees, y = skills, by = c("uid")) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE Employee ‘005’ doesn’t appear in the returned data.frame as “005” only existed in x. Outer join The outer join is used to join the datasets whilst keeping all records from x and y. We set the all argument to TRUE to perform this join. merge(x = employees, y = skills, by = c("uid"), all = TRUE) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE #' 5 005 manager 3 NA NA All records from x and y are included in the return, however, as employee ‘005’ did not exist in y the values for that employee in the python and r column have been set to NA. Left join A left join returns all rows from the left table (x) and matched rows from the right table (y). merge(x = employees, y = skills, by = c("uid"), all.x = TRUE) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE #' 5 005 manager 3 NA NA This time the return includes employee ‘005’ as the row existed in the left table (x) and again the values in the python and r columns have been set to NA as there was no row for the employee in the right table (y). Right join A right join returns matched rows from the left table (x) and all rows from the right table (y). merge(x = employees, y = skills, by = c("uid"), all.y = TRUE) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE This time the return does not include employee ‘005’ as the row existed only in the left table (x). Summary The merge() function provides a simple and intuitive API. In the examples above the x, y, and by arguments remain the same across the different types of join. The table below demonstrates the additional arguments required to achieve each type of join. inner join outer join left join right join all = FALSE all = TRUE all.x = TRUE all.y = TRUE A tidy approach The tidyverse package dplyr provides functions for performing joins on a pair of data.frames. Inner join dplyr::inner_join(x = employees, y = skills, by = c("uid")) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE Outer join dplyr::full_join(x = employees, y = skills, by = c("uid")) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE #' 5 005 manager 3 NA NA Left join dplyr::left_join(x = employees, y = skills, by = c("uid")) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE #' 5 005 manager 3 NA NA Right join dplyr::right_join(x = employees, y = skills, by = c("uid")) #' uid role service python r #' 1 001 data scientist 1 TRUE TRUE #' 2 002 data scientist 3 TRUE FALSE #' 3 003 data engineer 4 FALSE TRUE #' 4 004 data scientist 5 TRUE TRUE Next steps The data transformation techniques discussed here are powerful and effective techniques, whilst being simple to use. They are particularly useful in analytical based projects. Try out some of the tasks below to put the theory into practice. The below code can be used to generate 2 data.frame’s, transfers and cl_goals. transfers contains data pertaining to the most expensive association football transfers (as of Summer 2021). cl_goals contains data of the 50 all time champions league top scorers (as of 2nd November 2022). transfers &lt;- structure(list(player_uid = c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L), measure = c("Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound", "Player", "FromClub", "ToClub", "Position", "FeeEuro", "FeePound"), value = c("Neymar", "Barcelona", "Paris Saint-Germain", "Forward", "222", "£198", "Kylian Mbappé", "Monaco", "Paris Saint-Germain", "Forward", "180", "£163", "Philippe Coutinho", "Liverpool", "Barcelona", "Midfielder", "145", "£105", "João Félix", "Benfica", "Atlético Madrid", "Forward", "126", "£104.10", "Antoine Griezmann", "Atlético Madrid", "Barcelona", "Forward", "120", "£107", "Jack Grealish", "Aston Villa", "Manchester City", "Midfielder", "117", "£100", "Paul Pogba", "Juventus", "Manchester United", "Midfielder", "105", "£89", "Ousmane Dembélé", "Borussia Dortmund", "Barcelona", "Forward", "105", "£97", "Gareth Bale", "Tottenham Hotspur", "Real Madrid", "Forward", "100", "£86", "Cristiano Ronaldo", "Real Madrid", "Juventus", "Forward", "100", "£88")), row.names = c(2L, 3L, 4L, 5L, 6L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 16L, 17L, 18L, 19L, 20L, 21L, 23L, 24L, 25L, 26L, 27L, 28L, 30L, 31L, 32L, 33L, 34L, 35L, 37L, 38L, 39L, 40L, 41L, 42L, 44L, 45L, 46L, 47L, 48L, 49L, 51L, 52L, 53L, 54L, 55L, 56L, 58L, 59L, 60L, 61L, 62L, 63L, 65L, 66L, 67L, 68L, 69L, 70L), class = "data.frame") cl_goals &lt;- structure(list(Rank = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 10L, 12L, 12L, 14L, 15L, 15L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 25L, 25L, 25L, 25L, 30L, 30L, 30L, 33L, 33L, 33L, 33L, 37L, 37L, 37L, 40L, 40L, 42L, 42L, 42L, 45L, 45L, 45L, 45L, 45L, 45L, 45L), Player = c("Cristiano Ronaldo", "Lionel Messi", "Robert Lewandowski", "Karim Benzema", "Raúl", "Ruud van Nistelrooy", "Thomas Müller", "Thierry Henry", "Alfredo Di Stéfano ", "Andriy Shevchenko", "Zlatan Ibrahimović", "Eusébio ", "Filippo Inzaghi", "Didier Drogba", "Mohamed Salah", "Neymar", "Alessandro Del Piero", "Sergio Agüero", "Kylian Mbappé", "Ferenc Puskás", "Edinson Cavani", "Gerd Müller", "Fernando Morientes", "Arjen Robben", "Samuel Eto'o", "Antoine Griezmann", "Wayne Rooney", "Kaká", "Francisco Gento", "David Trezeguet", "Roy Makaay", "Patrick Kluivert", "Erling Haaland", "Jean-Pierre Papin", "Edin Džeko", "Ryan Giggs", "Sadio Mané", "Luis Suárez", "Rivaldo", "Mario Gómez", "Raheem Sterling", "Mário Jardel", "Robin van Persie", "Hernán Crespo", "José Altafini ", "Marco Simone ", "José Augusto ", "Giovane Élber", "Gonzalo Higuaín", "Luís Figo", "Paul Scholes"), Goals = c(140L, 129L, 91L, 86L, 71L, 56L, 53L, 50L, 49L, 48L, 48L, 46L, 46L, 44L, 43L, 43L, 42L, 41L, 40L, 36L, 35L, 34L, 33L, 31L, 30L, 30L, 30L, 30L, 30L, 29L, 29L, 29L, 28L, 28L, 28L, 28L, 27L, 27L, 27L, 26L, 26L, 25L, 25L, 25L, 24L, 24L, 24L, 24L, 24L, 24L, 24L), Apps = c(183L, 161L, 111L, 146L, 142L, 73L, 138L, 112L, 58L, 100L, 124L, 65L, 81L, 92L, 77L, 80L, 89L, 79L, 59L, 41L, 70L, 35L, 93L, 110L, 78L, 85L, 85L, 86L, 89L, 58L, 61L, 71L, 23L, 37L, 68L, 145L, 61L, 73L, 73L, 44L, 79L, 46L, 59L, 65L, 28L, 46L, 56L, 69L, 83L, 103L, 124L)), class = "data.frame", row.names = c(NA, -51L)) The transfers dataset is in a long format, consisting of 3 columns, player_uid, measure, and value. Transform the dataset into a wide format, the transformed dataset should contain the columns; player_uid Player FromClub ToClub Position FeeEuro FeePound Join the transfers and cl_goals datasets using the Player column to create a new dataset named tg containing only the players that are present in both datasets. Using the tg dataset you have created; How many players are included in tg? What is the combined number of Champions League appearences made by players in tg? Which player scored the most goals per Champions League appearence? Considering the fee paid for each player in euro’s, calculate the spend per Champions League goal and assign the result to a column named spend_per_goal. Which player had the lowest spend per Champions League goal? hint: some columns may not be numeric, as.numeric() can be used to change type Answers 1. 4 2. 407 3. Cristiano Ronaldo 4. Cristiano Ronaldo]]></summary></entry><entry><title type="html">R Basics - Data Processing</title><link href="http://0.0.0.0:4000/2022/11/03/r-basics-data-processing.html" rel="alternate" type="text/html" title="R Basics - Data Processing" /><published>2022-11-03T00:00:00+00:00</published><updated>2022-11-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2022/11/03/r-basics-data-processing</id><content type="html" xml:base="http://0.0.0.0:4000/2022/11/03/r-basics-data-processing.html"><![CDATA[<p>A typical workflow using R will likely involve a number of sequential steps from importing the data into the R environment right through to outputting a completed analysis.</p>

<h2 id="an-r-workflow">An R workflow</h2>

<p>The steps involved are not always clearly distinguishable from one another and the format the data starts off in, whether it has been pre-processed, and the required output will dictate the exact steps required and the precise order in which they are performed, though broadly speaking you will be…</p>

<h3 id="extracting-or-importing-data">Extracting or importing data</h3>

<p>Getting the data into the R environment is the first step towards starting an analysis. Data may be retrieved from a database, read from a static file on a local or remote drive, or scraped from the internet, amongst many other options.</p>

<p>Whilst often overlooked in terms of its importance, getting this step right can lay strong foundations for the rest of the project. Taking care to use the most suitable function to accurately and quickly access the data should always be an important consideration.</p>

<p>For more information on reading static files you can check out <a href="https://jrh-dev.github.io/posts/r-reading-data/">Reading Data with R</a>.</p>

<h3 id="performing-exploratory-analysis">Performing exploratory analysis</h3>

<p>This step involves interacting with the data, identifying its structure, checking for missing data or data quality issues, and generally building an understanding of the data.</p>

<p>Exploratory analysis helps us to avoid nasty surprises during later steps and to choose suitable techniques to build robust, performant, and correct analyses.</p>

<h3 id="cleansing-data">Cleansing data</h3>

<p>In the real world data is rarely ready to use right away. Datasets may contain extra data that isn’t required, or may contain data items such as postal codes in multiple different formats, or in a format that won’t allow you to join it to another source.</p>

<p>This step can also involve parsing the data, for example rearranging nested data into a flat format or extracting content from a http request. Other common tasks include deduplication, handling missing values, recoding, and steps to improve data quality and accuracy.</p>

<h3 id="performing-analysis">Performing analysis</h3>

<p>Analysis typically includes adding to the dataset, perhaps calculating summary statistics by groups within the data, adding means, calculating confidence intervals and so on.</p>

<p>This step often involves formatting or manipulating data structures into mediums suitable for presentation or to meet the needs of the end user. It may also include using additional tools and frameworks such as markdown or shiny.</p>

<h3 id="creating-outputs">Creating outputs</h3>

<p>The final step will typically be to export an output. This might be publishing a shiny dashboard, writing a report or data file to disk, deploying to the cloud, or anything else.</p>

<h2 id="basic-data-analysis">Basic data analysis</h2>

<p>Imagine that we have 10 observations recording the number of patients entering a hospital ward each day, and 10 observations of the number of adverse events occurring on each of those 10 days. We can put these 2 sets of observations into a <code class="language-plaintext highlighter-rouge">data.frame</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">patients</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">56</span><span class="p">,</span><span class="w"> </span><span class="m">53</span><span class="p">,</span><span class="w"> </span><span class="m">45</span><span class="p">,</span><span class="w"> </span><span class="m">44</span><span class="p">,</span><span class="w"> </span><span class="m">46</span><span class="p">,</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">42</span><span class="p">,</span><span class="w"> </span><span class="m">46</span><span class="p">)</span><span class="w">
</span><span class="n">events</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="m">14</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">patients</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">patients</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">events</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events</span><span class="w">
</span><span class="cd">#' 1        56     11</span><span class="w">
</span><span class="cd">#' 2        53     12</span><span class="w">
</span><span class="cd">#' 3        45     11</span><span class="w">
</span><span class="cd">#' 4        44     12</span><span class="w">
</span><span class="cd">#' 5        46      4</span><span class="w">
</span><span class="cd">#' 6        50     12</span><span class="w">
</span><span class="cd">#' 7        48     15</span><span class="w">
</span><span class="cd">#' 8        48     13</span><span class="w">
</span><span class="cd">#' 9        42      9</span><span class="w">
</span><span class="cd">#' 10       46     14</span></code></pre></figure>

<p>We’re interested in identifying any unusual variation in our data. One way we can approach this is to use a statistical process control methodology. A p-chart would be a suitable way to present the data being both appropriate to the type of data we have and likely familiar to our target audience of health care professionals.</p>

<p>To create the chart we need to calculate:</p>

<ul>
  <li>the daily proportion of adverse events</li>
  <li>the average proportion of adverse events</li>
  <li>the variation</li>
  <li>an upper control limit</li>
  <li>a lower control limit</li>
</ul>

<h3 id="adding-columns-to-a-dataframe">Adding columns to a data.frame</h3>

<p>We can use the <code class="language-plaintext highlighter-rouge">$</code> operator to access columns in our <code class="language-plaintext highlighter-rouge">data.frame</code>, but we can also use it to create a new column. This is as simple as using a name that isn’t already used in the <code class="language-plaintext highlighter-rouge">data.frame</code>, for example <code class="language-plaintext highlighter-rouge">df$new_column</code>.</p>

<p>To start, lets add an identifier to our observations. As the <code class="language-plaintext highlighter-rouge">data.frame</code> already has row names we can capture these using the <code class="language-plaintext highlighter-rouge">row.names()</code> function and assign to a column named <code class="language-plaintext highlighter-rouge">observation</code>. The <code class="language-plaintext highlighter-rouge">data.frame</code> row names are stored as strings, so we can also use the <code class="language-plaintext highlighter-rouge">as.numeric()</code> function to create the <code class="language-plaintext highlighter-rouge">observation</code> column as a numeric type.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">observation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">row.names</span><span class="p">(</span><span class="n">df</span><span class="p">))</span></code></pre></figure>

<p>Nesting functions like this allows us to perform multiple operations without having to assign the returns at each step. In this example, <code class="language-plaintext highlighter-rouge">as.numeric()</code> evaluates the return of <code class="language-plaintext highlighter-rouge">row.names()</code>. There is no limit to the depth to which functions can be nested, but typically code should be written to be readable, so deeply nested code should be used sparingly.</p>

<p>We can create columns for the proportion and average proportion of adverse events named <code class="language-plaintext highlighter-rouge">percent_events</code> and <code class="language-plaintext highlighter-rouge">average</code>. To get the proportion of adverse events per day we need to divide the number of events by the number of patients for each of the 10 observations.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">percent_events</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">patients</span></code></pre></figure>

<p>When we run <code class="language-plaintext highlighter-rouge">df$events / df$patients</code> we are actually performing the divide operation with 2 vectors of equal length. As such, the first element of <code class="language-plaintext highlighter-rouge">df$events</code> is divided by the first element of <code class="language-plaintext highlighter-rouge">df$patients</code>, then the second element of each, and so on. This operation therefore returns a vector. If we look at our <code class="language-plaintext highlighter-rouge">data.frame</code> we can see a value has been calculated individually for each row.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events observation percent_events</span><span class="w">
</span><span class="cd">#' 1        56     11           1     0.19642857</span><span class="w">
</span><span class="cd">#' 2        53     12           2     0.22641509</span><span class="w">
</span><span class="cd">#' 3        45     11           3     0.24444444</span><span class="w">
</span><span class="cd">#' 4        44     12           4     0.27272727</span><span class="w">
</span><span class="cd">#' 5        46      4           5     0.08695652</span></code></pre></figure>

<p>The syntax to create <code class="language-plaintext highlighter-rouge">percent_events</code> is very similar at first glance.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">)</span></code></pre></figure>

<p>However, <code class="language-plaintext highlighter-rouge">sum(df$events) / sum(df$patients)</code> returns a vector of length 1. The difference in behavior is due to the use of the <code class="language-plaintext highlighter-rouge">sum()</code> function which means that we only pass one element to each side of the division operator.</p>

<p>You might be wondering at this point how the single element returned by <code class="language-plaintext highlighter-rouge">sum(df$events) / sum(df$patients)</code> populates the 10 rows of our <code class="language-plaintext highlighter-rouge">data.frame</code>. The answer is that in this instance R ‘recycles’ the single element and uses it in each of our rows.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events observation percent_events   average</span><span class="w">
</span><span class="cd">#' 1        56     11           1     0.19642857 0.2364017</span><span class="w">
</span><span class="cd">#' 2        53     12           2     0.22641509 0.2364017</span><span class="w">
</span><span class="cd">#' 3        45     11           3     0.24444444 0.2364017</span><span class="w">
</span><span class="cd">#' 4        44     12           4     0.27272727 0.2364017</span><span class="w">
</span><span class="cd">#' 5        46      4           5     0.08695652 0.2364017</span></code></pre></figure>

<p>We can run the code snippets side by side to compare the results.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 0.19642857 0.22641509 0.24444444 0.27272727 0.08695652 0.24000000 0.31250000 0.27083333 0.21428571</span><span class="w">
</span><span class="cd">#' [10] 0.30434783</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] 0.2364017</span></code></pre></figure>

<p>The variation calculation is a little more complex.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">)</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">sqrt</code> function computes the square root of a number, in this instance, the return of <code class="language-plaintext highlighter-rouge">df$average * (1 - df$average) / df$patients</code>. Whilst we have 3 vectors here (<code class="language-plaintext highlighter-rouge">df$average</code>, <code class="language-plaintext highlighter-rouge">1 - df$average</code>, <code class="language-plaintext highlighter-rouge">df$patients</code>) they are all of equal length, so the code returns a vector of the same length when we run it, again the first elements of each vector are processed together, then the second and so on.</p>

<p>Our final task is to calculate the upper and lower control limits.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">upper_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">lower_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events observation percent_events   average  variation upper_limit lower_limit</span><span class="w">
</span><span class="cd">#' 1        56     11           1     0.19642857 0.2364017 0.05677586   0.4067293  0.06607408</span><span class="w">
</span><span class="cd">#' 2        53     12           2     0.22641509 0.2364017 0.05836061   0.4114835  0.06131984</span><span class="w">
</span><span class="cd">#' 3        45     11           3     0.24444444 0.2364017 0.06333613   0.4264101  0.04639329</span><span class="w">
</span><span class="cd">#' 4        44     12           4     0.27272727 0.2364017 0.06405181   0.4285571  0.04424624</span><span class="w">
</span><span class="cd">#' 5        46      4           5     0.08695652 0.2364017 0.06264391   0.4243334  0.04846995</span></code></pre></figure>

<p>We now have all the columns we need to create our p-chart, but the formatting isn’t quite right for presentation. Our figures can be converted to a percentage and rounded to make them easier to interpret.</p>

<p>One approach is to round each column individually.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="o">$</span><span class="n">percent_events</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">percent_events</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">upper_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">upper_limit</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">lower_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">lower_limit</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span></code></pre></figure>

<p>However, this type of approach violates a fundamental programming principle, “Don’t Repeat Yourself (DRY)”. The DRY principle dictates that we should strive to avoid writing the same line of code more than once, and is a fundamental consideration when learning how to write efficient code.</p>

<p>A better approach in this instance is to take advantage of the fact that we want to perform the same operation on each column and they are all of the same type (numeric). With this in mind we can select all of the values simultaneously and apply our function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events observation percent_events average variation upper_limit lower_limit</span><span class="w">
</span><span class="cd">#' 1        56     11           1           19.6    23.6       5.7        40.7         6.6</span><span class="w">
</span><span class="cd">#' 2        53     12           2           22.6    23.6       5.8        41.1         6.1</span><span class="w">
</span><span class="cd">#' 3        45     11           3           24.4    23.6       6.3        42.6         4.6</span><span class="w">
</span><span class="cd">#' 4        44     12           4           27.3    23.6       6.4        42.9         4.4</span><span class="w">
</span><span class="cd">#' 5        46      4           5            8.7    23.6       6.3        42.4         4.8</span></code></pre></figure>

<h3 id="removing-columns-from-a-dataframe">Removing columns from a data.frame</h3>

<p>Now that we have completed our calculations we don’t actually need to retain the <code class="language-plaintext highlighter-rouge">variation</code> column. We can drop the column easily enough by creating a subset of our <code class="language-plaintext highlighter-rouge">data.frame</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"variation"</span><span class="p">)]</span></code></pre></figure>

<h3 id="change-a-dataframe-layout">Change a data.frame layout</h3>

<p>Our final step is to put our data into a format which we can easily use to create a p-chart. To this end we reduce the number of columns and create additional rows to present the same data.</p>

<p>There are a number of ways to transform a wide <code class="language-plaintext highlighter-rouge">data.frame</code> into a longer one, but <code class="language-plaintext highlighter-rouge">pivot_longer()</code> from the <code class="language-plaintext highlighter-rouge">tidyr</code> package is arguably one of the easier to use. However, being a part of the <code class="language-plaintext highlighter-rouge">tidyverse</code>, <code class="language-plaintext highlighter-rouge">pivot_longer()</code> returns a <code class="language-plaintext highlighter-rouge">tibble</code> rather than a <code class="language-plaintext highlighter-rouge">data.frame</code>. Whilst a <code class="language-plaintext highlighter-rouge">tibble</code> would work fine, we can keep the <code class="language-plaintext highlighter-rouge">data.frame</code> object by wrapping <code class="language-plaintext highlighter-rouge">pivot_longer()</code> with <code class="language-plaintext highlighter-rouge">as.data.frame()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w">
        </span><span class="n">df</span><span class="p">,</span><span class="w">
        </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">7</span><span class="p">]),</span><span class="w">
        </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="w">
        </span><span class="p">)</span><span class="w">
    </span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    patients events observation        measure value</span><span class="w">
</span><span class="cd">#' 1        56     11           1 percent_events  19.6</span><span class="w">
</span><span class="cd">#' 2        56     11           1        average  23.6</span><span class="w">
</span><span class="cd">#' 3        56     11           1    upper_limit  40.7</span><span class="w">
</span><span class="cd">#' 4        56     11           1    lower_limit   6.6</span><span class="w">
</span><span class="cd">#' 5        53     12           2 percent_events  22.6</span><span class="w">
</span><span class="cd">#' 6        53     12           2        average  23.6</span><span class="w">
</span><span class="cd">#' 7        53     12           2    upper_limit  41.1</span><span class="w">
</span><span class="cd">#' 8        53     12           2    lower_limit   6.1</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">pivot_longer</code> is an efficient way to reshape data and is simple to use. We pass our <code class="language-plaintext highlighter-rouge">data.frame</code> (<code class="language-plaintext highlighter-rouge">df</code>) as the first argument, the <code class="language-plaintext highlighter-rouge">cols</code> argument allows us to specify which columns we want to transform into a single column, and the optional <code class="language-plaintext highlighter-rouge">names_to</code> argument allows us to specify the name of the new single column. The values in the columns we choose will by default go into a column named <code class="language-plaintext highlighter-rouge">value</code>, though the name of this column can also be specified with the <code class="language-plaintext highlighter-rouge">values_to</code> argument if so desired.</p>

<p>You will notice that we specified the columns programmatically using <code class="language-plaintext highlighter-rouge">cols = names(df[4:7])</code>, but <code class="language-plaintext highlighter-rouge">cols = c(percent_events, average, upper_limit, lower_limit)</code> would have worked just as well. Being a part of the <code class="language-plaintext highlighter-rouge">tidyverse</code> the column names don’t have to be quoted, though doing so doesn’t cause a problem, as demonstrated with the <code class="language-plaintext highlighter-rouge">iris</code> dataset below.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="w"> 
</span><span class="n">identical</span><span class="p">(</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span><span class="w"> </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">Sepal.Length</span><span class="p">,</span><span class="w"> </span><span class="n">Sepal.Width</span><span class="p">)),</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span><span class="w"> </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Sepal.Length"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Sepal.Width"</span><span class="p">))</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="cd">#' TRUE</span></code></pre></figure>

<blockquote>
<strong><i>Tibbles?</i></strong> A tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.
<br />
<p align="right"><strong><i><a href="tibble.tidyverse.org">tibble.tidyverse.org</a></i></strong></p>
</blockquote>

<h3 id="plotting-the-p-chart">Plotting the p-chart</h3>

<p>Having wrangled our data into the correct format we can now create the p-chart using the <code class="language-plaintext highlighter-rouge">ggplot2</code> package. Don’t worry about the <code class="language-plaintext highlighter-rouge">ggplot2</code> syntax at this point, as it’s a full topic in its own right.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">observation</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">measure</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
        </span><span class="n">geom_point</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
        </span><span class="n">geom_line</span><span class="p">()</span><span class="w">

</span><span class="n">p</span></code></pre></figure>

<p><img src="/assets/img/r-basics-data-processing/img01.png" alt="Image" class="shadow" /></p>

<p>A quick look suggests that we haven’t seen any unexpected variation in our recorded results. Some further work on the chart prior to sharing might include adjusting the colours used, adding titles, and adjusting the axis, but the fundamentals are all there and the underlying data is ready to use.</p>

<h3 id="a-tidy-approach">A tidy approach</h3>

<p>The approach above relies mainly upon base R, using the functions included with an R installation by default, and used only one function from an add-on package to process the data.</p>

<p>We can compare the code with a similar approach using the <code class="language-plaintext highlighter-rouge">tidyverse</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">patients</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">56</span><span class="p">,</span><span class="w"> </span><span class="m">53</span><span class="p">,</span><span class="w"> </span><span class="m">45</span><span class="p">,</span><span class="w"> </span><span class="m">44</span><span class="p">,</span><span class="w"> </span><span class="m">46</span><span class="p">,</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">42</span><span class="p">,</span><span class="w"> </span><span class="m">46</span><span class="p">)</span><span class="w">
</span><span class="n">events</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">11</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="m">14</span><span class="p">)</span><span class="w">

</span><span class="c1"># original code</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">patients</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">patients</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">events</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">observation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">row.names</span><span class="p">(</span><span class="n">df</span><span class="p">))</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">percent_events</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">events</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">patients</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">upper_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">lower_limit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">average</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">variation</span><span class="w">

</span><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">8</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">"variation"</span><span class="p">)]</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w">
    </span><span class="n">df</span><span class="p">,</span><span class="w">
    </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="m">4</span><span class="o">:</span><span class="m">7</span><span class="p">]),</span><span class="w">
    </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># tidyverse code</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">magrittr</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tidyr</span><span class="o">::</span><span class="n">tibble</span><span class="p">(</span><span class="n">patients</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">patients</span><span class="p">,</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">events</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w">
    </span><span class="n">observation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">row_number</span><span class="p">(),</span><span class="w">
    </span><span class="n">percent_events</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">events</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">patients</span><span class="p">,</span><span class="w">
    </span><span class="n">average</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">events</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">patients</span><span class="p">),</span><span class="w">
    </span><span class="n">variation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sqrt</span><span class="p">(</span><span class="n">average</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">average</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">patients</span><span class="p">),</span><span class="w">
    </span><span class="n">upper_limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">average</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">variation</span><span class="p">,</span><span class="w">
    </span><span class="n">lower_limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">average</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">variation</span><span class="w">
  </span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="n">dplyr</span><span class="o">::</span><span class="n">across</span><span class="p">(</span><span class="m">3</span><span class="o">:</span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">)))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="o">-</span><span class="n">variation</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="o">:</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"measure"</span><span class="p">)</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">tidyverse</code> approach is certainly tidy, we only need to use the assignment operator once, as opposed to 10 times in the original. We can also avoid referencing the <code class="language-plaintext highlighter-rouge">data.frame</code> directly (<code class="language-plaintext highlighter-rouge">df$</code>) on multiple occasions which assists in keeping the code ‘clean’.</p>

<p>We do need to rely on 3 external packages (<code class="language-plaintext highlighter-rouge">magrittr</code>, <code class="language-plaintext highlighter-rouge">tidyr</code>, and <code class="language-plaintext highlighter-rouge">dplyr</code>) in the <code class="language-plaintext highlighter-rouge">tidyverse</code> approach as opposed to 1 (<code class="language-plaintext highlighter-rouge">tidyr</code>) in the original, and we need to learn 7 new functions from the <code class="language-plaintext highlighter-rouge">tidyverse</code> packages in addition to using 3 more functions in total when using the <code class="language-plaintext highlighter-rouge">tidyverse</code>.</p>

<p>This guide attempts to promote learning the base R approach as this allows for building a firm understanding of how the language works itself. As it is aimed to provide an introduction for persons new to R it also attempts to avoid creating an onus to learn multiple packages and functions at an early stage.</p>

<h2 id="next-steps">Next steps</h2>

<p>This guide should have demonstrated some of the most common and useful actions performed whilst processing data and performing a basic analysis. Try the task below to put the demonstrated approaches into practice.</p>

<p>A c-chart can be used when we have count data representing <em>n</em> items in a large, constant, but unknown area of opportunity. The following vector is the number of A&amp;E attendances recorded at a hospital on 20 consecutive Mondays.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">c</span><span class="p">(</span><span class="m">82</span><span class="p">,</span><span class="m">63</span><span class="p">,</span><span class="m">86</span><span class="p">,</span><span class="m">72</span><span class="p">,</span><span class="m">82</span><span class="p">,</span><span class="m">88</span><span class="p">,</span><span class="m">95</span><span class="p">,</span><span class="m">68</span><span class="p">,</span><span class="m">81</span><span class="p">,</span><span class="m">77</span><span class="p">,</span><span class="m">92</span><span class="p">,</span><span class="m">69</span><span class="p">,</span><span class="m">83</span><span class="p">,</span><span class="m">86</span><span class="p">,</span><span class="m">86</span><span class="p">,</span><span class="m">86</span><span class="p">,</span><span class="m">68</span><span class="p">,</span><span class="m">87</span><span class="p">,</span><span class="m">74</span><span class="p">,</span><span class="m">62</span><span class="p">)</span></code></pre></figure>

<p>To create a c-chart, you will need;</p>

<ul>
  <li>the number of attendances</li>
  <li>the average number of attendances</li>
  <li>an upper control limit</li>
  <li>a lower control limit</li>
</ul>

<p>It may be helpful to have an identifier column, for example labelling the observations 1 to 20.</p>

<p>The control limit formulas are;</p>

<p><strong>UPPER:</strong> The average number of attendances + 3 * the square root of the average number of attendances.</p>

<p><strong>LOWER:</strong> The average number of attendances - 3 * the square root of the average number of attendances.</p>

<p>You should aim to have 5 columns;</p>
<ul>
  <li>attendances</li>
  <li>observation</li>
  <li>average</li>
  <li>upper_limit</li>
  <li>lower_limit</li>
</ul>

<p>You can use <code class="language-plaintext highlighter-rouge">tidyr::pivot_wider</code> from the <code class="language-plaintext highlighter-rouge">tidyr</code> package to transform the data to a long format. The columns to transform will be “attendances”, “average”, “upper_limit”, and “lower_limit”. You made need to install <code class="language-plaintext highlighter-rouge">tidyr</code> first, using <code class="language-plaintext highlighter-rouge">install.packages("tidyr")</code>.</p>

<p>Once happy with your data, try creating the c-chart with the code below. You made need to install <code class="language-plaintext highlighter-rouge">ggplot2</code> first, using <code class="language-plaintext highlighter-rouge">install.packages("ggplot2")</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">observation</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">measure</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_point</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">()</span></code></pre></figure>

<details>
  <summary>Answers</summary>
    <div>

    <p>Your processed <code class="language-plaintext highlighter-rouge">data.frame</code> should look like this;</p>

    <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="cd">#'    observation     measure     value</span><span class="w">
</span><span class="cd">#' 1            1 attendances  82.00000</span><span class="w">
</span><span class="cd">#' 2            1     average  79.35000</span><span class="w">
</span><span class="cd">#' 3            1 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 4            1 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 5            2 attendances  63.00000</span><span class="w">
</span><span class="cd">#' 6            2     average  79.35000</span><span class="w">
</span><span class="cd">#' 7            2 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 8            2 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 9            3 attendances  86.00000</span><span class="w">
</span><span class="cd">#' 10           3     average  79.35000</span><span class="w">
</span><span class="cd">#' 11           3 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 12           3 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 13           4 attendances  72.00000</span><span class="w">
</span><span class="cd">#' 14           4     average  79.35000</span><span class="w">
</span><span class="cd">#' 15           4 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 16           4 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 17           5 attendances  82.00000</span><span class="w">
</span><span class="cd">#' 18           5     average  79.35000</span><span class="w">
</span><span class="cd">#' 19           5 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 20           5 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 21           6 attendances  88.00000</span><span class="w">
</span><span class="cd">#' 22           6     average  79.35000</span><span class="w">
</span><span class="cd">#' 23           6 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 24           6 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 25           7 attendances  95.00000</span><span class="w">
</span><span class="cd">#' 26           7     average  79.35000</span><span class="w">
</span><span class="cd">#' 27           7 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 28           7 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 29           8 attendances  68.00000</span><span class="w">
</span><span class="cd">#' 30           8     average  79.35000</span><span class="w">
</span><span class="cd">#' 31           8 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 32           8 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 33           9 attendances  81.00000</span><span class="w">
</span><span class="cd">#' 34           9     average  79.35000</span><span class="w">
</span><span class="cd">#' 35           9 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 36           9 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 37          10 attendances  77.00000</span><span class="w">
</span><span class="cd">#' 38          10     average  79.35000</span><span class="w">
</span><span class="cd">#' 39          10 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 40          10 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 41          11 attendances  92.00000</span><span class="w">
</span><span class="cd">#' 42          11     average  79.35000</span><span class="w">
</span><span class="cd">#' 43          11 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 44          11 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 45          12 attendances  69.00000</span><span class="w">
</span><span class="cd">#' 46          12     average  79.35000</span><span class="w">
</span><span class="cd">#' 47          12 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 48          12 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 49          13 attendances  83.00000</span><span class="w">
</span><span class="cd">#' 50          13     average  79.35000</span><span class="w">
</span><span class="cd">#' 51          13 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 52          13 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 53          14 attendances  86.00000</span><span class="w">
</span><span class="cd">#' 54          14     average  79.35000</span><span class="w">
</span><span class="cd">#' 55          14 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 56          14 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 57          15 attendances  86.00000</span><span class="w">
</span><span class="cd">#' 58          15     average  79.35000</span><span class="w">
</span><span class="cd">#' 59          15 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 60          15 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 61          16 attendances  86.00000</span><span class="w">
</span><span class="cd">#' 62          16     average  79.35000</span><span class="w">
</span><span class="cd">#' 63          16 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 64          16 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 65          17 attendances  68.00000</span><span class="w">
</span><span class="cd">#' 66          17     average  79.35000</span><span class="w">
</span><span class="cd">#' 67          17 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 68          17 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 69          18 attendances  87.00000</span><span class="w">
</span><span class="cd">#' 70          18     average  79.35000</span><span class="w">
</span><span class="cd">#' 71          18 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 72          18 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 73          19 attendances  74.00000</span><span class="w">
</span><span class="cd">#' 74          19     average  79.35000</span><span class="w">
</span><span class="cd">#' 75          19 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 76          19 lower_limit  52.62641</span><span class="w">
</span><span class="cd">#' 77          20 attendances  62.00000</span><span class="w">
</span><span class="cd">#' 78          20     average  79.35000</span><span class="w">
</span><span class="cd">#' 79          20 upper_limit 106.07359</span><span class="w">
</span><span class="cd">#' 80          20 lower_limit  52.62641</span><span class="w">
  </span></code></pre></figure>

    <p>The finished c-chart should look like this;</p>

    <p><img src="/assets/img/r-basics-data-processing/img02.png" alt="Image" class="shadow" /></p>

  </div>
      
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[A typical workflow using R will likely involve a number of sequential steps from importing the data into the R environment right through to outputting a completed analysis. An R workflow The steps involved are not always clearly distinguishable from one another and the format the data starts off in, whether it has been pre-processed, and the required output will dictate the exact steps required and the precise order in which they are performed, though broadly speaking you will be… Extracting or importing data Getting the data into the R environment is the first step towards starting an analysis. Data may be retrieved from a database, read from a static file on a local or remote drive, or scraped from the internet, amongst many other options. Whilst often overlooked in terms of its importance, getting this step right can lay strong foundations for the rest of the project. Taking care to use the most suitable function to accurately and quickly access the data should always be an important consideration. For more information on reading static files you can check out Reading Data with R. Performing exploratory analysis This step involves interacting with the data, identifying its structure, checking for missing data or data quality issues, and generally building an understanding of the data. Exploratory analysis helps us to avoid nasty surprises during later steps and to choose suitable techniques to build robust, performant, and correct analyses. Cleansing data In the real world data is rarely ready to use right away. Datasets may contain extra data that isn’t required, or may contain data items such as postal codes in multiple different formats, or in a format that won’t allow you to join it to another source. This step can also involve parsing the data, for example rearranging nested data into a flat format or extracting content from a http request. Other common tasks include deduplication, handling missing values, recoding, and steps to improve data quality and accuracy. Performing analysis Analysis typically includes adding to the dataset, perhaps calculating summary statistics by groups within the data, adding means, calculating confidence intervals and so on. This step often involves formatting or manipulating data structures into mediums suitable for presentation or to meet the needs of the end user. It may also include using additional tools and frameworks such as markdown or shiny. Creating outputs The final step will typically be to export an output. This might be publishing a shiny dashboard, writing a report or data file to disk, deploying to the cloud, or anything else. Basic data analysis Imagine that we have 10 observations recording the number of patients entering a hospital ward each day, and 10 observations of the number of adverse events occurring on each of those 10 days. We can put these 2 sets of observations into a data.frame. patients &lt;- c(56, 53, 45, 44, 46, 50, 48, 48, 42, 46) events &lt;- c(11, 12, 11, 12, 4, 12, 15, 13, 9, 14) df &lt;- data.frame(patients = patients, events = events) print(df) #' patients events #' 1 56 11 #' 2 53 12 #' 3 45 11 #' 4 44 12 #' 5 46 4 #' 6 50 12 #' 7 48 15 #' 8 48 13 #' 9 42 9 #' 10 46 14 We’re interested in identifying any unusual variation in our data. One way we can approach this is to use a statistical process control methodology. A p-chart would be a suitable way to present the data being both appropriate to the type of data we have and likely familiar to our target audience of health care professionals. To create the chart we need to calculate: the daily proportion of adverse events the average proportion of adverse events the variation an upper control limit a lower control limit Adding columns to a data.frame We can use the $ operator to access columns in our data.frame, but we can also use it to create a new column. This is as simple as using a name that isn’t already used in the data.frame, for example df$new_column. To start, lets add an identifier to our observations. As the data.frame already has row names we can capture these using the row.names() function and assign to a column named observation. The data.frame row names are stored as strings, so we can also use the as.numeric() function to create the observation column as a numeric type. df$observation &lt;- as.numeric(row.names(df)) Nesting functions like this allows us to perform multiple operations without having to assign the returns at each step. In this example, as.numeric() evaluates the return of row.names(). There is no limit to the depth to which functions can be nested, but typically code should be written to be readable, so deeply nested code should be used sparingly. We can create columns for the proportion and average proportion of adverse events named percent_events and average. To get the proportion of adverse events per day we need to divide the number of events by the number of patients for each of the 10 observations. df$percent_events &lt;- df$events / df$patients When we run df$events / df$patients we are actually performing the divide operation with 2 vectors of equal length. As such, the first element of df$events is divided by the first element of df$patients, then the second element of each, and so on. This operation therefore returns a vector. If we look at our data.frame we can see a value has been calculated individually for each row. print(df) #' patients events observation percent_events #' 1 56 11 1 0.19642857 #' 2 53 12 2 0.22641509 #' 3 45 11 3 0.24444444 #' 4 44 12 4 0.27272727 #' 5 46 4 5 0.08695652 The syntax to create percent_events is very similar at first glance. df$average &lt;- sum(df$events) / sum(df$patients) However, sum(df$events) / sum(df$patients) returns a vector of length 1. The difference in behavior is due to the use of the sum() function which means that we only pass one element to each side of the division operator. You might be wondering at this point how the single element returned by sum(df$events) / sum(df$patients) populates the 10 rows of our data.frame. The answer is that in this instance R ‘recycles’ the single element and uses it in each of our rows. print(df) #' patients events observation percent_events average #' 1 56 11 1 0.19642857 0.2364017 #' 2 53 12 2 0.22641509 0.2364017 #' 3 45 11 3 0.24444444 0.2364017 #' 4 44 12 4 0.27272727 0.2364017 #' 5 46 4 5 0.08695652 0.2364017 We can run the code snippets side by side to compare the results. print(df$events / df$patients) #' [1] 0.19642857 0.22641509 0.24444444 0.27272727 0.08695652 0.24000000 0.31250000 0.27083333 0.21428571 #' [10] 0.30434783 print(sum(df$events) / sum(df$patients)) #' [1] 0.2364017 The variation calculation is a little more complex. df$variation &lt;- sqrt(df$average * (1 - df$average) / df$patients) The sqrt function computes the square root of a number, in this instance, the return of df$average * (1 - df$average) / df$patients. Whilst we have 3 vectors here (df$average, 1 - df$average, df$patients) they are all of equal length, so the code returns a vector of the same length when we run it, again the first elements of each vector are processed together, then the second and so on. Our final task is to calculate the upper and lower control limits. df$upper_limit &lt;- df$average + 3 * df$variation df$lower_limit &lt;- df$average - 3 * df$variation print(df) #' patients events observation percent_events average variation upper_limit lower_limit #' 1 56 11 1 0.19642857 0.2364017 0.05677586 0.4067293 0.06607408 #' 2 53 12 2 0.22641509 0.2364017 0.05836061 0.4114835 0.06131984 #' 3 45 11 3 0.24444444 0.2364017 0.06333613 0.4264101 0.04639329 #' 4 44 12 4 0.27272727 0.2364017 0.06405181 0.4285571 0.04424624 #' 5 46 4 5 0.08695652 0.2364017 0.06264391 0.4243334 0.04846995 We now have all the columns we need to create our p-chart, but the formatting isn’t quite right for presentation. Our figures can be converted to a percentage and rounded to make them easier to interpret. One approach is to round each column individually. df$percent_events &lt;- round(df$percent_events * 100, 1) df$average &lt;- round(df$average * 100, 1) df$variation &lt;- round(df$variation * 100, 1) df$upper_limit &lt;- round(df$upper_limit * 100, 1) df$lower_limit &lt;- round(df$lower_limit * 100, 1) However, this type of approach violates a fundamental programming principle, “Don’t Repeat Yourself (DRY)”. The DRY principle dictates that we should strive to avoid writing the same line of code more than once, and is a fundamental consideration when learning how to write efficient code. A better approach in this instance is to take advantage of the fact that we want to perform the same operation on each column and they are all of the same type (numeric). With this in mind we can select all of the values simultaneously and apply our function. df[4:8] &lt;- round(df[4:8] * 100, 1) print(df) #' patients events observation percent_events average variation upper_limit lower_limit #' 1 56 11 1 19.6 23.6 5.7 40.7 6.6 #' 2 53 12 2 22.6 23.6 5.8 41.1 6.1 #' 3 45 11 3 24.4 23.6 6.3 42.6 4.6 #' 4 44 12 4 27.3 23.6 6.4 42.9 4.4 #' 5 46 4 5 8.7 23.6 6.3 42.4 4.8 Removing columns from a data.frame Now that we have completed our calculations we don’t actually need to retain the variation column. We can drop the column easily enough by creating a subset of our data.frame. df &lt;- df[which(names(df) != "variation")] Change a data.frame layout Our final step is to put our data into a format which we can easily use to create a p-chart. To this end we reduce the number of columns and create additional rows to present the same data. There are a number of ways to transform a wide data.frame into a longer one, but pivot_longer() from the tidyr package is arguably one of the easier to use. However, being a part of the tidyverse, pivot_longer() returns a tibble rather than a data.frame. Whilst a tibble would work fine, we can keep the data.frame object by wrapping pivot_longer() with as.data.frame(). df &lt;- as.data.frame( tidyr::pivot_longer( df, cols = names(df[4:7]), names_to = "measure" ) ) print(df) #' patients events observation measure value #' 1 56 11 1 percent_events 19.6 #' 2 56 11 1 average 23.6 #' 3 56 11 1 upper_limit 40.7 #' 4 56 11 1 lower_limit 6.6 #' 5 53 12 2 percent_events 22.6 #' 6 53 12 2 average 23.6 #' 7 53 12 2 upper_limit 41.1 #' 8 53 12 2 lower_limit 6.1 #' ... pivot_longer is an efficient way to reshape data and is simple to use. We pass our data.frame (df) as the first argument, the cols argument allows us to specify which columns we want to transform into a single column, and the optional names_to argument allows us to specify the name of the new single column. The values in the columns we choose will by default go into a column named value, though the name of this column can also be specified with the values_to argument if so desired. You will notice that we specified the columns programmatically using cols = names(df[4:7]), but cols = c(percent_events, average, upper_limit, lower_limit) would have worked just as well. Being a part of the tidyverse the column names don’t have to be quoted, though doing so doesn’t cause a problem, as demonstrated with the iris dataset below. identical( tidyr::pivot_longer(iris, cols = c(Sepal.Length, Sepal.Width)), tidyr::pivot_longer(iris, cols = c("Sepal.Length", "Sepal.Width")) ) #' TRUE Tibbles? A tibble, or tbl_df, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don’t change variable names or types, and don’t do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects. tibble.tidyverse.org Plotting the p-chart Having wrangled our data into the correct format we can now create the p-chart using the ggplot2 package. Don’t worry about the ggplot2 syntax at this point, as it’s a full topic in its own right. library(ggplot2) p &lt;- ggplot(df, aes(observation, value, color = measure)) + geom_point() + geom_line() p A quick look suggests that we haven’t seen any unexpected variation in our recorded results. Some further work on the chart prior to sharing might include adjusting the colours used, adding titles, and adjusting the axis, but the fundamentals are all there and the underlying data is ready to use. A tidy approach The approach above relies mainly upon base R, using the functions included with an R installation by default, and used only one function from an add-on package to process the data. We can compare the code with a similar approach using the tidyverse. patients &lt;- c(56, 53, 45, 44, 46, 50, 48, 48, 42, 46) events &lt;- c(11, 12, 11, 12, 4, 12, 15, 13, 9, 14) # original code df &lt;- data.frame(patients = patients, events = events) df$observation &lt;- as.numeric(row.names(df)) df$percent_events &lt;- df$events / df$patients df$average &lt;- sum(df$events) / sum(df$patients) df$variation &lt;- sqrt(df$average * (1 - df$average) / df$patients) df$upper_limit &lt;- df$average + 3 * df$variation df$lower_limit &lt;- df$average - 3 * df$variation df[4:8] &lt;- round(df[4:8] * 100, 1) df &lt;- df[which(names(df) != "variation")] df &lt;- as.data.frame( tidyr::pivot_longer( df, cols = names(df[4:7]), names_to = "measure" ) ) # tidyverse code library(magrittr) df &lt;- tidyr::tibble(patients = patients, events = events) %&gt;% dplyr::mutate( observation = dplyr::row_number(), percent_events = events / patients, average = sum(events) / sum(patients), variation = sqrt(average * (1 - average) / patients), upper_limit = average + 3 * variation, lower_limit = average - 3 * variation ) %&gt;% dplyr::mutate(dplyr::across(3:8, function(x) round(x * 100, 1))) %&gt;% dplyr::select(-variation) %&gt;% tidyr::pivot_longer(cols = 4:7, names_to = "measure") The tidyverse approach is certainly tidy, we only need to use the assignment operator once, as opposed to 10 times in the original. We can also avoid referencing the data.frame directly (df$) on multiple occasions which assists in keeping the code ‘clean’. We do need to rely on 3 external packages (magrittr, tidyr, and dplyr) in the tidyverse approach as opposed to 1 (tidyr) in the original, and we need to learn 7 new functions from the tidyverse packages in addition to using 3 more functions in total when using the tidyverse. This guide attempts to promote learning the base R approach as this allows for building a firm understanding of how the language works itself. As it is aimed to provide an introduction for persons new to R it also attempts to avoid creating an onus to learn multiple packages and functions at an early stage. Next steps This guide should have demonstrated some of the most common and useful actions performed whilst processing data and performing a basic analysis. Try the task below to put the demonstrated approaches into practice. A c-chart can be used when we have count data representing n items in a large, constant, but unknown area of opportunity. The following vector is the number of A&amp;E attendances recorded at a hospital on 20 consecutive Mondays. c(82,63,86,72,82,88,95,68,81,77,92,69,83,86,86,86,68,87,74,62) To create a c-chart, you will need; the number of attendances the average number of attendances an upper control limit a lower control limit It may be helpful to have an identifier column, for example labelling the observations 1 to 20. The control limit formulas are; UPPER: The average number of attendances + 3 * the square root of the average number of attendances. LOWER: The average number of attendances - 3 * the square root of the average number of attendances. You should aim to have 5 columns; attendances observation average upper_limit lower_limit You can use tidyr::pivot_wider from the tidyr package to transform the data to a long format. The columns to transform will be “attendances”, “average”, “upper_limit”, and “lower_limit”. You made need to install tidyr first, using install.packages("tidyr"). Once happy with your data, try creating the c-chart with the code below. You made need to install ggplot2 first, using install.packages("ggplot2"). library(ggplot2) ggplot(df, aes(observation, value, color = measure)) + geom_point() + geom_line() Answers Your processed data.frame should look like this; #' observation measure value #' 1 1 attendances 82.00000 #' 2 1 average 79.35000 #' 3 1 upper_limit 106.07359 #' 4 1 lower_limit 52.62641 #' 5 2 attendances 63.00000 #' 6 2 average 79.35000 #' 7 2 upper_limit 106.07359 #' 8 2 lower_limit 52.62641 #' 9 3 attendances 86.00000 #' 10 3 average 79.35000 #' 11 3 upper_limit 106.07359 #' 12 3 lower_limit 52.62641 #' 13 4 attendances 72.00000 #' 14 4 average 79.35000 #' 15 4 upper_limit 106.07359 #' 16 4 lower_limit 52.62641 #' 17 5 attendances 82.00000 #' 18 5 average 79.35000 #' 19 5 upper_limit 106.07359 #' 20 5 lower_limit 52.62641 #' 21 6 attendances 88.00000 #' 22 6 average 79.35000 #' 23 6 upper_limit 106.07359 #' 24 6 lower_limit 52.62641 #' 25 7 attendances 95.00000 #' 26 7 average 79.35000 #' 27 7 upper_limit 106.07359 #' 28 7 lower_limit 52.62641 #' 29 8 attendances 68.00000 #' 30 8 average 79.35000 #' 31 8 upper_limit 106.07359 #' 32 8 lower_limit 52.62641 #' 33 9 attendances 81.00000 #' 34 9 average 79.35000 #' 35 9 upper_limit 106.07359 #' 36 9 lower_limit 52.62641 #' 37 10 attendances 77.00000 #' 38 10 average 79.35000 #' 39 10 upper_limit 106.07359 #' 40 10 lower_limit 52.62641 #' 41 11 attendances 92.00000 #' 42 11 average 79.35000 #' 43 11 upper_limit 106.07359 #' 44 11 lower_limit 52.62641 #' 45 12 attendances 69.00000 #' 46 12 average 79.35000 #' 47 12 upper_limit 106.07359 #' 48 12 lower_limit 52.62641 #' 49 13 attendances 83.00000 #' 50 13 average 79.35000 #' 51 13 upper_limit 106.07359 #' 52 13 lower_limit 52.62641 #' 53 14 attendances 86.00000 #' 54 14 average 79.35000 #' 55 14 upper_limit 106.07359 #' 56 14 lower_limit 52.62641 #' 57 15 attendances 86.00000 #' 58 15 average 79.35000 #' 59 15 upper_limit 106.07359 #' 60 15 lower_limit 52.62641 #' 61 16 attendances 86.00000 #' 62 16 average 79.35000 #' 63 16 upper_limit 106.07359 #' 64 16 lower_limit 52.62641 #' 65 17 attendances 68.00000 #' 66 17 average 79.35000 #' 67 17 upper_limit 106.07359 #' 68 17 lower_limit 52.62641 #' 69 18 attendances 87.00000 #' 70 18 average 79.35000 #' 71 18 upper_limit 106.07359 #' 72 18 lower_limit 52.62641 #' 73 19 attendances 74.00000 #' 74 19 average 79.35000 #' 75 19 upper_limit 106.07359 #' 76 19 lower_limit 52.62641 #' 77 20 attendances 62.00000 #' 78 20 average 79.35000 #' 79 20 upper_limit 106.07359 #' 80 20 lower_limit 52.62641 The finished c-chart should look like this;]]></summary></entry><entry><title type="html">R Basics - Exploring A Dataset</title><link href="http://0.0.0.0:4000/r/basics/2022/11/03/r-basics-explore-data.html" rel="alternate" type="text/html" title="R Basics - Exploring A Dataset" /><published>2022-11-03T00:00:00+00:00</published><updated>2022-11-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/r/basics/2022/11/03/r-basics-explore-data</id><content type="html" xml:base="http://0.0.0.0:4000/r/basics/2022/11/03/r-basics-explore-data.html"><![CDATA[<p>R is often used interactively and as users grow in confidence they will often begin to find it simpler and more convenient to explore new data with R directly rather than opening the data in another application. A good IDE such as RStudio can make using R in this way easier. Exploring data before proceeding to perform analysis or further processing allows for making informed decisions regarding how to structure a project and helps to identify the types of techniques which may work well with the data you have.</p>

<h2 id="getting-an-overview">Getting an overview</h2>

<p>The built in <code class="language-plaintext highlighter-rouge">iris</code> dataset was used and made famous by the British statistician and biologist Ronald Fisher in his 1936 paper.</p>

<p>If we know very little about a dataset, the <code class="language-plaintext highlighter-rouge">head()</code> and <code class="language-plaintext highlighter-rouge">tail()</code> functions can be used to print the first or last 6 rows of a <code class="language-plaintext highlighter-rouge">data.frame</code> to the console by default; though the <code class="language-plaintext highlighter-rouge">n</code> argument of the functions also allows us to specify a number of rows.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">iris</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">

</span><span class="cd">#'   Sepal.Length Sepal.Width Petal.Length Petal.Width Species</span><span class="w">
</span><span class="cd">#' 1          5.1         3.5          1.4         0.2  setosa</span><span class="w">
</span><span class="cd">#' 2          4.9         3.0          1.4         0.2  setosa</span><span class="w">
</span><span class="cd">#' 3          4.7         3.2          1.3         0.2  setosa</span><span class="w">
</span><span class="cd">#' 4          4.6         3.1          1.5         0.2  setosa</span><span class="w">
</span><span class="cd">#' 5          5.0         3.6          1.4         0.2  setosa</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">typeof()</code> function is useful for identifying the type of column.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">typeof</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Sepal.Length</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "double"</span><span class="w">

</span><span class="n">typeof</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Species</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "integer"</span></code></pre></figure>

<p>The output of <code class="language-plaintext highlighter-rouge">typeof(iris$Species)</code> may have surprised you. Whilst you may have expected the return <code class="language-plaintext highlighter-rouge">"character"</code>, we got <code class="language-plaintext highlighter-rouge">"integer"</code>. The <code class="language-plaintext highlighter-rouge">Species</code> column is actually a factor class object. We can use <code class="language-plaintext highlighter-rouge">class()</code> to check an objects class, and <code class="language-plaintext highlighter-rouge">is.factor()</code> if we wish to check for a factor specifically.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">class</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Sepal.Length</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "numeric"</span><span class="w">

</span><span class="nf">class</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Species</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "factor"</span><span class="w">

</span><span class="n">is.factor</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Species</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] TRUE</span></code></pre></figure>

<p><strong><em>A note on factors:</em></strong> R was primarily designed with statistical applications in mind and the existence of the factor class is a direct result of this. R factors are intended for use with categorical variables, eye colour for example. Whilst factors can appear to be strings they also have a numerical representation, which is why <code class="language-plaintext highlighter-rouge">typeof(iris$Species)</code> returns <code class="language-plaintext highlighter-rouge">integer</code>.</p>

<p>Factors can be useful when you want to apply an order to categorical vector. For example, I could ask some people to rate this explanation of factors as “good”, “bad”, or “average” and record the responses as a character vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rating</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"average"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"average"</span><span class="p">)</span></code></pre></figure>

<p>There is no inherent order to the vector from R’s perspective, so if we apply the <code class="language-plaintext highlighter-rouge">sort()</code> function it will sort the elements alphabetically.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">sort</span><span class="p">(</span><span class="n">rating</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "average" "bad"     "good"   </span></code></pre></figure>

<p>However, we can use the factor class in R to add a custom order to the vector. To do so we use the <code class="language-plaintext highlighter-rouge">factor</code> function and specify our preferred order with the <code class="language-plaintext highlighter-rouge">levels</code> argument.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">rating</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="w">
    </span><span class="nf">c</span><span class="p">(</span><span class="s2">"good"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"average"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"average"</span><span class="p">),</span><span class="w">
    </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"bad"</span><span class="p">,</span><span class="w"> </span><span class="s2">"average"</span><span class="p">,</span><span class="w"> </span><span class="s2">"good"</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">sort</span><span class="p">(</span><span class="n">rating</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] bad     bad     average average good   </span><span class="w">
</span><span class="cd">#' Levels: bad average good</span></code></pre></figure>

<p class="warning">
<strong><i>Caution</i></strong>: Factors can be useful, but they can also lead to errors occurring if you haven't realised that they are being used. This common cause of frustration was addressed by the R Core team and as of R version 4.0.0 many functions which used to set strings as factors by default ceased to do so, including the <code>data.frame()</code> function.
<br /><br />
Those using a version of R prior to the 4.0.0 release should take care to pass the <code>stringsAsFactors = FALSE</code> argument inside relevant functions if factors are not desired. Alternatively, the behavior can be turned off globally during a session by running <code>options(stringsAsFactors = FALSE)</code>.
</p>

<h2 id="taking-a-closer-look">Taking a closer look</h2>

<p>Once you have an idea of the general structure and contents of a dataset it can be useful to learn more about specific columns. The <code class="language-plaintext highlighter-rouge">summary()</code> function is particularly useful for taking a closer look at a dataset and can handle columns of different types.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">summary</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span><span class="w">
</span><span class="cd">#'   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   </span><span class="w">
</span><span class="cd">#'  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  </span><span class="w">
</span><span class="cd">#'  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  </span><span class="w">
</span><span class="cd">#'  Median :5.800   Median :3.000   Median :4.350   Median :1.300  </span><span class="w">
</span><span class="cd">#'  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  </span><span class="w">
</span><span class="cd">#'  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  </span><span class="w">
</span><span class="cd">#'  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  </span><span class="w">
</span><span class="cd">#'        Species  </span><span class="w">
</span><span class="cd">#'  setosa    :50  </span><span class="w">
</span><span class="cd">#'  versicolor:50  </span><span class="w">
</span><span class="cd">#'  virginica :50 </span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">fivenum()</code> is another useful function which quickly provides Tukey’s five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for a numeric vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">fivenum</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 0.1 0.3 1.3 1.8 2.5</span></code></pre></figure>

<p>Other helpful functions to try include <code class="language-plaintext highlighter-rouge">min()</code>, <code class="language-plaintext highlighter-rouge">max()</code>, <code class="language-plaintext highlighter-rouge">range()</code>, <code class="language-plaintext highlighter-rouge">mean()</code>, and <code class="language-plaintext highlighter-rouge">median()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">min</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 0.1</span><span class="w">

</span><span class="nf">max</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 2.5</span><span class="w">

</span><span class="nf">range</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 0.1 2.5</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1.199333</span><span class="w">

</span><span class="n">median</span><span class="p">(</span><span class="n">iris</span><span class="o">$</span><span class="n">Petal.Width</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1.3</span></code></pre></figure>

<h2 id="next-steps">Next Steps</h2>

<p>You can view a full list of the built in R datasets by running <code class="language-plaintext highlighter-rouge">library(help="datasets")</code>. Try running some of the functions discussed above on different datasets.</p>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R" /><category term="Basics" /><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[R is often used interactively and as users grow in confidence they will often begin to find it simpler and more convenient to explore new data with R directly rather than opening the data in another application. A good IDE such as RStudio can make using R in this way easier. Exploring data before proceeding to perform analysis or further processing allows for making informed decisions regarding how to structure a project and helps to identify the types of techniques which may work well with the data you have. Getting an overview The built in iris dataset was used and made famous by the British statistician and biologist Ronald Fisher in his 1936 paper. If we know very little about a dataset, the head() and tail() functions can be used to print the first or last 6 rows of a data.frame to the console by default; though the n argument of the functions also allows us to specify a number of rows. head(iris, n = 5) #' Sepal.Length Sepal.Width Petal.Length Petal.Width Species #' 1 5.1 3.5 1.4 0.2 setosa #' 2 4.9 3.0 1.4 0.2 setosa #' 3 4.7 3.2 1.3 0.2 setosa #' 4 4.6 3.1 1.5 0.2 setosa #' 5 5.0 3.6 1.4 0.2 setosa The typeof() function is useful for identifying the type of column. typeof(iris$Sepal.Length) #' [1] "double" typeof(iris$Species) #' [1] "integer" The output of typeof(iris$Species) may have surprised you. Whilst you may have expected the return "character", we got "integer". The Species column is actually a factor class object. We can use class() to check an objects class, and is.factor() if we wish to check for a factor specifically. class(iris$Sepal.Length) #' [1] "numeric" class(iris$Species) #' [1] "factor" is.factor(iris$Species) #' [1] TRUE A note on factors: R was primarily designed with statistical applications in mind and the existence of the factor class is a direct result of this. R factors are intended for use with categorical variables, eye colour for example. Whilst factors can appear to be strings they also have a numerical representation, which is why typeof(iris$Species) returns integer. Factors can be useful when you want to apply an order to categorical vector. For example, I could ask some people to rate this explanation of factors as “good”, “bad”, or “average” and record the responses as a character vector. rating &lt;- c("good", "bad", "average", "bad", "average") There is no inherent order to the vector from R’s perspective, so if we apply the sort() function it will sort the elements alphabetically. sort(rating) #' [1] "average" "bad" "good" However, we can use the factor class in R to add a custom order to the vector. To do so we use the factor function and specify our preferred order with the levels argument. rating &lt;- factor( c("good", "bad", "average", "bad", "average"), levels = c("bad", "average", "good") ) sort(rating) #' [1] bad bad average average good #' Levels: bad average good Caution: Factors can be useful, but they can also lead to errors occurring if you haven't realised that they are being used. This common cause of frustration was addressed by the R Core team and as of R version 4.0.0 many functions which used to set strings as factors by default ceased to do so, including the data.frame() function. Those using a version of R prior to the 4.0.0 release should take care to pass the stringsAsFactors = FALSE argument inside relevant functions if factors are not desired. Alternatively, the behavior can be turned off globally during a session by running options(stringsAsFactors = FALSE). Taking a closer look Once you have an idea of the general structure and contents of a dataset it can be useful to learn more about specific columns. The summary() function is particularly useful for taking a closer look at a dataset and can handle columns of different types. summary(iris) #' Sepal.Length Sepal.Width Petal.Length Petal.Width #' Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 #' 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 #' Median :5.800 Median :3.000 Median :4.350 Median :1.300 #' Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 #' 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 #' Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 #' Species #' setosa :50 #' versicolor:50 #' virginica :50 fivenum() is another useful function which quickly provides Tukey’s five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for a numeric vector. fivenum(iris$Petal.Width) #' [1] 0.1 0.3 1.3 1.8 2.5 Other helpful functions to try include min(), max(), range(), mean(), and median(). min(iris$Petal.Width) #' [1] 0.1 max(iris$Petal.Width) #' [1] 2.5 range(iris$Petal.Width) #' [1] 0.1 2.5 mean(iris$Petal.Width) #' [1] 1.199333 median(iris$Petal.Width) #' [1] 1.3 Next Steps You can view a full list of the built in R datasets by running library(help="datasets"). Try running some of the functions discussed above on different datasets.]]></summary></entry><entry><title type="html">R Basics - Data Frames Part 2</title><link href="http://0.0.0.0:4000/2022/10/12/r-basics-dataframes-part-2.html" rel="alternate" type="text/html" title="R Basics - Data Frames Part 2" /><published>2022-10-12T00:00:00+01:00</published><updated>2022-10-12T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2022/10/12/r-basics-dataframes-part-2</id><content type="html" xml:base="http://0.0.0.0:4000/2022/10/12/r-basics-dataframes-part-2.html"><![CDATA[<p>In <a href="https://jrh-dev.github.io/posts/r_basics_dataframes_p1/">Data Frames Part 1</a> we looked at creating <code class="language-plaintext highlighter-rouge">data.frame</code> objects, accessing their columns, and creating subsets of them using their row and column indices. We also looked at some useful functions for interacting with <code class="language-plaintext highlighter-rouge">data.frame</code> objects’s, including <code class="language-plaintext highlighter-rouge">ncol()</code>, <code class="language-plaintext highlighter-rouge">nrow()</code>, and <code class="language-plaintext highlighter-rouge">names()</code>.</p>

<h2 id="working-with-data-frames">Working with data frames</h2>

<p><code class="language-plaintext highlighter-rouge">mtcars</code> is one of a variety of data sets that are included with R and are typically used in tutorials. We can view the first few rows of <code class="language-plaintext highlighter-rouge">mtcars</code> to get a feel for the data set using the <code class="language-plaintext highlighter-rouge">head()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span><span class="w">
</span><span class="cd">#'                    mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4</span><span class="w">
</span><span class="cd">#' Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4</span><span class="w">
</span><span class="cd">#' Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1</span><span class="w">
</span><span class="cd">#' Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1</span><span class="w">
</span><span class="cd">#' Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</span><span class="w">
</span><span class="cd">#' Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">tail()</code> function can also be used to inspect an object and works similarly to <code class="language-plaintext highlighter-rouge">head()</code>, returning the last rows of a <code class="language-plaintext highlighter-rouge">data.frame</code>. <code class="language-plaintext highlighter-rouge">head()</code> and <code class="language-plaintext highlighter-rouge">tail()</code> can also be used on individual columns, or in fact any vector, to return the first (or last) few elements.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">head</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">mpg</span><span class="p">)</span><span class="w">
</span><span class="c1">#` [1] 21.0 21.0 22.8 21.4 18.7 18.1</span></code></pre></figure>

<p>You may have noticed that <code class="language-plaintext highlighter-rouge">mtcars</code> doesn’t actually have a column containing the car names, rather they are stored as row names. We can check and confirm this using the <code class="language-plaintext highlighter-rouge">row.names()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">row.names</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "Mazda RX4"           "Mazda RX4 Wag"      </span><span class="w">
</span><span class="cd">#' [3] "Datsun 710"          "Hornet 4 Drive"     </span><span class="w">
</span><span class="cd">#' [5] "Hornet Sportabout"   "Valiant" </span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<h2 id="subset-rows-based-on-criteria">Subset rows based on criteria</h2>

<p>We know that we can access a <code class="language-plaintext highlighter-rouge">data.frame</code>’s elements using the indices of the rows and columns that we want to include. You can revisit <a href="https://jrh-dev.github.io/posts/r_basics_dataframes_p1/">Data Frames Part 1</a> for a refresher.</p>

<p><img src="/assets/img/r-basics-dataframes-part-2/img02.png" alt="Image" class="shadow" /></p>

<p>The position of the row and column indices along with the <code class="language-plaintext highlighter-rouge">,</code> are perhaps the most important considerations at this stage, and are the most likely to cause confusion.</p>

<p>It is important to take extra care with the syntax initially, but as you gain experience from putting the theory into practice you will find that it quickly becomes more intuitive, for example, knowing that if we don’t include the comma and only pass one index (i.e. <code class="language-plaintext highlighter-rouge">df[1]</code>), R will assume that we want a column.</p>

<p>As you become more confident with manipulating <code class="language-plaintext highlighter-rouge">data.frame</code> objects in this way you can start to advance towards more powerful applications to create specific subsets of <code class="language-plaintext highlighter-rouge">data.frame</code>’s.</p>

<h3 id="subset-rows-using-a-numeric-vector">Subset rows using a numeric vector</h3>

<p>Lets say that we want to extract all of the rows from <code class="language-plaintext highlighter-rouge">mtcars</code> for cars with over 200 horsepower.</p>

<p>To achieve our goal we could look at <code class="language-plaintext highlighter-rouge">mtcars</code> and write down the row numbers where the value in the <code class="language-plaintext highlighter-rouge">hp</code> column is greater than 200, which would be rows 7, 15, 16, 17, 24, 29, and 31.</p>

<p>Using the index system we are able to create a subset of <code class="language-plaintext highlighter-rouge">mtcars</code> containing those rows.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="m">17</span><span class="p">,</span><span class="w"> </span><span class="m">24</span><span class="p">,</span><span class="w"> </span><span class="m">29</span><span class="p">,</span><span class="w"> </span><span class="m">31</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>Note that we have used the <code class="language-plaintext highlighter-rouge">c()</code> function to create a vector containing the row numbers, and we have included the <code class="language-plaintext highlighter-rouge">,</code> even though we aren’t specifying any columns. If we try to select the rows without including the <code class="language-plaintext highlighter-rouge">,</code>, R will assume we want columns, and since we only have 11 columns will return an error.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="m">17</span><span class="p">,</span><span class="w"> </span><span class="m">24</span><span class="p">,</span><span class="w"> </span><span class="m">29</span><span class="p">,</span><span class="w"> </span><span class="m">31</span><span class="p">)]</span><span class="w">
</span><span class="cd">#' Error in `[.data.frame`(mtcars, c(7, 15, 16, 17, 24, 29, 31)) : </span><span class="w">
</span><span class="cd">#' undefined columns selected</span></code></pre></figure>

<p>Whilst this approach works, its clearly not very scalable. It requires manually counting the rows we want and would be impractical with larger or more complex data sets.</p>

<p>One way to approach the problem in a programmatic way is to use the <code class="language-plaintext highlighter-rouge">which()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">hp_200</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">hp_200</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1]  7 15 16 17 24 29 31</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">which(mtcars$hp &gt; 200)</code> has returned the indices of elements with values greater than 200 in the <code class="language-plaintext highlighter-rouge">mtcars</code> <code class="language-plaintext highlighter-rouge">hp</code> column. We have assigned the output of <code class="language-plaintext highlighter-rouge">which()</code> to <code class="language-plaintext highlighter-rouge">hp_200</code>, so we can now reuse those values elsewhere, in this case to subset our data.frame.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">hp_200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>It is possible to skip the step of assigning the output from <code class="language-plaintext highlighter-rouge">which()</code> altogether by using the function within <code class="language-plaintext highlighter-rouge">[ ]</code> directly.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">),]</span><span class="w">
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<h3 id="subset-rows-using-a-logical-vector">Subset rows using a logical vector</h3>

<p>We can also subset <code class="language-plaintext highlighter-rouge">mtcars</code> using a logical (TRUE or FALSE) vector. If we run <code class="language-plaintext highlighter-rouge">mtcars$hp &gt; 200</code> we get a logical vector in return, where <code class="language-plaintext highlighter-rouge">TRUE</code> indicates that the vector element was greater than 200.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="w">

</span><span class="cd">#'  [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#' [12] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#' [23] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE</span></code></pre></figure>

<p>Logical vectors can be used to subset other vectors and <code class="language-plaintext highlighter-rouge">data.frame</code>’s. We can explore this in action with a simple example.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">my_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Frances"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Polly"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Walt"</span><span class="p">)</span><span class="w">

</span><span class="n">logical_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="n">my_vector</span><span class="p">[</span><span class="n">logical_vector</span><span class="p">]</span><span class="w">

</span><span class="cd">#' [1] "Alan" "Frances" "Walt"</span></code></pre></figure>

<p>The 1st, 2nd, and 3rd elements of <code class="language-plaintext highlighter-rouge">logical_vector</code> are <code class="language-plaintext highlighter-rouge">TRUE</code>, so the subset operation keeps the 1st, 2nd, and 3rd elements of <code class="language-plaintext highlighter-rouge">my_vector</code>. We can use this approach with <code class="language-plaintext highlighter-rouge">mtcars</code> to create the subset <code class="language-plaintext highlighter-rouge">data.frame</code> of cars with over 200 hp.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>R often provides us with lots of ways to do the same thing. Which approach you use will often come down to how the wider project is structured and choosing an approach is something that becomes more intuitive with experience. Considerations such as readability and how obvious the functionality of a piece of code is to a third party, or indeed yourself upon returning to it, are important.</p>

<p>For newcomers it is often best to work with the option you find most intuitive, but in essence all of these approaches give you the same output.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">method_a</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="m">17</span><span class="p">,</span><span class="w"> </span><span class="m">24</span><span class="p">,</span><span class="w"> </span><span class="m">29</span><span class="p">,</span><span class="w"> </span><span class="m">31</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">method_b</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">method_c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">identical</span><span class="p">(</span><span class="n">method_a</span><span class="p">,</span><span class="w"> </span><span class="n">method_b</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="n">identical</span><span class="p">(</span><span class="n">method_b</span><span class="p">,</span><span class="w"> </span><span class="n">method_c</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] TRUE</span></code></pre></figure>

<h3 id="a-tidy-approach">A tidy approach</h3>

<p>Use of the <code class="language-plaintext highlighter-rouge">tidyverse</code> is somewhat ubiquitous in R and the tidy style is now often taught before base R. You will notice that so far we haven’t looked at any tidy functions. Whilst the <code class="language-plaintext highlighter-rouge">tidyverse</code> posits itself as being simpler to learn, this isn’t necessarily true. Building a strong understanding of base R will afford you greater flexibility and comprehension of the language when progressing to more advanced usage.</p>

<p>With that in mind, it can be useful to see how the examples we have looked at so far might translate into the <code class="language-plaintext highlighter-rouge">tidyverse</code>. The example below demonstrates how we could produce a subset <code class="language-plaintext highlighter-rouge">data.frame</code> of cars with over 200 hp from <code class="language-plaintext highlighter-rouge">mtcars</code> in a tidy fashion.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span><span class="w">
  
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>You will notice the use of the pipe operator <code class="language-plaintext highlighter-rouge">%&gt;%</code> and that the <code class="language-plaintext highlighter-rouge">hp</code> column is referred to simply as <code class="language-plaintext highlighter-rouge">hp</code> rather than <code class="language-plaintext highlighter-rouge">mtcars$hp</code>. The <code class="language-plaintext highlighter-rouge">dplyr</code> functions try to be more intuitive by assuming <code class="language-plaintext highlighter-rouge">hp</code> in this instance will be a column in <code class="language-plaintext highlighter-rouge">mtcars</code>.</p>

<p><strong><em>A (very) brief note about pipes</em></strong>: Pipes are commonly used in R to chain together multiple functions. There is also a native pipe operator in R <code class="language-plaintext highlighter-rouge">|&gt;</code> (available in versions 4.1.0 and above). In its simplest usage the pipe operator takes the object to its left and passes it to its right as the first argument.</p>

<p>In the example above, the pipe operator takes <code class="language-plaintext highlighter-rouge">mtcars</code> and passes it to the first argument of <code class="language-plaintext highlighter-rouge">dplyr::filter()</code>.</p>

<p><img src="/assets/img/r-basics-dataframes-part-2/img01.png" alt="Image" class="shadow" /></p>

<p>We can write the snippet without pipes, whilst still using <code class="language-plaintext highlighter-rouge">dplyr::filter()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span><span class="w">

</span><span class="c1"># is equivalent to</span><span class="w">

</span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">mtcars</span><span class="p">,</span><span class="w"> </span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span></code></pre></figure>

<p><strong><em>Base or tidy?</em></strong> A natural question to arise whilst learning R is whether to prefer base R or tidy R. As you become comfortable with the language you will likely develop a preference for approaching problems in a certain way and may find that you prefer one framework over another.</p>

<p>However, an either or approach is only likely to lead to problems down the line. Whilst learning the language it is preferable to be exposed to multiple approaches in order that you can understand code written by others and be aware of alternatives if you encounter a challenging problem.</p>

<h2 id="subset--columns-based-on-criteria">Subset  columns based on criteria</h2>

<p>We can select a subset of columns from <code class="language-plaintext highlighter-rouge">mtcars</code> in a few different ways.</p>

<h3 id="subset-columns-using-a-numeric-vector">Subset columns using a numeric vector</h3>

<p>We can select columns using their indices. We don’t need to include <code class="language-plaintext highlighter-rouge">,</code> within <code class="language-plaintext highlighter-rouge">[ ]</code> if we only want columns. However, it doesn’t cause any issues if we do include <code class="language-plaintext highlighter-rouge">,</code>, but it must come <strong><em>before</em></strong> the column indices. If we want to select the first 3 columns of <code class="language-plaintext highlighter-rouge">mtcars</code> we can use a numeric vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      mpg cyl  disp</span><span class="w">
</span><span class="cd">#' Mazda RX4           21.0   6 160.0</span><span class="w">
</span><span class="cd">#' Mazda RX4 Wag       21.0   6 160.0</span><span class="w">
</span><span class="cd">#' Datsun 710          22.8   4 108.0</span><span class="w">
</span><span class="cd">#' Hornet 4 Drive      21.4   6 258.0</span><span class="w">
</span><span class="cd">#' Hornet Sportabout   18.7   8 360.0</span><span class="w">

</span><span class="n">identical</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">],</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="n">identical</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] FALSE</span></code></pre></figure>

<p>You will have noticed in the example above that <code class="language-plaintext highlighter-rouge">mtcars[, 1:3]</code> and <code class="language-plaintext highlighter-rouge">mtcars[1:3]</code> return the same object, but <code class="language-plaintext highlighter-rouge">mtcars[1:3, ]</code> doesn’t. The position of the <code class="language-plaintext highlighter-rouge">,</code> in <code class="language-plaintext highlighter-rouge">mtcars[1:3, ]</code> causes R to extract the first 3 rows, rather than columns.</p>

<h3 id="subset-columns-using-a-character-vector">Subset columns using a character vector</h3>

<p>We can use the column names to access specific columns of <code class="language-plaintext highlighter-rouge">mtcars</code>. The <code class="language-plaintext highlighter-rouge">names()</code> function can be really helpful here and allows us to check the name values that are available.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">names</span><span class="p">(</span><span class="n">mtcars</span><span class="p">)</span><span class="w">
</span><span class="cd">#'  [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"</span></code></pre></figure>

<p>Lets use the column names to extract the <code class="language-plaintext highlighter-rouge">mpg</code>, <code class="language-plaintext highlighter-rouge">cyl</code>, and <code class="language-plaintext highlighter-rouge">hp</code> columns from <code class="language-plaintext highlighter-rouge">mtcars</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="s2">"mpg"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cyl"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hp"</span><span class="p">)]</span><span class="w">
</span><span class="cd">#'                      mpg cyl  hp</span><span class="w">
</span><span class="cd">#' Mazda RX4           21.0   6 110</span><span class="w">
</span><span class="cd">#' Mazda RX4 Wag       21.0   6 110</span><span class="w">
</span><span class="cd">#' Datsun 710          22.8   4  93</span><span class="w">
</span><span class="cd">#' Hornet 4 Drive      21.4   6 110</span><span class="w">
</span><span class="cd">#' Hornet Sportabout   18.7   8 175</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>This approach is effective and straight forward to use, making it an ideal approach for creating subsets of specific columns.</p>

<h3 id="subset-columns-using-a-logical-vector">Subset columns using a logical vector</h3>
<p>Sometimes you may want to select columns in a more dynamic way. Lets say we want a <code class="language-plaintext highlighter-rouge">data.frame</code> consisting of any column from <code class="language-plaintext highlighter-rouge">mtcars</code> with a name that is 2 characters long.</p>

<p>We can first get the number of characters in each of the column names and store the vector as <code class="language-plaintext highlighter-rouge">name_len</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">name_len</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">nchar</span><span class="p">(</span><span class="nf">names</span><span class="p">(</span><span class="n">mtcars</span><span class="p">))</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">name_len</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 3 3 4 2 4 2 4 2 2 4 4</span></code></pre></figure>

<p>We then convert the <code class="language-plaintext highlighter-rouge">name_len</code> numeric vector to logical one.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">name_len</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">name_len</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">name_len</span><span class="p">)</span><span class="w">
 </span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">  </span><span class="kc">TRUE</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="kc">TRUE</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">  </span><span class="kc">TRUE</span><span class="w">  </span><span class="kc">TRUE</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="kc">FALSE</span></code></pre></figure>

<p>Finally, we can use <code class="language-plaintext highlighter-rouge">name_len</code> to select all of the columns from <code class="language-plaintext highlighter-rouge">mtcars</code> with names 2 characters long.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">name_len</span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      hp    wt vs am</span><span class="w">
</span><span class="cd">#' Mazda RX4           110 2.620  0  1</span><span class="w">
</span><span class="cd">#' Mazda RX4 Wag       110 2.875  0  1</span><span class="w">
</span><span class="cd">#' Datsun 710           93 2.320  1  1</span><span class="w">
</span><span class="cd">#' Hornet 4 Drive      110 3.215  1  0</span><span class="w">
</span><span class="cd">#' Hornet Sportabout   175 3.440  0  0</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>As with our examples above, we can also avoid the intermediate steps by refactoring our code into a concise one-liner.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">nchar</span><span class="p">(</span><span class="nf">names</span><span class="p">(</span><span class="n">mtcars</span><span class="p">))</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="cd">#'                      hp    wt vs am</span><span class="w">
</span><span class="cd">#' Mazda RX4           110 2.620  0  1</span><span class="w">
</span><span class="cd">#' Mazda RX4 Wag       110 2.875  0  1</span><span class="w">
</span><span class="cd">#' Datsun 710           93 2.320  1  1</span><span class="w">
</span><span class="cd">#' Hornet 4 Drive      110 3.215  1  0</span><span class="w">
</span><span class="cd">#' Hornet Sportabout   175 3.440  0  0</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<h2 id="subset-rows-and-columns-simultaneously-based-on-criteria">Subset rows and columns simultaneously based on criteria</h2>

<p>We can combine what we have looked at so far to create a subset of both columns and rows from <code class="language-plaintext highlighter-rouge">mtcars</code>. To extract the <code class="language-plaintext highlighter-rouge">mpg</code>, <code class="language-plaintext highlighter-rouge">cyl</code>, and <code class="language-plaintext highlighter-rouge">hp</code> columns from <code class="language-plaintext highlighter-rouge">mtcars</code>, but only keeping rows where <code class="language-plaintext highlighter-rouge">hp</code> is greater than 200, we can combine the <code class="language-plaintext highlighter-rouge">mtcars[mtcars$hp &gt; 200,]</code> and <code class="language-plaintext highlighter-rouge">mtcars[c("mpg", "cyl", "hp")]</code> code snippets we used earlier.</p>

<p>At this point we also need to remember the order in which we specify rows and columns inside <code class="language-plaintext highlighter-rouge">[ ]</code>.</p>

<p><img src="/assets/img/r-basics-dataframes-part-2/img02.png" alt="Image" class="shadow" /></p>

<p>Lets give it a try, providing our row subset criteria followed by our column subset criteria.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mpg"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cyl"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hp"</span><span class="p">)]</span><span class="w">
</span><span class="cd">#'                      mpg cyl  hp</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8 245</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8 205</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8 215</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8 230</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8 245</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<p>We can also select rows based on the values in a column that we don’t want to actually include in our output. For example, if we want the <code class="language-plaintext highlighter-rouge">mpg</code>, <code class="language-plaintext highlighter-rouge">cyl</code>, and <code class="language-plaintext highlighter-rouge">hp</code> columns from <code class="language-plaintext highlighter-rouge">mtcars</code>, where <code class="language-plaintext highlighter-rouge">carb</code> is greater than 4, we don’t actually need to include <code class="language-plaintext highlighter-rouge">carb</code> in our new <code class="language-plaintext highlighter-rouge">data.frame</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"mpg"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cyl"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hp"</span><span class="p">)]</span><span class="w">
</span><span class="cd">#'                mpg cyl  hp</span><span class="w">
</span><span class="cd">#' Ferrari Dino  19.7   6 175</span><span class="w">
</span><span class="cd">#' Maserati Bora 15.0   8 335</span></code></pre></figure>

<h3 id="a-tidy-approach-1">A tidy approach</h3>

<p>Examples of a <code class="language-plaintext highlighter-rouge">tidyverse</code> approach to creating a subset of rows and columns simultaneously.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">cyl</span><span class="p">,</span><span class="w"> </span><span class="n">hp</span><span class="p">)</span><span class="w">
</span><span class="cd">#'                      mpg cyl  hp</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8 245</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8 205</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8 215</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8 230</span><span class="w">
</span><span class="cd">#' Camaro Z28          13.3   8 245</span><span class="w">
</span><span class="cd">#' ...</span><span class="w">

</span><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="n">mpg</span><span class="p">,</span><span class="w"> </span><span class="n">cyl</span><span class="p">,</span><span class="w"> </span><span class="n">hp</span><span class="p">)</span><span class="w">
</span><span class="cd">#'                mpg cyl  hp</span><span class="w">
</span><span class="cd">#' Ferrari Dino  19.7   6 175</span><span class="w">
</span><span class="cd">#' Maserati Bora 15.0   8 335</span></code></pre></figure>

<h2 id="-and--or">&amp; AND | OR</h2>

<p>The logical <code class="language-plaintext highlighter-rouge">&amp;</code> (AND) and <code class="language-plaintext highlighter-rouge">|</code> (OR) operators are very important in any programming language, allowing us to build logic based on multiple conditions. The following examples demonstrate the returns generated by using the logical operators in different situations.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">TRUE</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] FALSE</span><span class="w">

</span><span class="kc">FALSE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] FALSE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">TRUE</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">TRUE</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] FALSE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kc">TRUE</span><span class="w">
</span><span class="cd">#' [1] TRUE</span><span class="w">

</span><span class="kc">FALSE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] FALSE</span><span class="w">

</span><span class="kc">TRUE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">
</span><span class="cd">#' [1] TRUE</span></code></pre></figure>

<p>In one of the examples above we returned rows from <code class="language-plaintext highlighter-rouge">mtcars</code> where the <code class="language-plaintext highlighter-rouge">hp</code> value was greater than 200 and the <code class="language-plaintext highlighter-rouge">carb</code> value was greater than 4. We can combine the separate criteria to return rows where both conditions are <code class="language-plaintext highlighter-rouge">TRUE</code> using the <code class="language-plaintext highlighter-rouge">&amp;</code> operator.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="cd">#'               mpg cyl disp  hp drat   wt qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Maserati Bora  15   8  301 335 3.54 3.57 14.6  0  1    5    8</span></code></pre></figure>

<p>We can also return the rows of <code class="language-plaintext highlighter-rouge">mtcars</code> where either of the conditions are <code class="language-plaintext highlighter-rouge">TRUE</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="cd">#'                      mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><span class="w">
</span><span class="cd">#' Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4</span><span class="w">
</span><span class="cd">#' Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4</span><span class="w">
</span><span class="cd">#' Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4</span><span class="w">
</span><span class="cd">#' Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4</span><span class="w">
</span><span class="cd">#' Maserati Bora       15.0   8  301 335 3.54 3.570 14.60  0  1    5    8</span><span class="w">
</span><span class="cd">#' ...</span></code></pre></figure>

<h2 id="using-a-single-column-from-a-dataframe-subset">Using a single column from a data.frame subset</h2>

<p>We might not always want to create a new <code class="language-plaintext highlighter-rouge">data.frame</code>, perhaps we simply want to know how many rows fulfil a certain criteria. We can use the <code class="language-plaintext highlighter-rouge">nrow()</code> function for this.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">nrow</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="p">,])</span><span class="w">
</span><span class="cd">#' [1] 2</span><span class="w">

</span><span class="n">nrow</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] 1</span><span class="w">

</span><span class="n">nrow</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">4</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] 8</span></code></pre></figure>

<p>We can also apply this approach to more complex problems. If we want to know the mean value of <code class="language-plaintext highlighter-rouge">disp</code> where the value of <code class="language-plaintext highlighter-rouge">carb</code> is greater than 2 and <code class="language-plaintext highlighter-rouge">hp</code> is greater than 200, we could subset <code class="language-plaintext highlighter-rouge">mtcars</code> and then use <code class="language-plaintext highlighter-rouge">mean()</code> on the <code class="language-plaintext highlighter-rouge">disp</code> column.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">new_mtcars</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">new_mtcars</span><span class="o">$</span><span class="n">disp</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">390.5714</span></code></pre></figure>

<p>However, we don’t actually need to go through the assignment step, rather we can access the column directly by placing the <code class="language-plaintext highlighter-rouge">$</code> operator at the end of our subset syntax.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># to return the column as a vector</span><span class="w">
</span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="o">$</span><span class="n">disp</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">360</span><span class="w"> </span><span class="m">472</span><span class="w"> </span><span class="m">460</span><span class="w"> </span><span class="m">440</span><span class="w"> </span><span class="m">350</span><span class="w"> </span><span class="m">351</span><span class="w"> </span><span class="m">301</span><span class="w">

</span><span class="c1"># to calculate the mean of the column</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">mtcars</span><span class="p">[</span><span class="n">mtcars</span><span class="o">$</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mtcars</span><span class="o">$</span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="o">$</span><span class="n">disp</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">390.5714</span></code></pre></figure>

<p><strong><em>Missing commas</em></strong>: There are a few common ‘gotchas’ that tend to come up in this topic area. When using <code class="language-plaintext highlighter-rouge">[ ]</code> with <code class="language-plaintext highlighter-rouge">data.frame</code> objects the most common cause of errors is a misplaced or missing <code class="language-plaintext highlighter-rouge">,</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">//</span><span class="w"> </span><span class="n">specifying</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="n">requires</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">comma</span><span class="p">;</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">comma</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">columns</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="n">which</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">which</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="o">//</span><span class="w"> </span><span class="n">specifying</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="n">only</span><span class="p">;</span><span class="w"> </span><span class="n">no</span><span class="w"> </span><span class="n">comma</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">OR</span><span class="w"> </span><span class="n">comma</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">columns</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="n">which</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="p">]</span><span class="w">   </span><span class="n">OR</span><span class="w">    </span><span class="n">df</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">which</span><span class="w"> </span><span class="n">columns</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="o">//</span><span class="w"> </span><span class="n">specifying</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="n">only</span><span class="w"> </span><span class="n">requires</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">comma</span><span class="p">;</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="n">then</span><span class="w"> </span><span class="n">comma</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="n">which</span><span class="w"> </span><span class="n">rows</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="p">]</span></code></pre></figure>

<p><strong><em>NA values</em></strong>: When using functions like <code class="language-plaintext highlighter-rouge">sum()</code> and <code class="language-plaintext highlighter-rouge">mean()</code> you may encounter situations where you have missing values within the vector you are applying the function to, which results in an output of <code class="language-plaintext highlighter-rouge">NA</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="kc">NA</span><span class="p">,</span><span class="m">5</span><span class="p">))</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="kc">NA</span></code></pre></figure>

<p>Many functions, including <code class="language-plaintext highlighter-rouge">sum()</code> and <code class="language-plaintext highlighter-rouge">mean()</code>, have an argument to allow missing values to be removed from consideration.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="kc">NA</span><span class="p">,</span><span class="m">5</span><span class="p">),</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">11</span></code></pre></figure>

<p>To check the arguments available for a function you can use <code class="language-plaintext highlighter-rouge">?</code> to access the functions documentation, for example <code class="language-plaintext highlighter-rouge">?sum</code>.</p>

<p>There are a few ways to check for missing values in a vector, but a simple one is to use <code class="language-plaintext highlighter-rouge">any()</code> with <code class="language-plaintext highlighter-rouge">is.na()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">any</span><span class="p">(</span><span class="nf">is.na</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="kc">NA</span><span class="p">,</span><span class="m">5</span><span class="p">)))</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="kc">TRUE</span></code></pre></figure>

<h3 id="a-tidy-approach-2">A tidy approach</h3>

<p>Example of a <code class="language-plaintext highlighter-rouge">tidyverse</code> approach to using a single column from a <code class="language-plaintext highlighter-rouge">data.frame</code> subset.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mtcars</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">carb</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">hp</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">200</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">pull</span><span class="p">(</span><span class="n">disp</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">mean</span><span class="w">
</span><span class="cd">#' [1] 390.5714</span></code></pre></figure>

<h2 id="next-steps">Next steps</h2>

<p>Manipulating <code class="language-plaintext highlighter-rouge">data.frame</code> objects is typically a fundamental part of any analytical or statistical workflow using R. The techniques described above are highly flexible and can be easily adapted to form part of a solution to many problems you might encounter.</p>

<p>You will also be starting to see how we can build more complex code from simpler component parts, such as placing code to produce a subset of a <code class="language-plaintext highlighter-rouge">data.frame</code> inside a function, for example <code class="language-plaintext highlighter-rouge">sum(df[df$col_a == "x",]$col_b)</code>.</p>

<p>Practice and experimentation is key in regards to this topic and it is highly recommended that you play around with some data to fully explore it. You can also try some of the tasks below.</p>

<p><code class="language-plaintext highlighter-rouge">airquality</code> is a dataset that comes with R, and is available by default.</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">airquality</code> contains a <code class="language-plaintext highlighter-rouge">Month</code> and <code class="language-plaintext highlighter-rouge">Day</code> column, both of which are numeric (<em>hint</em> January = 1, February = 2, etc). What was the average temperature (<code class="language-plaintext highlighter-rouge">Temp</code>) during the month of July?</p>
  </li>
  <li>
    <p>What was the average wind speed (<code class="language-plaintext highlighter-rouge">Wind</code>) during the first 10 days of the month of June?</p>
  </li>
  <li>
    <p>Calculate the sum of Ozone values from days where the Wind was greater then 10 OR the Temp was greater than 90 (<em>hint</em> <code class="language-plaintext highlighter-rouge">Ozone</code> contains some missing values).</p>
  </li>
</ol>

<details>
  <summary>Answers</summary>
  
  1. 83.90323 <br />

  2. 10.84 <br />

  3. 2273 <br /> 
    
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[In Data Frames Part 1 we looked at creating data.frame objects, accessing their columns, and creating subsets of them using their row and column indices. We also looked at some useful functions for interacting with data.frame objects’s, including ncol(), nrow(), and names(). Working with data frames mtcars is one of a variety of data sets that are included with R and are typically used in tutorials. We can view the first few rows of mtcars to get a feel for the data set using the head() function. head(mtcars) #' mpg cyl disp hp drat wt qsec vs am gear carb #' Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 #' Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 #' Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 #' Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 #' Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 #' Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 The tail() function can also be used to inspect an object and works similarly to head(), returning the last rows of a data.frame. head() and tail() can also be used on individual columns, or in fact any vector, to return the first (or last) few elements. head(mtcars$mpg) #` [1] 21.0 21.0 22.8 21.4 18.7 18.1 You may have noticed that mtcars doesn’t actually have a column containing the car names, rather they are stored as row names. We can check and confirm this using the row.names() function. row.names(mtcars) #' [1] "Mazda RX4" "Mazda RX4 Wag" #' [3] "Datsun 710" "Hornet 4 Drive" #' [5] "Hornet Sportabout" "Valiant" #' ... Subset rows based on criteria We know that we can access a data.frame’s elements using the indices of the rows and columns that we want to include. You can revisit Data Frames Part 1 for a refresher. The position of the row and column indices along with the , are perhaps the most important considerations at this stage, and are the most likely to cause confusion. It is important to take extra care with the syntax initially, but as you gain experience from putting the theory into practice you will find that it quickly becomes more intuitive, for example, knowing that if we don’t include the comma and only pass one index (i.e. df[1]), R will assume that we want a column. As you become more confident with manipulating data.frame objects in this way you can start to advance towards more powerful applications to create specific subsets of data.frame’s. Subset rows using a numeric vector Lets say that we want to extract all of the rows from mtcars for cars with over 200 horsepower. To achieve our goal we could look at mtcars and write down the row numbers where the value in the hp column is greater than 200, which would be rows 7, 15, 16, 17, 24, 29, and 31. Using the index system we are able to create a subset of mtcars containing those rows. mtcars[c(7, 15, 16, 17, 24, 29, 31), ] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 #' ... Note that we have used the c() function to create a vector containing the row numbers, and we have included the , even though we aren’t specifying any columns. If we try to select the rows without including the ,, R will assume we want columns, and since we only have 11 columns will return an error. mtcars[c(7, 15, 16, 17, 24, 29, 31)] #' Error in `[.data.frame`(mtcars, c(7, 15, 16, 17, 24, 29, 31)) : #' undefined columns selected Whilst this approach works, its clearly not very scalable. It requires manually counting the rows we want and would be impractical with larger or more complex data sets. One way to approach the problem in a programmatic way is to use the which() function. hp_200 &lt;- which(mtcars$hp &gt; 200) print(hp_200) #' [1] 7 15 16 17 24 29 31 which(mtcars$hp &gt; 200) has returned the indices of elements with values greater than 200 in the mtcars hp column. We have assigned the output of which() to hp_200, so we can now reuse those values elsewhere, in this case to subset our data.frame. mtcars[hp_200, ] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 #' ... It is possible to skip the step of assigning the output from which() altogether by using the function within [ ] directly. mtcars[which(mtcars$hp &gt; 200),] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 #' ... Subset rows using a logical vector We can also subset mtcars using a logical (TRUE or FALSE) vector. If we run mtcars$hp &gt; 200 we get a logical vector in return, where TRUE indicates that the vector element was greater than 200. mtcars$hp &gt; 200 #' [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE #' [12] FALSE FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE #' [23] FALSE TRUE FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE Logical vectors can be used to subset other vectors and data.frame’s. We can explore this in action with a simple example. my_vector &lt;- c("Alan", "Harry", "Frances", "Polly", "Walt") logical_vector &lt;- c(TRUE, FALSE, TRUE, FALSE, TRUE) my_vector[logical_vector] #' [1] "Alan" "Frances" "Walt" The 1st, 2nd, and 3rd elements of logical_vector are TRUE, so the subset operation keeps the 1st, 2nd, and 3rd elements of my_vector. We can use this approach with mtcars to create the subset data.frame of cars with over 200 hp. mtcars[mtcars$hp &gt; 200, ] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 #' ... R often provides us with lots of ways to do the same thing. Which approach you use will often come down to how the wider project is structured and choosing an approach is something that becomes more intuitive with experience. Considerations such as readability and how obvious the functionality of a piece of code is to a third party, or indeed yourself upon returning to it, are important. For newcomers it is often best to work with the option you find most intuitive, but in essence all of these approaches give you the same output. method_a &lt;- mtcars[c(7, 15, 16, 17, 24, 29, 31), ] method_b &lt;- mtcars[which(mtcars$hp &gt; 200), ] method_c &lt;- mtcars[mtcars$hp &gt; 200, ] identical(method_a, method_b) #' [1] TRUE identical(method_b, method_c) #' [1] TRUE A tidy approach Use of the tidyverse is somewhat ubiquitous in R and the tidy style is now often taught before base R. You will notice that so far we haven’t looked at any tidy functions. Whilst the tidyverse posits itself as being simpler to learn, this isn’t necessarily true. Building a strong understanding of base R will afford you greater flexibility and comprehension of the language when progressing to more advanced usage. With that in mind, it can be useful to see how the examples we have looked at so far might translate into the tidyverse. The example below demonstrates how we could produce a subset data.frame of cars with over 200 hp from mtcars in a tidy fashion. library(dplyr) mtcars %&gt;% dplyr::filter(hp &gt; 200) #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 #' ... You will notice the use of the pipe operator %&gt;% and that the hp column is referred to simply as hp rather than mtcars$hp. The dplyr functions try to be more intuitive by assuming hp in this instance will be a column in mtcars. A (very) brief note about pipes: Pipes are commonly used in R to chain together multiple functions. There is also a native pipe operator in R |&gt; (available in versions 4.1.0 and above). In its simplest usage the pipe operator takes the object to its left and passes it to its right as the first argument. In the example above, the pipe operator takes mtcars and passes it to the first argument of dplyr::filter(). We can write the snippet without pipes, whilst still using dplyr::filter(). mtcars %&gt;% dplyr::filter(hp &gt; 200) # is equivalent to dplyr::filter(mtcars, hp &gt; 200) Base or tidy? A natural question to arise whilst learning R is whether to prefer base R or tidy R. As you become comfortable with the language you will likely develop a preference for approaching problems in a certain way and may find that you prefer one framework over another. However, an either or approach is only likely to lead to problems down the line. Whilst learning the language it is preferable to be exposed to multiple approaches in order that you can understand code written by others and be aware of alternatives if you encounter a challenging problem. Subset columns based on criteria We can select a subset of columns from mtcars in a few different ways. Subset columns using a numeric vector We can select columns using their indices. We don’t need to include , within [ ] if we only want columns. However, it doesn’t cause any issues if we do include ,, but it must come before the column indices. If we want to select the first 3 columns of mtcars we can use a numeric vector. mtcars[1:3] #' mpg cyl disp #' Mazda RX4 21.0 6 160.0 #' Mazda RX4 Wag 21.0 6 160.0 #' Datsun 710 22.8 4 108.0 #' Hornet 4 Drive 21.4 6 258.0 #' Hornet Sportabout 18.7 8 360.0 identical(mtcars[, 1:3], mtcars[1:3]) #' [1] TRUE identical(mtcars[1:3, ], mtcars[1:3]) #' [1] FALSE You will have noticed in the example above that mtcars[, 1:3] and mtcars[1:3] return the same object, but mtcars[1:3, ] doesn’t. The position of the , in mtcars[1:3, ] causes R to extract the first 3 rows, rather than columns. Subset columns using a character vector We can use the column names to access specific columns of mtcars. The names() function can be really helpful here and allows us to check the name values that are available. names(mtcars) #' [1] "mpg" "cyl" "disp" "hp" "drat" "wt" "qsec" "vs" "am" "gear" "carb" Lets use the column names to extract the mpg, cyl, and hp columns from mtcars. mtcars[c("mpg", "cyl", "hp")] #' mpg cyl hp #' Mazda RX4 21.0 6 110 #' Mazda RX4 Wag 21.0 6 110 #' Datsun 710 22.8 4 93 #' Hornet 4 Drive 21.4 6 110 #' Hornet Sportabout 18.7 8 175 #' ... This approach is effective and straight forward to use, making it an ideal approach for creating subsets of specific columns. Subset columns using a logical vector Sometimes you may want to select columns in a more dynamic way. Lets say we want a data.frame consisting of any column from mtcars with a name that is 2 characters long. We can first get the number of characters in each of the column names and store the vector as name_len. name_len &lt;- nchar(names(mtcars)) print(name_len) #' [1] 3 3 4 2 4 2 4 2 2 4 4 We then convert the name_len numeric vector to logical one. name_len &lt;- name_len == 2 print(name_len) [1] FALSE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE Finally, we can use name_len to select all of the columns from mtcars with names 2 characters long. mtcars[name_len] #' hp wt vs am #' Mazda RX4 110 2.620 0 1 #' Mazda RX4 Wag 110 2.875 0 1 #' Datsun 710 93 2.320 1 1 #' Hornet 4 Drive 110 3.215 1 0 #' Hornet Sportabout 175 3.440 0 0 #' ... As with our examples above, we can also avoid the intermediate steps by refactoring our code into a concise one-liner. mtcars[nchar(names(mtcars)) == 2] #' hp wt vs am #' Mazda RX4 110 2.620 0 1 #' Mazda RX4 Wag 110 2.875 0 1 #' Datsun 710 93 2.320 1 1 #' Hornet 4 Drive 110 3.215 1 0 #' Hornet Sportabout 175 3.440 0 0 #' ... Subset rows and columns simultaneously based on criteria We can combine what we have looked at so far to create a subset of both columns and rows from mtcars. To extract the mpg, cyl, and hp columns from mtcars, but only keeping rows where hp is greater than 200, we can combine the mtcars[mtcars$hp &gt; 200,] and mtcars[c("mpg", "cyl", "hp")] code snippets we used earlier. At this point we also need to remember the order in which we specify rows and columns inside [ ]. Lets give it a try, providing our row subset criteria followed by our column subset criteria. mtcars[mtcars$hp &gt; 200, c("mpg", "cyl", "hp")] #' mpg cyl hp #' Duster 360 14.3 8 245 #' Cadillac Fleetwood 10.4 8 205 #' Lincoln Continental 10.4 8 215 #' Chrysler Imperial 14.7 8 230 #' Camaro Z28 13.3 8 245 #' ... We can also select rows based on the values in a column that we don’t want to actually include in our output. For example, if we want the mpg, cyl, and hp columns from mtcars, where carb is greater than 4, we don’t actually need to include carb in our new data.frame. mtcars[mtcars$carb &gt; 4, c("mpg", "cyl", "hp")] #' mpg cyl hp #' Ferrari Dino 19.7 6 175 #' Maserati Bora 15.0 8 335 A tidy approach Examples of a tidyverse approach to creating a subset of rows and columns simultaneously. library(dplyr) mtcars %&gt;% dplyr::filter(hp &gt; 200) %&gt;% dplyr::select(mpg, cyl, hp) #' mpg cyl hp #' Duster 360 14.3 8 245 #' Cadillac Fleetwood 10.4 8 205 #' Lincoln Continental 10.4 8 215 #' Chrysler Imperial 14.7 8 230 #' Camaro Z28 13.3 8 245 #' ... mtcars %&gt;% dplyr::filter(carb &gt; 4) %&gt;% dplyr::select(mpg, cyl, hp) #' mpg cyl hp #' Ferrari Dino 19.7 6 175 #' Maserati Bora 15.0 8 335 &amp; AND | OR The logical &amp; (AND) and | (OR) operators are very important in any programming language, allowing us to build logic based on multiple conditions. The following examples demonstrate the returns generated by using the logical operators in different situations. TRUE &amp; TRUE #' [1] TRUE TRUE &amp; FALSE #' [1] FALSE FALSE &amp; FALSE #' [1] FALSE TRUE &amp; TRUE &amp; TRUE #' [1] TRUE TRUE &amp; TRUE &amp; FALSE #' [1] FALSE TRUE | FALSE #' [1] TRUE TRUE | TRUE #' [1] TRUE FALSE | FALSE #' [1] FALSE TRUE | FALSE | FALSE #' [1] TRUE In one of the examples above we returned rows from mtcars where the hp value was greater than 200 and the carb value was greater than 4. We can combine the separate criteria to return rows where both conditions are TRUE using the &amp; operator. mtcars[mtcars$carb &gt; 4 &amp; mtcars$hp &gt; 200, ] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Maserati Bora 15 8 301 335 3.54 3.57 14.6 0 1 5 8 We can also return the rows of mtcars where either of the conditions are TRUE. mtcars[mtcars$carb &gt; 4 | mtcars$hp &gt; 200, ] #' mpg cyl disp hp drat wt qsec vs am gear carb #' Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 #' Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 #' Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 #' Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 #' Maserati Bora 15.0 8 301 335 3.54 3.570 14.60 0 1 5 8 #' ... Using a single column from a data.frame subset We might not always want to create a new data.frame, perhaps we simply want to know how many rows fulfil a certain criteria. We can use the nrow() function for this. nrow(mtcars[mtcars$carb &gt; 4,]) #' [1] 2 nrow(mtcars[mtcars$carb &gt; 4 &amp; mtcars$hp &gt; 200, ]) #' [1] 1 nrow(mtcars[mtcars$carb &gt; 4 | mtcars$hp &gt; 200, ]) #' [1] 8 We can also apply this approach to more complex problems. If we want to know the mean value of disp where the value of carb is greater than 2 and hp is greater than 200, we could subset mtcars and then use mean() on the disp column. new_mtcars &lt;- mtcars[mtcars$carb &gt; 2 &amp; mtcars$hp &gt; 200, ] mean(new_mtcars$disp) [1] 390.5714 However, we don’t actually need to go through the assignment step, rather we can access the column directly by placing the $ operator at the end of our subset syntax. # to return the column as a vector mtcars[mtcars$carb &gt; 2 &amp; mtcars$hp &gt; 200, ]$disp [1] 360 472 460 440 350 351 301 # to calculate the mean of the column mean(mtcars[mtcars$carb &gt; 2 &amp; mtcars$hp &gt; 200, ]$disp) [1] 390.5714 Missing commas: There are a few common ‘gotchas’ that tend to come up in this topic area. When using [ ] with data.frame objects the most common cause of errors is a misplaced or missing ,. // specifying rows and columns requires a comma; rows then comma then columns df [ which rows , which columns ] // specifying columns only; no comma required OR comma then columns df [ which columns ] OR df [ , which columns ] // specifying rows only requires a comma; rows then comma df [ which rows , ] NA values: When using functions like sum() and mean() you may encounter situations where you have missing values within the vector you are applying the function to, which results in an output of NA. sum(c(1,2,3,NA,5)) [1] NA Many functions, including sum() and mean(), have an argument to allow missing values to be removed from consideration. sum(c(1,2,3,NA,5), na.rm = TRUE) [1] 11 To check the arguments available for a function you can use ? to access the functions documentation, for example ?sum. There are a few ways to check for missing values in a vector, but a simple one is to use any() with is.na(). any(is.na(c(1,2,3,NA,5))) [1] TRUE A tidy approach Example of a tidyverse approach to using a single column from a data.frame subset. mtcars %&gt;% dplyr::filter(carb &gt; 2 &amp; hp &gt; 200) %&gt;% dplyr::pull(disp) %&gt;% mean #' [1] 390.5714 Next steps Manipulating data.frame objects is typically a fundamental part of any analytical or statistical workflow using R. The techniques described above are highly flexible and can be easily adapted to form part of a solution to many problems you might encounter. You will also be starting to see how we can build more complex code from simpler component parts, such as placing code to produce a subset of a data.frame inside a function, for example sum(df[df$col_a == "x",]$col_b). Practice and experimentation is key in regards to this topic and it is highly recommended that you play around with some data to fully explore it. You can also try some of the tasks below. airquality is a dataset that comes with R, and is available by default. airquality contains a Month and Day column, both of which are numeric (hint January = 1, February = 2, etc). What was the average temperature (Temp) during the month of July? What was the average wind speed (Wind) during the first 10 days of the month of June? Calculate the sum of Ozone values from days where the Wind was greater then 10 OR the Temp was greater than 90 (hint Ozone contains some missing values). Answers 1. 83.90323 2. 10.84 3. 2273]]></summary></entry><entry><title type="html">R Basics - Data Frames Part 1</title><link href="http://0.0.0.0:4000/2022/10/05/r-basics-dataframes-part-1.html" rel="alternate" type="text/html" title="R Basics - Data Frames Part 1" /><published>2022-10-05T00:00:00+01:00</published><updated>2022-10-05T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2022/10/05/r-basics-dataframes-part-1</id><content type="html" xml:base="http://0.0.0.0:4000/2022/10/05/r-basics-dataframes-part-1.html"><![CDATA[<p>Data frames are a fundamental part of R and the functionality they provide plays an integral role in many analysis and data science based workflows. Data frames are rectangular, 2 dimensional table structures, resembling rows and columns which makes them flexible and intuitive to work with.</p>

<h2 id="creating-a-dataframe">Creating a data.frame</h2>
<p>Many functions commonly used to read tabular data into R will by default return a <code class="language-plaintext highlighter-rouge">data.frame</code>. We can also use the ``data.frame<code class="language-plaintext highlighter-rouge">()</code> function to create a <code class="language-plaintext highlighter-rouge">data.frame</code> with any number of columns. Imagine that you have the names, ages, and postcodes of 5 people. A <code class="language-plaintext highlighter-rouge">data.frame</code> with 5 rows and 3 columns would be an ideal way to store this information.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.frame</span><span class="p">(</span><span class="w">
  </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Frances"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Polly"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Walt"</span><span class="p">),</span><span class="w">
  </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">34</span><span class="p">,</span><span class="w"> </span><span class="m">78</span><span class="p">,</span><span class="w"> </span><span class="m">45</span><span class="p">,</span><span class="w"> </span><span class="m">21</span><span class="p">),</span><span class="w">
  </span><span class="n">postcode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"ab123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cd123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ef123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gh123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ij123a"</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
  
</span><span class="cd">#'      name  age postcode</span><span class="w">
</span><span class="cd">#' 1    Alan   48   ab123a</span><span class="w">
</span><span class="cd">#' 2   Harry   34   cd123a</span><span class="w">
</span><span class="cd">#' 3 Frances   78   ef123a</span><span class="w">
</span><span class="cd">#' 4   Polly   45   gh123a</span><span class="w">
</span><span class="cd">#' 5    Walt   21   ij123a</span></code></pre></figure>

<p>The only constraint when creating a <code class="language-plaintext highlighter-rouge">data.frame</code> is that the columns must be of the same length, otherwise an error is returned.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">),</span><span class="w">
    </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">34</span><span class="p">,</span><span class="w"> </span><span class="m">78</span><span class="p">,</span><span class="w"> </span><span class="m">45</span><span class="p">,</span><span class="w"> </span><span class="m">21</span><span class="p">),</span><span class="w">
    </span><span class="n">postcode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"ab123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cd123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ef123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gh123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ij123a"</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="cd">#' Error in data.frame(name = c("Alan", "Harry"), age = c(48, 34, 78, 45,  : </span><span class="w">
</span><span class="cd">#'   arguments imply differing number of rows: 2, 5</span></code></pre></figure>

<p>Each column of a <code class="language-plaintext highlighter-rouge">data.frame</code> is actually a vector, so we can also construct a <code class="language-plaintext highlighter-rouge">data.frame</code> from vectors, as long as they are of equal length.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">name_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Alan"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Harry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Frances"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Polly"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Walt"</span><span class="p">)</span><span class="w">
</span><span class="n">age_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">34</span><span class="p">,</span><span class="w"> </span><span class="m">78</span><span class="p">,</span><span class="w"> </span><span class="m">45</span><span class="p">,</span><span class="w"> </span><span class="m">21</span><span class="p">)</span><span class="w">
</span><span class="n">postcode_vector</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"ab123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cd123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ef123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"gh123a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ij123a"</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">`data.frame`</span><span class="p">(</span><span class="w">
  </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">name_vector</span><span class="p">,</span><span class="w">
  </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">age_vector</span><span class="p">,</span><span class="w">
  </span><span class="n">postcode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">postcode_vector</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'      name  age postcode</span><span class="w">
</span><span class="cd">#' 1    Alan   48   ab123a</span><span class="w">
</span><span class="cd">#' 2   Harry   34   cd123a</span><span class="w">
</span><span class="cd">#' 3 Frances   78   ef123a</span><span class="w">
</span><span class="cd">#' 4   Polly   45   gh123a</span><span class="w">
</span><span class="cd">#' 5    Walt   21   ij123a</span></code></pre></figure>

<h2 id="dataframe-columns">data.frame columns</h2>
<p>As <code class="language-plaintext highlighter-rouge">data.frame</code> columns are vectors we can access them and use them inside functions that accept vectors. There are a few different ways to access a <code class="language-plaintext highlighter-rouge">data.frame</code> column, but the 3 most common are;</p>

<ol>
  <li>Using the <code class="language-plaintext highlighter-rouge">$</code> operator.</li>
  <li>Using the index.</li>
  <li>Using the column name.</li>
</ol>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># using $</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="w">
</span><span class="cd">#' [1] 48 34 78 45 21</span><span class="w">

</span><span class="c1"># using the index</span><span class="w">
</span><span class="n">df</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="cd">#'   age</span><span class="w">
</span><span class="cd">#' 1  48</span><span class="w">
</span><span class="cd">#' 2  34</span><span class="w">
</span><span class="cd">#' 3  78</span><span class="w">
</span><span class="cd">#' 4  45</span><span class="w">
</span><span class="cd">#' 5  21</span><span class="w">

</span><span class="c1"># using the column name</span><span class="w">
</span><span class="n">df</span><span class="p">[</span><span class="s2">"age"</span><span class="p">]</span><span class="w">
</span><span class="cd">#'   age</span><span class="w">
</span><span class="cd">#' 1  48</span><span class="w">
</span><span class="cd">#' 2  34</span><span class="w">
</span><span class="cd">#' 3  78</span><span class="w">
</span><span class="cd">#' 4  45</span><span class="w">
</span><span class="cd">#' 5  21</span></code></pre></figure>

<p>You will notice that options 2 &amp; 3 returned the column in a different format. Using <code class="language-plaintext highlighter-rouge">$</code> stripped the column of it’s <code class="language-plaintext highlighter-rouge">data.frame</code> attributes, whereas the other methods retained them. You can check this by using <code class="language-plaintext highlighter-rouge">typeof()</code> and <code class="language-plaintext highlighter-rouge">attributes()</code> on <code class="language-plaintext highlighter-rouge">df$age</code> and <code class="language-plaintext highlighter-rouge">df["age"]</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">typeof</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "double"</span><span class="w">

</span><span class="n">typeof</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s2">"age"</span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] "list"</span><span class="w">

</span><span class="nf">attributes</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">)</span><span class="w">
</span><span class="cd">#' NULL</span><span class="w">

</span><span class="nf">attributes</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s2">"age"</span><span class="p">])</span><span class="w">
</span><span class="cd">#' $names</span><span class="w">
</span><span class="cd">#' [1] "age"</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $row.names</span><span class="w">
</span><span class="cd">#' [1] 1 2 3 4 5</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="cd">#' $class</span><span class="w">
</span><span class="cd">#' [1] "data.frame"</span></code></pre></figure>

<p>The output of <code class="language-plaintext highlighter-rouge">typeof(df["age"])</code> may have surprised you slightly. Beneath the surface, <code class="language-plaintext highlighter-rouge">data.frame</code>’s are actually list objects with each column forming an element of the list.</p>

<p>For now, we will focus on using the <code class="language-plaintext highlighter-rouge">$</code> operator to access columns. The other options can be useful at times, though as a general rule try to avoid option 2 (<code class="language-plaintext highlighter-rouge">df[2]</code>). Specifying column names explicitly makes your code simpler to comprehend,improves reproducibility, and helps to reduce errors if your data changes.</p>

<p>Accessing a column allows us to use it as we would any other vector. We can get the sum and mean of the age column with the appropriate functions.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 226</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 45.2</span></code></pre></figure>

<p>We can also subset a column accessed with the <code class="language-plaintext highlighter-rouge">$</code> operator using the index system.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># get the 1st element of df$age</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">

</span><span class="cd">#' [1] 48</span><span class="w">

</span><span class="c1"># get the 1st 3 elements of df$age</span><span class="w">
</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">]</span><span class="w">

</span><span class="cd">#' [1] 48 34 78</span><span class="w">

</span><span class="c1"># get the last 3 elements of df$age programmatically</span><span class="w">
</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">age</span><span class="p">[(</span><span class="n">len</span><span class="m">-2</span><span class="p">)</span><span class="o">:</span><span class="n">len</span><span class="p">]</span><span class="w">

</span><span class="cd">#' [1] 78 45 21</span></code></pre></figure>

<h2 id="dataframe-subsets">data.frame subsets</h2>
<p>We can also create subsets of <code class="language-plaintext highlighter-rouge">data.frame</code>’s using indices. With <code class="language-plaintext highlighter-rouge">data.frame</code>’s, two indices are provided, the first for the rows and the second for the columns. Blank indices are also acceptable, as long as they are separated with <code class="language-plaintext highlighter-rouge">,</code>.</p>

<p>Each individual element in a <code class="language-plaintext highlighter-rouge">data.frame</code> has 2 indices.</p>

<p><img src="/assets/img/r-basics-dataframes-part-1/img02.png" alt="Image" class="shadow" /></p>

<p>The below examples show how the index system can be used to access various elements in our <code class="language-plaintext highlighter-rouge">data.frame</code>.</p>

<p><img src="/assets/img/r-basics-dataframes-part-1/img01.png" alt="Image" class="shadow" /></p>

<h2 id="functions-for-dataframes">Functions for data.frame’s</h2>

<p>When working with vectors we can check their length using the <code class="language-plaintext highlighter-rouge">length()</code> function. Given that all columns of a <code class="language-plaintext highlighter-rouge">data.frame</code> are vectors of equal length we could use <code class="language-plaintext highlighter-rouge">length()</code> on any column, however, it is more convenient to use the <code class="language-plaintext highlighter-rouge">nrow()</code> function to identify the number of rows.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">nrow</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="cd">#' [1] 5</span></code></pre></figure>

<p>Some other useful functions for interacting with <code class="language-plaintext highlighter-rouge">data.frame</code>’s include <code class="language-plaintext highlighter-rouge">ncol()</code>, used to get the number of columns, and <code class="language-plaintext highlighter-rouge">names()</code>, which provides the names of the <code class="language-plaintext highlighter-rouge">data.frame</code>’s columns.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">ncol</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="cd">#' [1] 3</span><span class="w">

</span><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">

</span><span class="cd">#' [1] "name"     "age"     </span><span class="w">
</span><span class="cd">#' [3] "postcode"</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">names()</code> function can also be used to change the names of columns.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">names</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"first_name"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cur_age"</span><span class="p">,</span><span class="w"> </span><span class="s2">"pcode"</span><span class="p">)</span><span class="w">

</span><span class="cd">#'   first_name cur_age  pcode</span><span class="w">
</span><span class="cd">#' 1       Alan      48 ab123a</span><span class="w">
</span><span class="cd">#' 2      Harry      34 cd123a</span><span class="w">
</span><span class="cd">#' 3    Frances      78 ef123a</span><span class="w">
</span><span class="cd">#' 4      Polly      45 gh123a</span><span class="w">
</span><span class="cd">#' 5       Walt      21 ij123a</span></code></pre></figure>

<h2 id="next-steps">Next steps</h2>

<p><code class="language-plaintext highlighter-rouge">data.frame</code>’s are one of the most useful data structures in R and the fact that this functionality is built into the language is one of the reasons that R is an excellent choice for statistics, analysis, and data science.</p>

<p>To put some of the key points above into practice, try the following tasks.</p>

<p>Try creating a <code class="language-plaintext highlighter-rouge">data.frame</code> named “my_df” with 3 columns named “col_a”, “col_b”, and “col_c”.</p>

<p>“col_a” should contain the first 10 letters of the alphabet as individual elements.</p>

<p>“col_b” should contain the numbers 1 to 10.</p>

<p>“col_c” should contain the numbers 11 to 20, but in reverse.</p>

<p>Your resulting <code class="language-plaintext highlighter-rouge">data.frame</code> should look like this;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">my_df</span><span class="p">)</span><span class="w">
</span><span class="cd">#'    col_a col_b col_c</span><span class="w">
</span><span class="cd">#' 1      a     1    20</span><span class="w">
</span><span class="cd">#' 2      b     2    19</span><span class="w">
</span><span class="cd">#' 3      c     3    18</span><span class="w">
</span><span class="cd">#' 4      d     4    17</span><span class="w">
</span><span class="cd">#' 5      e     5    16</span><span class="w">
</span><span class="cd">#' 6      f     6    15</span><span class="w">
</span><span class="cd">#' 7      g     7    14</span><span class="w">
</span><span class="cd">#' 8      h     8    13</span><span class="w">
</span><span class="cd">#' 9      i     9    12</span><span class="w">
</span><span class="cd">#' 10     j    10    11</span></code></pre></figure>

<ol>
  <li>
    <p>What is the product of the sum of col_b and col_c?</p>
  </li>
  <li>
    <p>What is the sum of all values in col_b and col_c?</p>
  </li>
  <li>
    <p>What is the sum of all values in col_b and col_c, but considering only the first 5 rows of my_df?</p>
  </li>
</ol>

<details>
  <summary>Answers</summary>
  
  1. 8525 <br />
    
  2. 210 <br />
    
  3. 105 <br />
    
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[Data frames are a fundamental part of R and the functionality they provide plays an integral role in many analysis and data science based workflows. Data frames are rectangular, 2 dimensional table structures, resembling rows and columns which makes them flexible and intuitive to work with. Creating a data.frame Many functions commonly used to read tabular data into R will by default return a data.frame. We can also use the ``data.frame() function to create a data.frame with any number of columns. Imagine that you have the names, ages, and postcodes of 5 people. A data.frame with 5 rows and 3 columns would be an ideal way to store this information. data.frame( name = c("Alan", "Harry", "Frances", "Polly", "Walt"), age = c(48, 34, 78, 45, 21), postcode = c("ab123a", "cd123a", "ef123a", "gh123a", "ij123a") ) #' name age postcode #' 1 Alan 48 ab123a #' 2 Harry 34 cd123a #' 3 Frances 78 ef123a #' 4 Polly 45 gh123a #' 5 Walt 21 ij123a The only constraint when creating a data.frame is that the columns must be of the same length, otherwise an error is returned. data.frame( name = c("Alan", "Harry"), age = c(48, 34, 78, 45, 21), postcode = c("ab123a", "cd123a", "ef123a", "gh123a", "ij123a") ) #' Error in data.frame(name = c("Alan", "Harry"), age = c(48, 34, 78, 45, : #' arguments imply differing number of rows: 2, 5 Each column of a data.frame is actually a vector, so we can also construct a data.frame from vectors, as long as they are of equal length. name_vector &lt;- c("Alan", "Harry", "Frances", "Polly", "Walt") age_vector &lt;- c(48, 34, 78, 45, 21) postcode_vector &lt;- c("ab123a", "cd123a", "ef123a", "gh123a", "ij123a") df &lt;- `data.frame`( name = name_vector, age = age_vector, postcode = postcode_vector ) print(df) #' name age postcode #' 1 Alan 48 ab123a #' 2 Harry 34 cd123a #' 3 Frances 78 ef123a #' 4 Polly 45 gh123a #' 5 Walt 21 ij123a data.frame columns As data.frame columns are vectors we can access them and use them inside functions that accept vectors. There are a few different ways to access a data.frame column, but the 3 most common are; Using the $ operator. Using the index. Using the column name. # using $ df$age #' [1] 48 34 78 45 21 # using the index df[2] #' age #' 1 48 #' 2 34 #' 3 78 #' 4 45 #' 5 21 # using the column name df["age"] #' age #' 1 48 #' 2 34 #' 3 78 #' 4 45 #' 5 21 You will notice that options 2 &amp; 3 returned the column in a different format. Using $ stripped the column of it’s data.frame attributes, whereas the other methods retained them. You can check this by using typeof() and attributes() on df$age and df["age"]. typeof(df$age) #' [1] "double" typeof(df["age"]) #' [1] "list" attributes(df$age) #' NULL attributes(df["age"]) #' $names #' [1] "age" #' #' $row.names #' [1] 1 2 3 4 5 #' #' $class #' [1] "data.frame" The output of typeof(df["age"]) may have surprised you slightly. Beneath the surface, data.frame’s are actually list objects with each column forming an element of the list. For now, we will focus on using the $ operator to access columns. The other options can be useful at times, though as a general rule try to avoid option 2 (df[2]). Specifying column names explicitly makes your code simpler to comprehend,improves reproducibility, and helps to reduce errors if your data changes. Accessing a column allows us to use it as we would any other vector. We can get the sum and mean of the age column with the appropriate functions. sum(df$age) #' [1] 226 mean(df$age) #' [1] 45.2 We can also subset a column accessed with the $ operator using the index system. # get the 1st element of df$age df$age[1] #' [1] 48 # get the 1st 3 elements of df$age df$age[1:3] #' [1] 48 34 78 # get the last 3 elements of df$age programmatically len &lt;- length(df$age) df$age[(len-2):len] #' [1] 78 45 21 data.frame subsets We can also create subsets of data.frame’s using indices. With data.frame’s, two indices are provided, the first for the rows and the second for the columns. Blank indices are also acceptable, as long as they are separated with ,. Each individual element in a data.frame has 2 indices. The below examples show how the index system can be used to access various elements in our data.frame. Functions for data.frame’s When working with vectors we can check their length using the length() function. Given that all columns of a data.frame are vectors of equal length we could use length() on any column, however, it is more convenient to use the nrow() function to identify the number of rows. nrow(df) #' [1] 5 Some other useful functions for interacting with data.frame’s include ncol(), used to get the number of columns, and names(), which provides the names of the data.frame’s columns. ncol(df) #' [1] 3 names(df) #' [1] "name" "age" #' [3] "postcode" The names() function can also be used to change the names of columns. names(df) &lt;- c("first_name", "cur_age", "pcode") #' first_name cur_age pcode #' 1 Alan 48 ab123a #' 2 Harry 34 cd123a #' 3 Frances 78 ef123a #' 4 Polly 45 gh123a #' 5 Walt 21 ij123a Next steps data.frame’s are one of the most useful data structures in R and the fact that this functionality is built into the language is one of the reasons that R is an excellent choice for statistics, analysis, and data science. To put some of the key points above into practice, try the following tasks. Try creating a data.frame named “my_df” with 3 columns named “col_a”, “col_b”, and “col_c”. “col_a” should contain the first 10 letters of the alphabet as individual elements. “col_b” should contain the numbers 1 to 10. “col_c” should contain the numbers 11 to 20, but in reverse. Your resulting data.frame should look like this; print(my_df) #' col_a col_b col_c #' 1 a 1 20 #' 2 b 2 19 #' 3 c 3 18 #' 4 d 4 17 #' 5 e 5 16 #' 6 f 6 15 #' 7 g 7 14 #' 8 h 8 13 #' 9 i 9 12 #' 10 j 10 11 What is the product of the sum of col_b and col_c? What is the sum of all values in col_b and col_c? What is the sum of all values in col_b and col_c, but considering only the first 5 rows of my_df? Answers 1. 8525 2. 210 3. 105]]></summary></entry><entry><title type="html">R Basics - Vectors</title><link href="http://0.0.0.0:4000/2022/09/28/r-basics-vectors.html" rel="alternate" type="text/html" title="R Basics - Vectors" /><published>2022-09-28T00:00:00+01:00</published><updated>2022-09-28T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2022/09/28/r-basics-vectors</id><content type="html" xml:base="http://0.0.0.0:4000/2022/09/28/r-basics-vectors.html"><![CDATA[<p>In R, a vector is a series of elements with the same type. There are 4 important types to be aware of, that you will commonly encounter;</p>

<ul>
  <li>Character</li>
  <li>Logical</li>
  <li>Double</li>
  <li>Integer</li>
</ul>

<h2 id="atomic-vectors">Atomic vectors</h2>

<p>You may hear these being referred to as atomic vectors. It’s also useful to note that the term ‘numeric’ is often used interchangeably for both double and integer types.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># a character type vector</span><span class="w">
</span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"e"</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "a" "b" "c" "d" "e"</span><span class="w">

</span><span class="c1"># a logical type vector</span><span class="w">
</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1]  TRUE FALSE FALSE  TRUE  TRUE</span><span class="w">

</span><span class="c1"># a double type vector</span><span class="w">
</span><span class="nf">c</span><span class="p">(</span><span class="m">1.2</span><span class="p">,</span><span class="w"> </span><span class="m">4.9</span><span class="p">,</span><span class="w"> </span><span class="m">2.1</span><span class="p">,</span><span class="w"> </span><span class="m">6.3</span><span class="p">,</span><span class="w"> </span><span class="m">1.7</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1.2 4.9 2.1 6.3 1.7</span><span class="w">

</span><span class="c1"># an integer type vector</span><span class="w">
</span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 1 2 3 4 5</span></code></pre></figure>

<h3 id="c">c()</h3>

<p><code class="language-plaintext highlighter-rouge">c()</code> is a built-in R function that combines the elements it is passed into a vector. You can provide any number of elements to <code class="language-plaintext highlighter-rouge">c()</code>.</p>

<p>It is important to be aware that <code class="language-plaintext highlighter-rouge">c()</code> coerces elements to a common type. This is a common occurrence in R and understanding the implications can help to avoid errors. R is what is referred to as a weakly typed language, this means that sometimes a type will be coerced into another when code is executed.</p>

<p>Thinking of the 4 common types in R, type coercion is performed according to a hierarchy;</p>

<p><code class="language-plaintext highlighter-rouge">Logical &gt;&gt;&gt; Integer &gt;&gt;&gt; Double &gt;&gt;&gt; Character</code></p>

<p>You can test how this works using <code class="language-plaintext highlighter-rouge">typeof()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># logical and double coerced to double</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="m">1.5</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] "double"</span><span class="w">

</span><span class="c1"># integer and double coerced to double</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">1.5</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] "double"</span><span class="w">

</span><span class="c1"># logical and character coerced to character</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="s2">"a"</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] "character"</span><span class="w">

</span><span class="c1"># logical, integer, double, and character coerced to character</span><span class="w">
</span><span class="n">typeof</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">1.5</span><span class="p">,</span><span class="w"> </span><span class="s2">"a"</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] "character"</span></code></pre></figure>

<h3 id="assignment">Assignment</h3>

<p>In order to be able to refer to or use an object in R after it’s creation, we first need to assign it a name. The R assignment operator <code class="language-plaintext highlighter-rouge">&lt;-</code> is the best way of achieving this. It is also possible to use <code class="language-plaintext highlighter-rouge">=</code> exclusively for this task, however, this goes against the community consensus so should be avoided.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">my_value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"assign this string to my_value"</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">my_value</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] "assign this string to my_value"</span></code></pre></figure>

<h3 id="functions---arguments-and-use">Functions - arguments and use</h3>

<p>In R we use functions extensively, in their simplest form a function takes inputs (referred to as arguments) and returns an output. The <code class="language-plaintext highlighter-rouge">sum()</code> function returns the sum of all the values present in its arguments.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] 15</span></code></pre></figure>

<p>Most functions allow for more than one argument, <code class="language-plaintext highlighter-rouge">sum()</code> for example has an argument <code class="language-plaintext highlighter-rouge">na.rm</code>. The <code class="language-plaintext highlighter-rouge">na.rm</code> argument accepts a logical (<code class="language-plaintext highlighter-rouge">TRUE</code> or <code class="language-plaintext highlighter-rouge">FALSE</code>) value. Setting the argument to <code class="language-plaintext highlighter-rouge">TRUE</code> will remove missing values.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">))</span><span class="w">
</span><span class="cd">#' [1] NA</span><span class="w">

</span><span class="nf">sum</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">),</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 12</span></code></pre></figure>

<h2 id="indicies-in-r">Indicies in R</h2>

<p>In R indices start at 1. Its useful to know that you can define a range of numbers using the <code class="language-plaintext highlighter-rouge">:</code> operator. Instead of writing <code class="language-plaintext highlighter-rouge">c(1, 2, 3, 4, 5)</code> to generate a vector of the numbers 1 to 5, you can write <code class="language-plaintext highlighter-rouge">1:5</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">t1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w"> </span><span class="m">3L</span><span class="p">,</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w"> </span><span class="m">5L</span><span class="p">)</span><span class="w">

</span><span class="n">t2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="w">

</span><span class="n">identical</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="w"> </span><span class="n">t2</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] TRUE</span></code></pre></figure>

<p>You can use the index system to access elements of a vector. <code class="language-plaintext highlighter-rouge">letters</code> is a constant built into R, it is in effect a vector of the letters of the alphabet in lower case.</p>

<p>To access a single element of a vector, for example the 13th letter of the alphabet, you can use the index system.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="m">13</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "m"</span></code></pre></figure>

<p>If you want to get the first 5 letters of the alphabet you can also use the index system with a range.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "a" "b" "c" "d" "e"</span></code></pre></figure>

<p>The next 5 letters can be accessed in the same way.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="m">6</span><span class="o">:</span><span class="m">10</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "f" "g" "h" "i" "j"</span></code></pre></figure>

<p>To get the 2nd, 4th, and 6th letters of the alphabet, you can use <code class="language-plaintext highlighter-rouge">c()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="m">6</span><span class="p">)]</span><span class="w">
</span><span class="cd">#' [1] "b" "d" "f"</span></code></pre></figure>

<p>If you need to know the length of a vector, the <code class="language-plaintext highlighter-rouge">length()</code> function is particularly useful.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">length</span><span class="p">(</span><span class="nb">letters</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 26</span></code></pre></figure>

<p>Knowing how to check the length of a vector can be quite useful, it allows you to do things like get everything after the 20th element (inclusive), or even the last 5 elements.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="m">20</span><span class="o">:</span><span class="nf">length</span><span class="p">(</span><span class="nb">letters</span><span class="p">)]</span><span class="w">
</span><span class="cd">#' [1] "t" "u" "v" "w" "x" "y" "z"</span><span class="w">

</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="nb">letters</span><span class="p">)</span><span class="w">

</span><span class="nb">letters</span><span class="p">[(</span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="o">:</span><span class="n">len</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "v" "w" "x" "y" "z"</span></code></pre></figure>

<p>You can also use indexing to change the order of the elements returned, for example you can return the first 5 letters of the alphabet in reverse order.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="m">5</span><span class="o">:</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "e" "d" "c" "b" "a"</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">which()</code> function returns the indices of a vector that evaluate to <code class="language-plaintext highlighter-rouge">TRUE</code>. You can use it to find the index of <code class="language-plaintext highlighter-rouge">j</code> in the <code class="language-plaintext highlighter-rouge">letters</code> constant.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">which</span><span class="p">(</span><span class="nb">letters</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"j"</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 10</span></code></pre></figure>

<p>You can also use <code class="language-plaintext highlighter-rouge">which()</code> to create a subset from the letters vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="nb">letters</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"j"</span><span class="p">)]</span><span class="w">
</span><span class="cd">#' [1] "j"</span></code></pre></figure>

<p>However, the which function is actually unnecessary here, as it’s much simpler to do;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nb">letters</span><span class="p">[</span><span class="nb">letters</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"j"</span><span class="p">]</span><span class="w">
</span><span class="cd">#' [1] "j"</span></code></pre></figure>

<h2 id="working-with-vectors">Working with vectors</h2>

<p>The <code class="language-plaintext highlighter-rouge">Nile</code> data-set, a time-series of length 100, is bundled with R. It provides measurements of the annual flow of the river Nile at Aswan between 1871 and 1970.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">print</span><span class="p">(</span><span class="n">Nile</span><span class="p">)</span><span class="w">
</span><span class="cd">#' Time Series:</span><span class="w">
</span><span class="cd">#' Start = 1871 </span><span class="w">
</span><span class="cd">#' End = 1970 </span><span class="w">
</span><span class="cd">#' Frequency = 1 </span><span class="w">
</span><span class="cd">#'   [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110</span><span class="w">
</span><span class="cd">#'  [14]  994 1020  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220</span><span class="w">
</span><span class="cd">#'  [27] 1030 1100  774  840  874  694  940  833  701  916  692 1020 1050</span><span class="w">
</span><span class="cd">#'  [40]  969  831  726  456  824  702 1120 1100  832  764  821  768  845</span><span class="w">
</span><span class="cd">#'  [53]  864  862  698  845  744  796 1040  759  781  865  845  944  984</span><span class="w">
</span><span class="cd">#'  [66]  897  822 1010  771  676  649  846  812  742  801 1040  860  874</span><span class="w">
</span><span class="cd">#'  [79]  848  890  744  749  838 1050  918  986  797  923  975  815 1020</span><span class="w">
</span><span class="cd">#'  [92]  906  901 1170  912  746  919  718  714  740</span></code></pre></figure>

<p>You can get the mean measurement with the <code class="language-plaintext highlighter-rouge">mean()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mean</span><span class="p">(</span><span class="n">Nile</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 919.35</span></code></pre></figure>

<p>The mean of the most recent 10 years worth of data can be found by using the index to get a subset of the vector.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">mean</span><span class="p">(</span><span class="n">Nile</span><span class="p">[</span><span class="m">91</span><span class="o">:</span><span class="m">100</span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] 874.6</span><span class="w">

</span><span class="c1"># or obtaining the last 10 years programmatically</span><span class="w">
</span><span class="n">len</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">Nile</span><span class="p">)</span><span class="w">

</span><span class="n">mean</span><span class="p">(</span><span class="n">Nile</span><span class="p">[(</span><span class="n">len</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">9</span><span class="p">)</span><span class="o">:</span><span class="n">len</span><span class="p">])</span><span class="w">
</span><span class="cd">#' [1] 874.6</span></code></pre></figure>

<p>You could check the number of years in which the flow was over 1000.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">Nile</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="cd">#' Time Series:</span><span class="w">
</span><span class="cd">#' Start = 1871 </span><span class="w">
</span><span class="cd">#' End = 1970 </span><span class="w">
</span><span class="cd">#' Frequency = 1 </span><span class="w">
</span><span class="cd">#'   [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE</span><span class="w">
</span><span class="cd">#'  [12] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE</span><span class="w">
</span><span class="cd">#'  [23]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#'  [34] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#'  [45] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#'  [56] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#'  [67] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE</span><span class="w">
</span><span class="cd">#'  [78] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#'  [89] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE</span><span class="w">
</span><span class="cd">#' [100] FALSE</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">TRUE</code> values indicate elements greater than 1000. However, counting these manually wouldn’t be very efficient. Helpfully, logical values can be interpreted as numbers, with <code class="language-plaintext highlighter-rouge">TRUE</code> being 1 and <code class="language-plaintext highlighter-rouge">FALSE</code> being 0. With that in mind, the <code class="language-plaintext highlighter-rouge">sum()</code> function can be used to get the number of observations <code class="language-plaintext highlighter-rouge">&gt;</code> 1000.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="nf">sum</span><span class="p">(</span><span class="n">Nile</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1000</span><span class="p">)</span><span class="w">
</span><span class="cd">#' [1] 30</span></code></pre></figure>

<p>You might have noticed that in <code class="language-plaintext highlighter-rouge">Nile &gt; 1000</code>, <code class="language-plaintext highlighter-rouge">Nile</code> is a vector of 100 numeric elements, doubles to be precise, whereas the ‘1000’ is a single element. In this case R ‘recycles’ the ‘1000’ and uses it against each of the elements of <code class="language-plaintext highlighter-rouge">Nile</code>.</p>

<h2 id="next-steps">Next Steps</h2>

<p><code class="language-plaintext highlighter-rouge">WWWusage</code> is another time-series data-set that is bundled with R, this time recording the numbers of users connected to the Internet through a server every minute.</p>

<ol>
  <li>
    <p>What is the length of <code class="language-plaintext highlighter-rouge">WWWusage</code>?</p>
  </li>
  <li>
    <p>What is the mean number of connected users?</p>
  </li>
  <li>
    <p>How many observations recorded less than 100 users?</p>
  </li>
  <li>
    <p>What is the sum of observations of greater than 100 users?</p>
  </li>
  <li>
    <p>Calculate the sum of the means of the first and last 20 observations?</p>
  </li>
</ol>

<details>
  <summary>Answers</summary>
  
  1. 100 <br />
    
  2. 137.08 <br />
    
  3. 27 <br />
    
  4. 11,313 <br />
    
  5. 292.25 <br />
    
</details>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[In R, a vector is a series of elements with the same type. There are 4 important types to be aware of, that you will commonly encounter; Character Logical Double Integer Atomic vectors You may hear these being referred to as atomic vectors. It’s also useful to note that the term ‘numeric’ is often used interchangeably for both double and integer types. # a character type vector c("a", "b", "c", "d", "e") #' [1] "a" "b" "c" "d" "e" # a logical type vector c(TRUE, FALSE, FALSE, TRUE, TRUE) #' [1] TRUE FALSE FALSE TRUE TRUE # a double type vector c(1.2, 4.9, 2.1, 6.3, 1.7) #' [1] 1.2 4.9 2.1 6.3 1.7 # an integer type vector c(1L, 2L, 3L, 4L, 5L) #' [1] 1 2 3 4 5 c() c() is a built-in R function that combines the elements it is passed into a vector. You can provide any number of elements to c(). It is important to be aware that c() coerces elements to a common type. This is a common occurrence in R and understanding the implications can help to avoid errors. R is what is referred to as a weakly typed language, this means that sometimes a type will be coerced into another when code is executed. Thinking of the 4 common types in R, type coercion is performed according to a hierarchy; Logical &gt;&gt;&gt; Integer &gt;&gt;&gt; Double &gt;&gt;&gt; Character You can test how this works using typeof(). # logical and double coerced to double typeof(c(TRUE, 1.5)) #' [1] "double" # integer and double coerced to double typeof(c(1L, 1.5)) #' [1] "double" # logical and character coerced to character typeof(c(TRUE, "a")) #' [1] "character" # logical, integer, double, and character coerced to character typeof(c(TRUE, 1, 1.5, "a")) #' [1] "character" Assignment In order to be able to refer to or use an object in R after it’s creation, we first need to assign it a name. The R assignment operator &lt;- is the best way of achieving this. It is also possible to use = exclusively for this task, however, this goes against the community consensus so should be avoided. my_value &lt;- "assign this string to my_value" print(my_value) #' [1] "assign this string to my_value" Functions - arguments and use In R we use functions extensively, in their simplest form a function takes inputs (referred to as arguments) and returns an output. The sum() function returns the sum of all the values present in its arguments. sum(c(1, 2, 3, 4, 5)) #' [1] 15 Most functions allow for more than one argument, sum() for example has an argument na.rm. The na.rm argument accepts a logical (TRUE or FALSE) value. Setting the argument to TRUE will remove missing values. sum(c(1, 2, NA, 4, 5)) #' [1] NA sum(c(1, 2, NA, 4, 5), na.rm = TRUE) #' [1] 12 Indicies in R In R indices start at 1. Its useful to know that you can define a range of numbers using the : operator. Instead of writing c(1, 2, 3, 4, 5) to generate a vector of the numbers 1 to 5, you can write 1:5. t1 &lt;- c(1L, 2L, 3L, 4L, 5L) t2 &lt;- 1:5 identical(t1, t2) #' [1] TRUE You can use the index system to access elements of a vector. letters is a constant built into R, it is in effect a vector of the letters of the alphabet in lower case. To access a single element of a vector, for example the 13th letter of the alphabet, you can use the index system. letters[13] #' [1] "m" If you want to get the first 5 letters of the alphabet you can also use the index system with a range. letters[1:5] #' [1] "a" "b" "c" "d" "e" The next 5 letters can be accessed in the same way. letters[6:10] #' [1] "f" "g" "h" "i" "j" To get the 2nd, 4th, and 6th letters of the alphabet, you can use c(). letters[c(2, 4, 6)] #' [1] "b" "d" "f" If you need to know the length of a vector, the length() function is particularly useful. length(letters) #' [1] 26 Knowing how to check the length of a vector can be quite useful, it allows you to do things like get everything after the 20th element (inclusive), or even the last 5 elements. letters[20:length(letters)] #' [1] "t" "u" "v" "w" "x" "y" "z" len &lt;- length(letters) letters[(len - 4):len] #' [1] "v" "w" "x" "y" "z" You can also use indexing to change the order of the elements returned, for example you can return the first 5 letters of the alphabet in reverse order. letters[5:1] #' [1] "e" "d" "c" "b" "a" The which() function returns the indices of a vector that evaluate to TRUE. You can use it to find the index of j in the letters constant. which(letters == "j") #' [1] 10 You can also use which() to create a subset from the letters vector. letters[which(letters == "j")] #' [1] "j" However, the which function is actually unnecessary here, as it’s much simpler to do; letters[letters == "j"] #' [1] "j" Working with vectors The Nile data-set, a time-series of length 100, is bundled with R. It provides measurements of the annual flow of the river Nile at Aswan between 1871 and 1970. print(Nile) #' Time Series: #' Start = 1871 #' End = 1970 #' Frequency = 1 #' [1] 1120 1160 963 1210 1160 1160 813 1230 1370 1140 995 935 1110 #' [14] 994 1020 960 1180 799 958 1140 1100 1210 1150 1250 1260 1220 #' [27] 1030 1100 774 840 874 694 940 833 701 916 692 1020 1050 #' [40] 969 831 726 456 824 702 1120 1100 832 764 821 768 845 #' [53] 864 862 698 845 744 796 1040 759 781 865 845 944 984 #' [66] 897 822 1010 771 676 649 846 812 742 801 1040 860 874 #' [79] 848 890 744 749 838 1050 918 986 797 923 975 815 1020 #' [92] 906 901 1170 912 746 919 718 714 740 You can get the mean measurement with the mean() function. mean(Nile) #' [1] 919.35 The mean of the most recent 10 years worth of data can be found by using the index to get a subset of the vector. mean(Nile[91:100]) #' [1] 874.6 # or obtaining the last 10 years programmatically len &lt;- length(Nile) mean(Nile[(len - 9):len]) #' [1] 874.6 You could check the number of years in which the flow was over 1000. Nile &gt; 1000 #' Time Series: #' Start = 1871 #' End = 1970 #' Frequencyhe TRUE values indicate elements greater than 1000. However, counting these manually wouldn’t be very efficient. Helpfully, logical values can be interpreted as numbers, with TRUE being 1 and FALSE being 0. With that in mind, the sum() function can be used to get the number of observations &gt; 1000. sum(Nile &gt; 1000) #' [1] 30 You might have noticed that in Nile &gt; 1000, Nile is a vector of 100 numeric elements, doubles to be precise, whereas the ‘1000’ is a single element. In this case R ‘recycles’ the ‘1000’ and uses it against each of the elements of Nile. Next Steps WWWusage is another time-series data-set that is bundled with R, this time recording the numbers of users connected to the Internet through a server every minute. What is the length of WWWusage? What is the mean number of connected users? How many observations recorded less than 100 users? What is the sum of observations of greater than 100 users? Calculate the sum of the means of the first and last 20 observations? Answers 1. 100 2. 137.08 3. 27 4. 11,313 5. 292.25]]></summary></entry><entry><title type="html">R Basics - Packages</title><link href="http://0.0.0.0:4000/2022/09/21/r-basics-packages.html" rel="alternate" type="text/html" title="R Basics - Packages" /><published>2022-09-21T00:00:00+01:00</published><updated>2022-09-21T00:00:00+01:00</updated><id>http://0.0.0.0:4000/2022/09/21/r-basics-packages</id><content type="html" xml:base="http://0.0.0.0:4000/2022/09/21/r-basics-packages.html"><![CDATA[<p>The R package ecosystem is arguably one of the language’s strongest selling points. A package is typically a collection of functions, and sometimes data, along with documentation. R packages are community developed, typically open source, and serve to provide additional functionality or extend and build upon base R’s functionality.</p>

<p>The packages available range from huge projects used by millions of people  such as <a href="https://dplyr.tidyverse.org/"><code class="language-plaintext highlighter-rouge">dplyr</code></a> and <a href="https://rdatatable.gitlab.io/data.table/"><code class="language-plaintext highlighter-rouge">data.table</code></a>, to much smaller ones catering to more niche interests. Use of some of the larger packages can have a big effect on the way a user writes and structures code, for example <code class="language-plaintext highlighter-rouge">dplyr</code> one of the <strong><em>tidyverse</em></strong> family of packages, encourages adoption of the authors ideals of <strong><em>tidy code</em></strong> and its use can influence the design of a project itself.</p>

<p>Other packages are less impactful and serve a more specific purpose. If you want to access open data from NHS Scotland for example, you could read the API documentation, learn how to use the <code class="language-plaintext highlighter-rouge">httr</code> package, and write bespoke code to import the data. Alternatively, you could install <a href="https://github.com/jrh-dev/odns"><code class="language-plaintext highlighter-rouge">odns</code></a> and have it all done for you (<em>disclaimer: I wrote odns</em>).</p>

<p>Using packages is a fundamental part of programming with R for many users, but for those just starting out its important to understand what they’re all about.</p>

<h2 id="r-packages">R packages</h2>

<p>The official documentations states that ;</p>

<blockquote>
  <p>Packages provide a mechanism for loading optional code, data and documentation as needed. The R distribution itself includes about 30 packages.</p>
</blockquote>

<p>At a basic level we can simply think of packages as a collection of functions and data with documentation. Typically users install a package in order to make use of functionality that isn’t provided by base R and to avoid having to write their own solutions to common and/or complex problems.</p>

<p>Anybody can write a package and use it locally, you can also share a package you wrote with friends and colleagues. Some may go on to make the packages they write available publicly on services such as GitHub, and those looking to reach a wider audience may decide to publish their package to CRAN or Bioconductor.</p>

<p>Regardless of how widely a package is intended to be used, R actually enforces quite a strict structure for packages in comparison to other programming languages. The benefit of this is that packages are largely easy to use and understand, and as you gain experience, easier to dissect and explore the source code.</p>

<h2 id="package-sources">Package sources</h2>

<h3 id="cran">CRAN</h3>

<p>The Comprehensive R Archive Network (CRAN) is the official repository. It hosts a large number of packages, has strict criteria around submission, and packages published there are thoroughly tested and must undergo a manual review process.</p>

<p>When using the <code class="language-plaintext highlighter-rouge">install.packages()</code> function, the default settings look for the package on CRAN.</p>

<h3 id="bioconductor">Bioconductor</h3>

<p>Biocondutor hosts software tailored to performing reproducible analysis of data with a biological focus, including the analysis of DNA microarray, sequence, flow, SNP, and other data. Like CRAN it also has a review process for submissions.</p>

<h3 id="github">GitHub</h3>

<p>Whilst other hosting services are available, GitHub is one of the most popular for R development. Anybody can host code on GitHub and there is no review or submission process. GitHub hosts development versions of many packages that are also on CRAN or Bioconductor.</p>

<h3 id="locally-zip-or-targz-file">Locally (zip or tar.gz file)</h3>

<p>If a package has been written or developed locally it may be shared with you in a zip or tar.gz archive.</p>

<h2 id="installing-packages">Installing packages</h2>

<h3 id="install-from-cran">Install from CRAN</h3>

<p>Installing packages from CRAN is pretty straightforwards. You pass a string specifying the package name as the <code class="language-plaintext highlighter-rouge">pkgs</code> argument of <code class="language-plaintext highlighter-rouge">install.packages()</code>, and if the package exists on CRAN it will be downloaded and installed along with other R packages that the target package depends on, imports, or links to (using the default options).</p>

<p>To install the <code class="language-plaintext highlighter-rouge">odns</code> package;</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"odns"</span><span class="p">)</span></code></pre></figure>

<p>It’s also possible to install multiple packages at once.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"odns"</span><span class="p">,</span><span class="w"> </span><span class="s2">"httr"</span><span class="p">))</span></code></pre></figure>

<p>CRAN has mirrors all over the world, near identical copies of the repository hosted across multiple servers. Following a fresh install, using <code class="language-plaintext highlighter-rouge">install.packages()</code> may return a prompt asking that you select a mirror. Most people should simply select option ‘1’ (“https://cloud.r-project.org”), which defaults to use a mirror near to you.</p>

<p>You can also set the mirror of choice at any time the <code class="language-plaintext highlighter-rouge">chooseCRAN()</code> function.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">---</span><span class="w"> </span><span class="n">Please</span><span class="w"> </span><span class="n">select</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">CRAN</span><span class="w"> </span><span class="n">mirror</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">use</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">session</span><span class="w"> </span><span class="o">---</span><span class="w">

</span><span class="n">Secure</span><span class="w"> </span><span class="n">CRAN</span><span class="w"> </span><span class="n">mirrors</span><span class="w"> 

 </span><span class="m">1</span><span class="o">:</span><span class="w"> </span><span class="m">0</span><span class="o">-</span><span class="n">Cloud</span><span class="w"> </span><span class="p">[</span><span class="n">https</span><span class="p">]</span><span class="w">
 </span><span class="m">2</span><span class="o">:</span><span class="w"> </span><span class="n">Australia</span><span class="w"> </span><span class="p">(</span><span class="n">Canberra</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">https</span><span class="p">]</span><span class="w">
 </span><span class="m">3</span><span class="o">:</span><span class="w"> </span><span class="n">Australia</span><span class="w"> </span><span class="p">(</span><span class="n">Melbourne</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">https</span><span class="p">]</span><span class="w">
 </span><span class="m">4</span><span class="o">:</span><span class="w"> </span><span class="n">Australia</span><span class="w"> </span><span class="p">(</span><span class="n">Melbourne</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">https</span><span class="p">]</span><span class="w">
 </span><span class="m">5</span><span class="o">:</span><span class="w"> </span><span class="n">Australia</span><span class="w"> </span><span class="p">(</span><span class="n">Perth</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">https</span><span class="p">]</span><span class="w">
 </span><span class="n">...</span><span class="w">

</span><span class="n">Selection</span><span class="o">:</span><span class="w"> </span><span class="m">1</span></code></pre></figure>

<p>RStudio users also have the option to install packages through the user interface. Clicking <code class="language-plaintext highlighter-rouge">Tools &gt; Install Packages...</code> opens up the relevant window, where the package name can be entered, before clicking <strong><em>Install</em></strong>.</p>

<p><img src="/assets/img/r-libraries-img/img01.png" alt="Image" class="shadow" /></p>

<h3 id="install-from-bioconductor">Install from Bioconductor</h3>

<p>Installing from Bioconductor requires an additional package <code class="language-plaintext highlighter-rouge">BiocManager</code>, which can be installed from CRAN. Once <code class="language-plaintext highlighter-rouge">BiocManager</code> is installed, you can install Bioconductor packages using <code class="language-plaintext highlighter-rouge">BiocManager::install()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"BiocManager"</span><span class="p">)</span><span class="w">

</span><span class="n">BiocManager</span><span class="o">::</span><span class="n">install</span><span class="p">(</span><span class="s2">"GenomicFeatures"</span><span class="p">)</span></code></pre></figure>

<h3 id="install-from-local-archive">Install from local archive</h3>

<p>If you have an R package as an archive (zip or tar.gz), these can be installed using the <code class="language-plaintext highlighter-rouge">install.packages()</code> function with a few additional options specified.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"path_to_file/odns.tar.gz"</span><span class="p">,</span><span class="w"> </span><span class="n">repos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"source"</span><span class="p">)</span></code></pre></figure>

<h3 id="install-from-github">Install from GitHub</h3>

<p>There are a couple of options for installing packages directly from GitHub, but the simplest is to use the <code class="language-plaintext highlighter-rouge">remotes</code> package, which can be installed from CRAN. Once <code class="language-plaintext highlighter-rouge">remotes</code> is installed, you can install packages from GitHub using <code class="language-plaintext highlighter-rouge">remotes::install_github()</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"remotes"</span><span class="p">)</span><span class="w">

</span><span class="n">remotes</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"jrh-dev/odns"</span><span class="p">)</span></code></pre></figure>

<p class="error">
<strong><i>Warning:</i></strong> Using any R package, whatever the source, involves an element of trust. Any package you install could potentially contain malicious code, but there are steps which can be taken to mitigate the dangers.
<br /><br />
CRAN packages must undergo a series of checks upon submission, new submissions are carefully scrutinised, and packages on CRAN are subjected to ongoing testing on multiple platforms. The CRAN submission process does not provide a watertight guarantee of safety, but it does present a serious obstacle for potential bad actors. Bioconductor's own submission process presents a similar deterrent to CRAN.
<br /><br />
Installing directly from GitHub or other repositories is inherently risky. There are no checks or tests performed on code hosted on GitHub outside of those chosen by the author. Whilst malware is against GitHubs terms of service, it takes time and reports for it to be identified. Installing popular packages from GitHub is not without risk either. Common approaches to spreading malware include attempting to direct users to install packages from apparently legitimate links such as <code>tidiverse/dplyr</code>. 
<br /><br />
In the past, developers credentials have been compromised and legitimate accounts under the control of bad actors used to push malicious code. In recent years a small number of developers have turned rogue and intentionally poisoned their own repositories. Thankfully, none of these high profile incidents have affected R directly.
<br /><br />
Malicious additions and changes to popular open source projects should be caught quickly, but whilst we would expect them to be caught before they reach CRAN, they may already have been installed from GitHub many times. 
<br /><br />
GitHub is a fantastic resource and users should not be discouraged from using it, or from testing development versions of packages. However, installing packages from GitHub should be considered an option primarily for intermediate to advanced users with the skill to understand the source code within the packages being used.
<br /><br />
Personally, I avoid using development or non-CRAN/BioConductor versions of packages in anything other than a sandbox environment. If there were no alternative packages available and I could not write the functionality myself, I would prefer to fork the repository, undertake a full code review, and then use the forked version in my own project.
</p>

<h2 id="using-packages">Using packages</h2>

<p>Once a package is installed you can start using it right away. Without loading the package, you can access its functions with <code class="language-plaintext highlighter-rouge">::</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">odns</span><span class="o">::</span><span class="n">all_packages</span><span class="p">()</span><span class="w">
</span><span class="cd">#' package_name                                      package_id</span><span class="w">
</span><span class="cd">#' covid-19-vaccination-in-scotland                  6dbdd466-…</span><span class="w">
</span><span class="cd">#' enhanced-surveillance-of-covid-19-in-scotland     3c5231ee-…</span><span class="w">
</span><span class="cd">#' hospital-onset-covid-19-cases-in-scotland         d67b13ef-…</span><span class="w">
</span><span class="cd">#' weekly-covid-19-statistical-data-in-scotland      524b42b4-…</span><span class="w">
</span><span class="cd">#' covid-19-in-scotland                              b318bddf-…</span><span class="w">
</span><span class="cd">#' … with 85 more rows</span></code></pre></figure>

<p>Trying to call the function by name, without first loading the package returns an error.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">all_packages</span><span class="p">()</span><span class="w">
</span><span class="cd">#' Error in all_packages() : could not find function "all_packages"</span><span class="w">
</span><span class="cd">#' </span></code></pre></figure>

<p>To load the package and access it’s functions without the <code class="language-plaintext highlighter-rouge">::</code>, you can use the <code class="language-plaintext highlighter-rouge">library()</code> function. The package name is passed without quotes as the <code class="language-plaintext highlighter-rouge">package</code> argument.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">odns</span><span class="p">)</span><span class="w">

</span><span class="n">all_packages</span><span class="p">()</span><span class="w">
</span><span class="cd">#' package_name                                      package_id</span><span class="w">
</span><span class="cd">#' covid-19-vaccination-in-scotland                  6dbdd466-…</span><span class="w">
</span><span class="cd">#' enhanced-surveillance-of-covid-19-in-scotland     3c5231ee-…</span><span class="w">
</span><span class="cd">#' hospital-onset-covid-19-cases-in-scotland         d67b13ef-…</span><span class="w">
</span><span class="cd">#' weekly-covid-19-statistical-data-in-scotland      524b42b4-…</span><span class="w">
</span><span class="cd">#' covid-19-in-scotland                              b318bddf-…</span><span class="w">
</span><span class="cd">#' … with 85 more rows</span></code></pre></figure>

<p>When to use <code class="language-plaintext highlighter-rouge">::</code> and <code class="language-plaintext highlighter-rouge">library()</code> is a matter of personal preference. Loading a large library with many functions to use one specific function is often not necessary, especially if the functions within that package mask some others that you do want to use. Google’s R style guide provides a useful take on the issue.</p>

<blockquote>

<p><strong>Qualifying namespaces</strong></p>

<p>Users should explicitly qualify namespaces for all external functions.</p>

<pre><code># Good
purrr::map()</code></pre>

<p>We discourage using the @import Roxygen tag to bring in all functions into a NAMESPACE. Google has a very big R codebase, and importing all functions creates too much risk for name collisions.</p>

<p>While there is a small performance penalty for using ::, it makes it easier to understand dependencies in your code. There are some exceptions to this rule.</p>

<ul>
  <li>Infix functions (%name%) always need to be imported.</li>
  <li>Certain rlang pronouns, notably .data, need to be imported.</li>
  <li>Functions from default R packages, including datasets, utils, grDevices, graphics, stats and methods. If needed, you can @import the full package.</li>
</ul> 
 
When importing functions, place the @importFrom tag in the Roxygen header above the function where the external dependency is used.

<p align="right"><cite><a href="https://google.github.io/styleguide/Rguide.html">Google’s R Style Guide</a></cite></p>

</blockquote>

<h2 id="updating-packages">Updating packages</h2>

<p>Over time new versions of packages are released. RStudio users can navigate to the ‘Packages’ pane, and click on the ‘Update’ button to perform a check for newer version of currently installed packages. This allows you to select any packages that you then want to update.</p>

<p><img src="/assets/img/r-libraries-img/img02.png" alt="Image" class="shadow" /></p>

<p>The <code class="language-plaintext highlighter-rouge">old.packages()</code> function provides a programmatic way to identify installed packages that have newer versions available.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">old.packages</span><span class="p">()</span><span class="w">
</span><span class="cd">#'      Package LibPath              Installed Built   ReposVer  </span><span class="w">
</span><span class="cd">#' MASS "MASS"  "/usr/lib/R/library" "7.3-58"  "4.2.1" "7.3-58.1"</span><span class="w">
</span><span class="cd">#'      Repository                               </span><span class="w">
</span><span class="cd">#' MASS "https://cloud.r-project.org/src/contrib"</span></code></pre></figure>

<p>Having identified packages that can be updated, using <code class="language-plaintext highlighter-rouge">install.packages()</code> will install the latest version.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="s2">"MASS"</span><span class="p">)</span></code></pre></figure>

<p class="warning">
<strong><i>Caution:</i></strong> When a package is updated it may fix bugs, add new functionality, or offer performance improvements. However, it may also change how some functions work, or remove them entirely. If you update a package that is used in a repeated workflow then this may lead to bugs, or your code may stop working altogether. Always test your workflows when updating packages.</p>

<h2 id="when-to-use-a-package">When to use a package</h2>

<p>The wide range of high quality packages available for R are one of its many strengths and a key element of its continued success. However, it is also important to consider dependencies and reproducibility. Adding packages that aren’t required, or that have easy to use alternatives in base R increases the amount of maintenance required for your code base over time. It also makes it harder for others to run your code.</p>

<p>Try to use packages sparingly and look critically at whether a package provides the best solution to a problem.</p>

<h2 id="viewing-documentation">Viewing documentation</h2>

<p>RStudio users can access the documentation for any installed package with <code class="language-plaintext highlighter-rouge">??</code>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">??</span><span class="n">odns</span></code></pre></figure>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Search Results</th>
      <th style="text-align: center">Package Vignette</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="/assets/img/r-libraries-img/img03.png" alt="Image" /></td>
      <td style="text-align: center"><img src="/assets/img/r-libraries-img/img04.png" alt="Image" /></td>
    </tr>
  </tbody>
</table>

<p>The documentation for functions or data within a package can be obtained in the same way.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">??</span><span class="n">odns</span><span class="o">::</span><span class="n">all_packages</span></code></pre></figure>

<p><img src="/assets/img/r-libraries-img/img05.png" alt="Image" class="shadow" /></p>

<h2 id="next-steps">Next steps</h2>

<p>Once you’re comfortable with installing R packages, it’s time to start exploring. Worthy mentions include;</p>

<ul>
  <li>
    <p><a href="https://www.tidyverse.org/">The tidyverse</a>, a collection of packages in reality, highly opinionated, but very popular.</p>
  </li>
  <li>
    <p><a href="https://rdatatable.gitlab.io/data.table/">data.table</a> offers unparalleled performance and a style more in line with base R.</p>
  </li>
  <li>
    <p><a href="https://lubridate.tidyverse.org/">lubridate</a> provides useful functions for dealing with dates.</p>
  </li>
  <li>
    <p><a href="https://ggplot2.tidyverse.org/">ggplot2</a>, the essential plotting package for R.</p>
  </li>
</ul>]]></content><author><name>&lt;author_id&gt;</name></author><category term="R basics" /><category term="Tutorial" /><summary type="html"><![CDATA[The R package ecosystem is arguably one of the language’s strongest selling points. A package is typically a collection of functions, and sometimes data, along with documentation. R packages are community developed, typically open source, and serve to provide additional functionality or extend and build upon base R’s functionality. The packages available range from huge projects used by millions of people such as dplyr and data.table, to much smaller ones catering to more niche interests. Use of some of the larger packages can have a big effect on the way a user writes and structures code, for example dplyr one of the tidyverse family of packages, encourages adoption of the authors ideals of tidy code and its use can influence the design of a project itself. Other packages are less impactful and serve a more specific purpose. If you want to access open data from NHS Scotland for example, you could read the API documentation, learn how to use the httr package, and write bespoke code to import the data. Alternatively, you could install odns and have it all done for you (disclaimer: I wrote odns). Using packages is a fundamental part of programming with R for many users, but for those just starting out its important to understand what they’re all about. R packages The official documentations states that ; Packages provide a mechanism for loading optional code, data and documentation as needed. The R distribution itself includes about 30 packages. At a basic level we can simply think of packages as a collection of functions and data with documentation. Typically users install a package in order to make use of functionality that isn’t provided by base R and to avoid having to write their own solutions to common and/or complex problems. Anybody can write a package and use it locally, you can also share a package you wrote with friends and colleagues. Some may go on to make the packages they write available publicly on services such as GitHub, and those looking to reach a wider audience may decide to publish their package to CRAN or Bioconductor. Regardless of how widely a package is intended to be used, R actually enforces quite a strict structure for packages in comparison to other programming languages. The benefit of this is that packages are largely easy to use and understand, and as you gain experience, easier to dissect and explore the source code. Package sources CRAN The Comprehensive R Archive Network (CRAN) is the official repository. It hosts a large number of packages, has strict criteria around submission, and packages published there are thoroughly tested and must undergo a manual review process. When using the install.packages() function, the default settings look for the package on CRAN. Bioconductor Biocondutor hosts software tailored to performing reproducible analysis of data with a biological focus, including the analysis of DNA microarray, sequence, flow, SNP, and other data. Like CRAN it also has a review process for submissions. GitHub Whilst other hosting services are available, GitHub is one of the most popular for R development. Anybody can host code on GitHub and there is no review or submission process. GitHub hosts development versions of many packages that are also on CRAN or Bioconductor. Locally (zip or tar.gz file) If a package has been written or developed locally it may be shared with you in a zip or tar.gz archive. Installing packages Install from CRAN Installing packages from CRAN is pretty straightforwards. You pass a string specifying the package name as the pkgs argument of install.packages(), and if the package exists on CRAN it will be downloaded and installed along with other R packages that the target package depends on, imports, or links to (using the default options). To install the odns package; install.packages("odns") It’s also possible to install multiple packages at once. install.packages(c("odns", "httr")) CRAN has mirrors all over the world, near identical copies of the repository hosted across multiple servers. Following a fresh install, using install.packages() may return a prompt asking that you select a mirror. Most people should simply select option ‘1’ (“https://cloud.r-project.org”), which defaults to use a mirror near to you. You can also set the mirror of choice at any time the chooseCRAN() function. --- Please select a CRAN mirror for use in this session --- Secure CRAN mirrors 1: 0-Cloud [https] 2: Australia (Canberra) [https] 3: Australia (Melbourne 1) [https] 4: Australia (Melbourne 2) [https] 5: Australia (Perth) [https] ... Selection: 1 RStudio users also have the option to install packages through the user interface. Clicking Tools &gt; Install Packages... opens up the relevant window, where the package name can be entered, before clicking Install. Install from Bioconductor Installing from Bioconductor requires an additional package BiocManager, which can be installed from CRAN. Once BiocManager is installed, you can install Bioconductor packages using BiocManager::install(). install.packages("BiocManager") BiocManager::install("GenomicFeatures") Install from local archive If you have an R package as an archive (zip or tar.gz), these can be installed using the install.packages() function with a few additional options specified. install.packages("path_to_file/odns.tar.gz", repos = NULL, type = "source") Install from GitHub There are a couple of options for installing packages directly from GitHub, but the simplest is to use the remotes package, which can be installed from CRAN. Once remotes is installed, you can install packages from GitHub using remotes::install_github(). install.packages("remotes") remotes::install_github("jrh-dev/odns") Warning: Using any R package, whatever the source, involves an element of trust. Any package you install could potentially contain malicious code, but there are steps which can be taken to mitigate the dangers. CRAN packages must undergo a series of checks upon submission, new submissions are carefully scrutinised, and packages on CRAN are subjected to ongoing testing on multiple platforms. The CRAN submission process does not provide a watertight guarantee of safety, but it does present a serious obstacle for potential bad actors. Bioconductor's own submission process presents a similar deterrent to CRAN. Installing directly from GitHub or other repositories is inherently risky. There are no checks or tests performed on code hosted on GitHub outside of those chosen by the author. Whilst malware is against GitHubs terms of service, it takes time and reports for it to be identified. Installing popular packages from GitHub is not without risk either. Common approaches to spreading malware include attempting to direct users to install packages from apparently legitimate links such as tidiverse/dplyr. In the past, developers credentials have been compromised and legitimate accounts under the control of bad actors used to push malicious code. In recent years a small number of developers have turned rogue and intentionally poisoned their own repositories. Thankfully, none of these high profile incidents have affected R directly. Malicious additions and changes to popular open source projects should be caught quickly, but whilst we would expect them to be caught before they reach CRAN, they may already have been installed from GitHub many times. GitHub is a fantastic resource and users should not be discouraged from using it, or from testing development versions of packages. However, installing packages from GitHub should be considered an option primarily for intermediate to advanced users with the skill to understand the source code within the packages being used. Personally, I avoid using development or non-CRAN/BioConductor versions of packages in anything other than a sandbox environment. If there were no alternative packages available and I could not write the functionality myself, I would prefer to fork the repository, undertake a full code review, and then use the forked version in my own project. Using packages Once a package is installed you can start using it right away. Without loading the package, you can access its functions with ::. odns::all_packages() #' package_name package_id #' covid-19-vaccination-in-scotland 6dbdd466-… #' enhanced-surveillance-of-covid-19-in-scotland 3c5231ee-… #' hospital-onset-covid-19-cases-in-scotland d67b13ef-… #' weekly-covid-19-statistical-data-in-scotland 524b42b4-… #' covid-19-in-scotland b318bddf-… #' … with 85 more rows Trying to call the function by name, without first loading the package returns an error. all_packages() #' Error in all_packages() : could not find function "all_packages" #' To load the package and access it’s functions without the ::, you can use the library() function. The package name is passed without quotes as the package argument. library(odns) all_packages() #' package_name package_id #' covid-19-vaccination-in-scotland 6dbdd466-… #' enhanced-surveillance-of-covid-19-in-scotland 3c5231ee-… #' hospital-onset-covid-19-cases-in-scotland d67b13ef-… #' weekly-covid-19-statistical-data-in-scotland 524b42b4-… #' covid-19-in-scotland b318bddf-… #' … with 85 more rows When to use :: and library() is a matter of personal preference. Loading a large library with many functions to use one specific function is often not necessary, especially if the functions within that package mask some others that you do want to use. Google’s R style guide provides a useful take on the issue. Qualifying namespaces Users should explicitly qualify namespaces for all external functions. # Good purrr::map() We discourage using the @import Roxygen tag to bring in all functions into a NAMESPACE. Google has a very big R codebase, and importing all functions creates too much risk for name collisions. While there is a small performance penalty for using ::, it makes it easier to understand dependencies in your code. There are some exceptions to this rule. Infix functions (%name%) always need to be imported. Certain rlang pronouns, notably .data, need to be imported. Functions from default R packages, including datasets, utils, grDevices, graphics, stats and methods. If needed, you can @import the full package. When importing functions, place the @importFrom tag in the Roxygen header above the function where the external dependency is used. Google’s R Style Guide Updating packages Over time new versions of packages are released. RStudio users can navigate to the ‘Packages’ pane, and click on the ‘Update’ button to perform a check for newer version of currently installed packages. This allows you to select any packages that you then want to update. The old.packages() function provides a programmatic way to identify installed packages that have newer versions available. old.packages() #' Package LibPath Installed Built ReposVer #' MASS "MASS" "/usr/lib/R/library" "7.3-58" "4.2.1" "7.3-58.1" #' Repository #' MASS "https://cloud.r-project.org/src/contrib" Having identified packages that can be updated, using install.packages() will install the latest version. install.packages("MASS") Caution: When a package is updated it may fix bugs, add new functionality, or offer performance improvements. However, it may also change how some functions work, or remove them entirely. If you update a package that is used in a repeated workflow then this may lead to bugs, or your code may stop working altogether. Always test your workflows when updating packages. When to use a package The wide range of high quality packages available for R are one of its many strengths and a key element of its continued success. However, it is also important to consider dependencies and reproducibility. Adding packages that aren’t required, or that have easy to use alternatives in base R increases the amount of maintenance required for your code base over time. It also makes it harder for others to run your code. Try to use packages sparingly and look critically at whether a package provides the best solution to a problem. Viewing documentation RStudio users can access the documentation for any installed package with ??. ??odns Search Results Package Vignette The documentation for functions or data within a package can be obtained in the same way. ??odns::all_packages Next steps Once you’re comfortable with installing R packages, it’s time to start exploring. Worthy mentions include; The tidyverse, a collection of packages in reality, highly opinionated, but very popular. data.table offers unparalleled performance and a style more in line with base R. lubridate provides useful functions for dealing with dates. ggplot2, the essential plotting package for R.]]></summary></entry></feed>